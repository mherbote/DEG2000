;	routinen fuer   1. zentralstation
;		        2.      TRAM - Disk
;	                3. 16k - PFS - Disk
;	===================================
;
 if opsdk
opsmac	macro
op1111::
wro1:	call	setlp
	push	hl
	ld	hl,gdma
	pop	de
	ld	bc,128
	ldir
	call	reslp
	jp	wro2
;
rdo1:	call	setlp
	ld	de,gdma
	ld	bc,128
	ldir
	call	reslp
	jp	rdo2
;
inp1:	xor	a
	ld	(trk),a
	call	trka
	call	setlp
	ld	hl,0c000h	; verzeichniseintraege auf E5 setzen
	ld	de,0c001h
	ld	bc,007ffh
	ld	(hl),0e5h
	ldir
	ld	hl,0c000h	; verzeichnis fuer pseudo-datei GO.COM
	ld	de,0c001h
	ld	bc,01fh
	ld	(hl),0
	ldir
	ld	hl,s2neu
	ld	de,0c000h
	ld	bc,12
	ldir
	call	reslp
	jp	inp2
;
gdma	equ	$
s2neu	equ	gdma+128+20h
s2ret	equ	s2neu
	endm
 endif
;
;
;
md.kalt::
 if tramdk
	ld	b,pdta		; - pseudo-disk-tram's aktivieren
	ld	c,pdtr
trdef2:	push	bc
	ld	b,0		; (00-F0) CS und WR sperren
	ld	e,16
	call	up31
	inc	c		; tram aktivieren
	inc	c
	inc	c
	ld	a,1
	out	(c),a
	pop	bc
	ld	a,-8
	add	a,c
	ld	c,a
	djnz	trdef2
	ld	a,pdtr		; aktuelle tram-anzahl ermitteln
	ld	(tram),a
	xor	a
	ld	(ttrk),a
	ld	(ttanz),a
	ld	b,pdta
mdk20:	push	bc
	call	trak
	ld	hl,03000h
	ld	a,(hl)
	ld	d,a
	cpl
	ld	(hl),a
	cp	(hl)
	ld	a,d
	ld	(hl),a
	call	trdea
	pop	bc
	jr	nz,mdk21
	ld	a,(ttanz)
	add	a,16
	ld	(ttanz),a
	ld	a,(tram)
	sub	8
	ld	(tram),a
	djnz	mdk20
;
mdk21:	ld	a,(ttanz)
	or	a
	jr	z,mdk22
	ld	h,0		; laufwerkskapazitaet O eintragen
	ld	l,a
	rept	2
	add	hl,hl
	endm
	dec	hl
	ld	(dpblko+5),hl
	ld	hl,dpho1	; laufwerk O aktivieren
	ld	(dpho),hl
mdk22:
 endif

 if opsdk
	ld	hl,biosxx
	ld	de,op1111
	ld	bc,op12-op11
	ldir
	ld	hl,dirgo
	ld	bc,12
	ldir
	ld	hl,zsm		; laufwerkskapazitaet P bestimmen
	ld	bc,800h
ops3:	ld	a,(hl)
	or	a
	inc	hl
	jr	z,ops4
	inc	c
ops4:	djnz	ops3
	ld	a,c
ops13:	ld	(zsma),a
	or	a
	jr	z,ops5
	ld	h,0
	ld	l,a
	rept	4
	add	hl,hl
	endm
	dec	hl
	ld	(dpblkp+5),hl
	ld	hl,dphp1	; laufwerk P aktivieren
	ld	(dphp),hl
ops5:
 endif

 if zst
	call	ri.ata
mdw3:	xor	a		; warten bis keine Daten mehr da
	out	(ptast+11h),a
	in	a,(ptast+11h)
	bit	0,a
	jr	z,mdw2
	in	a,(ptast+10h)
	jr	mdw3
mdw2:
 endif

md.warm::
 if zst
	xor	a
	out	(ptast+11h),a
	in	a,(ptast+11h)
	bit	0,a
	jr	z,mdw1
	in	a,(ptast+10h)
	cp	11h		; DC1
	jr	nz,mdw1
	out	(ptast+10h),a
	ld	hl,00014h	; DC4 NUL
	call	ldpuhl
	call	ldhlri
	call	ldhlri		; sec/trk
	ld	(dpblkn),hl
	call	ldhlri		; kapazitaet
	ld	(dpblkn+5),hl
	call	ldhlri		; anzahl_dir_entries
	ld	(dpblkn+7),hl
	call	ldhlri		; dir_bloecke
	ld	(dpblkn+9),hl
	call	ldhlri		; dir_entries_pruefen
	ld	(dpblkn+11),hl
	ld	hl,dphn1
	ld	(dphn),hl
	ret
mdw1:	ld	hl,0
	ld	(dpblkn+5),hl
	ret

ldhlri:	call	ri1.ch
	ld	l,a
	call	ri1.ch
	ld	h,a
	ret
ldpuhl:	ld	c,l
	call	pu1.ch
	ld	c,h
	call	pu1.ch
 endif

	ret
;
;
;
	page
;	1.  routinen fuer    Z e n t r a l s t a t i o n
;	================================================
;
 if zst
wrzst::
	ld	hl,(dpblkn+5)
	ld	a,h
	or	l
	jp	z,wrmem0
	ld	a,11h
	out	(ptast+10h),a
	ld	hl,00112h	; DC2 01
	call	ldpuhl
	ld	hl,(trk)	; trk
	call	ldpuhl
	ld	hl,(sec)	; sec
	call	ldpuhl
wrz1:	call	ri1.ch		; DC2
	call	ri1.ch		; Quittierung
				; = 1  ...  nicht verfuegbar
				; = 2  ...        verfuegbar
	cp	2
	jp	c,wrmem0
	ld	hl,00212h	; DC2 02
	call	ldpuhl
	ld	hl,dmma
	ld	b,128
wrz2:	ld	c,(hl)
	inc	hl
	call	pu1.ch
	djnz	wrz2
	xor	a
	ret


rdzst::
	ld	hl,(dpblkn+5)
	ld	a,h
	or	l
	jp	z,rdmem0
	ld	a,11h		; DC1
	out	(ptast+10h),a
	ld	hl,00113h	; DC3 01
	call	ldpuhl
	ld	hl,(trk)	; trk
	call	ldpuhl	
	ld	hl,(sec)	; sec
	call	ldpuhl
rdz1:	call	ri1.ch		; DC3
	call	ri1.ch		; Qittierung
				; = 1  ...  nicht verfuegbar
				; = 2  ...        verfuegbar; es folgen
				;           die Daten
	cp	2
	jp	c,wrmem0
	ld	hl,dmma
	ld	b,128
rdz2:	call	ri1.ch
	ld	(hl),a
	inc	hl
	djnz	rdz2
	xor	a
	ret
 endif
;
;
;
	page
;	2.  routinen fuer    T R A M   -   P s e u d o d i s k
;	======================================================
;
 if tramdk
wrtram::
	ld	a,(ttanz)	; trkanz > 0 ?
	or	a
	jp	z,wrmem0	; nein
	call	tdadr
	jp	c,wrmem0
	push	hl
	call	trak
	ld	hl,dmma
	pop	de
	ld	bc,128
	ldir
	call	trdea
	xor	a
	ret
;
;
rdtram::
	ld	a,(ttanz)	; trkanz > 0 ?
	or	a
	jp	z,rdmem0	; nein
	call	tdadr
	jp	c,wrmem0
	push	hl
	call	trak
	pop	hl
	ld	de,dmma
	ld	bc,128
	ldir
	call	trdea
	xor	a
	ret
;
;
md.ino::
	ld	a,(ttanz)
	or	a
	jp	z,0
	ld	a,pdtr
	ld	(tram),a
	xor	a
	ld	(ttrk),a
	call	trak
	ld	hl,03000h	; verzeichniseintraege auf E5 setzen
	ld	de,03001h
	ld	bc,007ffh
	ld	(hl),0e5h
	ldir
	ld	hl,03000h	; verzeichnis fuer pseudo-datei GO.COM
	ld	de,03001h
	ld	bc,01fh
	ld	(hl),0
	ldir
	ld	hl,dirgo
	ld	de,03000h
	ld	bc,12
	ldir
	call	trdea
	ret
;
;
tdadr::	ld	a,(trk)		; trk = > trkanz
	ld	hl,ttanz
	cp	(hl)
	ccf
	ret	c		; ja
	inc	hl
	ld	(hl),pdtr	; tram - adresse
tdadr1:	sub	16
	jr	c,tdadr2
	rept	8
	dec	(hl)
	endm
	jr	tdadr1
;
tdadr2:	add	a,16
	inc	hl
	ld	(hl),a		; ttrk
	ld	hl,(sec)
	rept	7
	add	hl,hl
	endm
	ld	de,02f80h
	add	hl,de
	scf
	ccf
	ret
;
;
;
ttanz::	defb	0		; TRAM - Trackanzahl
tram::	defb	0		; TRAM - Adresse
ttrk::	defb	0		; TRAM - Track
 endif
;
;
;
	page
;	3.  routinen fuer	16k - P F S   -   P s e u d o d i s k
;	=============================================================
;
 if opsdk
wrops::	ld	a,(zsma)
	or	a
	jp	z,wrmem0
	call	padr
	jp	c,wrmem0
	push	hl
	ld	hl,dmma
	ld	de,gdma
	ld	bc,128
	ldir
	pop	hl
	call	trka
	jp	wro1		;----->  !
				;        !
wro2:	xor	a		;<-----  !
	ret
;
;
rdops::	ld	a,(zsma)
	or	a
	jp	z,rdmem0
	call	padr
	jp	c,rdmem0
	call	trka
	jp	rdo1		;----->  !
				;        !
rdo2:	ld	hl,gdma		;<-----  !
	ld	de,dmma
	ld	bc,128
	ldir
	xor	a
	ret
;
;
md.inp::
	ld	a,(zsma)
	or	a
	jp	z,0
	jp	inp1		;----->  !
				;        !
inp2:	ret			;<-----  !
;
;
padr::	ld	a,(trk)
	ld	hl,zsma
	cp	(hl)
	ccf
	ret	c
	ld	hl,(sec)
	rept	7
	add	hl,hl
	endm
	ld	de,0bf80h
	add	hl,de
	scf
	ccf
	ret
;
;
trka:	push	bc		;Transformation TRACK ===> Datenbit SYS2-SBST
	push	hl		;                trk          register A
	ld	a,(trk)
	ld	b,a
	inc	b
	ld	hl,zsm
trka1:	ld	a,(hl)
	inc	hl
	or	a
	jr	z,trka1
	djnz	trka1
	dec	hl
	ld	a,(hl)
	and	00011100b
	rrca
	rrca
	inc	a
	ld	b,a
	ld	a,10000000b
	rlca
	djnz	$-1
	pop	hl
	pop	bc
	ret
;
;
	zsm
zsma:	defb	0
 endif
;
;
;
