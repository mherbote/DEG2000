;           PN      S165
            TITLE   '*** Betriebssystem  DEG2000 ***'
            PAGE
;****************************************************************
;*               S  Y  S  T  E  M   ----   D  E  G  2  0  0  0  *
;*  Version      -----------------------------------------------*
;*               Programmierer: M. Herbote --- K EAW  ZFT (WFT) *
;*  V 2 . 1      -----------------------------------------------*
;*               Stand        : 15.Maerz 1985                   *
;****************************************************************

S0.ENTRY:   DW      S0.DEG2
            DB      'V2.1/150385     '

;****************************************************************
;*               System - Verstaendigungsbereich                *
;****************************************************************
S1.TA       EQU     $                   ;1. Tastaturroutine
            JP      TA.TA1              ;   Einlesen U/INT
            JP      TA.TA2              ;   Einlesen Tastaturcode
            JP      TA.LOE              ;   loeschen aller Tast.rout.adr.
            JP      TA.LOES             ;   wie TA.LOE und Standardbel.
            JP      TA.ABFR             ;   Bereitstellen Tastaturcode
                                        ;   und Abarbeitung Tastaturroutine
            JP      TA.TFE              ;   Warteschleife bis Tastenende

S1.MO       EQU     $                   ;2. Monitorroutine
            JP      MO.MONI             ;   Eintrittspunkt Monitorroutine
            JP      S0.BWSUZ            ;   einzelnes Zeichen auf BWS
            JP      S0.BWSUS            ;   gesamten  BWSA    auf BWS

S1.SM       EQU     $                   ;3. Druckerroutine
            JP      SM.MRES             ;   Initialisierung Drucker
            JP      SM.PRIO             ;   Zeichenausgabe  Drucker

S1.LA       EQU     $                   ;4. allgemeine Adressen
            JP      S1.OPEN
            JP      S1.CLOS
            JP      S1.LESV
            JP      S1.LESR
            JP      S1.SCHR

            PAGE
;****************************************************************
;*               R S T 3 8 -  /  N M I -  Eintrittsadresse      *
;****************************************************************
S1.RST38    EQU     $
S1.NMI:     LD      (S2.DDSP),SP        ;CPU - Zustand retten
            LD      (TS.STACK),SP
            LD      SP,S2.STACK
            PUSH    AF
            PUSH    HL
            PUSH    DE
            PUSH    BC
            EX      AF,AF'              ;'
            EXX
            PUSH    AF
            PUSH    HL
            PUSH    DE
            PUSH    BC
            PUSH    IY
            PUSH    IX
            LD      A,I
            LD      (S2.DDI),A
            LD      SP,(S2.DDSP)
            POP     HL
            PUSH    HL
            LD      (S2.DDPC),HL
            LD      A,S0.PTAST          ;Tastaturinitialisierung
            LD      (TS.PTAST),A
            CALL    TA.PIOPR
            CALL    TA.E0IN
            LD      HL,S2.DDEI
            LD      (S2.DMANF),HL
S1.RST:     LD      HL,S1.INIT6
            PUSH    HL
            LD      HL,S1.DB0
            PUSH    HL
            RETN
;****************************************************************
;*               Eintrittsadresse   D E G 2                     *
;****************************************************************
S1.RES1:    LD      A,0C3H
            LD      (00000H),A
            LD      (00038H),A
            LD      (00066H),A
            LD      HL,S1.RES
            LD      (00001H),HL
            LD      HL,S1.RST38
            LD      (00039H),HL
            LD      HL,S1.NMI
            LD      (00067H),HL
            XOR     A
            LD      (S0.DEAT),A

            LD      HL,S0.BWSB
            LD      DE,S2.STACK
            LD      BC,S0.BASCL-S0.BWSB
            LDIR

            PAGE
;****************************************************************
;*              R E S E T -  Eintrittsadresse                   *
;****************************************************************
S1.RES:     DI
            IM      2
;****************************************************************
;*                Anfangswertzuweisung von System - Variablen   *
;****************************************************************
            LD      SP,S0.STACK+2
            LD      HL,S1.SYSTB
            PUSH    HL
            LD      (TS.STACK),SP
            LD      HL,S0.BWSA
            LD      (MS.BWSA),HL
            LD      HL,S0.TPA
            LD      (S2.TPA),HL
            LD      HL,S0.TPE
            LD      (S2.TPE),HL
            XOR     A
            LD      (S2.IOC),A
            DEC     A
            LD      (MS.DIRES),A
;****************************************************************
;*            Initialisierung der PIO-s auf der AKB             *
;*            und Initialisierung der Tastatur                  *
;****************************************************************
            LD      A,S0.PTAST
            LD      (TS.PTAST),A
            CALL    TA.PIOPR
            CALL    TA.E0IN

            LD      IX,S3.KS1-S3.SEAT   ;Initialisierung KMBG
            LD      DE,S0.DEAT+3
            ADD     IX,DE
            LD      (IX+2),S0.AKB
            CALL    S0.KRZU
;            CALL    0    ;???        KR.INIT
            CALL    S0.BWSAB
            LD      HL,S0.PFFA
            PUSH    HL
            POP     DE
            CALL    K1.FU
;****************************************************************
;*              Bild loeschen                                   *
;****************************************************************
            XOR     A                   ;ZANZ=  , SPANZ=   laut Modul S0.
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      HL,MS.CMD           ;ZMIN=SMIN=1 , ZMAX=ZANZ , SMAX=SPANZ
            INC     (HL)
            CALL    MO.MONI
            LD      A,4                 ;gesamtes Bild loeschen
            LD      (MS.CMD),A
            CALL    MO.MONI

            PAGE
;****************************************************************
;*               Aufbau des Systemgrundbildes                   *
;****************************************************************
S1.SYSTB:   LD      A,HIGH(S0.IV)
            LD      I,A
            LD      SP,S0.STACK
            LD      (TS.STACK),SP
            LD      HL,S0.BWSA
            LD      (MS.BWSA),HL
            LD      A,11000000B
            LD      (MS.DIREL),A
            LD      (MS.DIRES),A
            LD      HL,S0.BWSB
            LD      DE,S2.STACK
            LD      BC,S0.BASCL-S0.BWSB
            LDIR

            XOR     A                   ;ZANZ,SPANZ belegen
            LD      (MS.CMD),A
            CALL    MO.MONI

            LD      A,2                 ;ZMIN=SMIN=1 , ZMAX=ZANZ , SMAX=SPANZ
            LD      (MS.CMD),A
            CALL    MO.MONI

            LD      A,5                 ;Bildfenster loeschen
            LD      (MS.CMD),A
            CALL    MO.MONI

            CALL    S1.ANZEI            ;Anzeige: DEG 2000
            DW      00F00H              ;ZPOS=0  , SPOS=15
            DB      8                   ;Textlaenge
            DB      'DEG 2000'
            DB      0

            CALL    S1.ANZEI            ;Anzeige: Betriebssystem
            DW      01F00H              ;ZPOS=0  , SPOS=31
            DB      14                  ;Textlaenge
            DB      'Betriebssystem'
            DB      0

            CALL    S1.ANZEI            ;Anzeige: Version i.ii/i
            DW      00F01H              ;ZPOS=1  , SPOS=15
            DB      14
            DB      'Version '
            DB      S0.V1
            DB      '.'
            DB      S0.V2
            DB      S0.V3
            DB      '/'
            DB      S0.V7
            DB      0

            CALL    S1.STAT
            CALL    S1.DAT              ;Datum anzeigen

            JP      S1.SYSTC            ;ueberspringen des UPs  DAT

            PAGE
;****************************************************************
;*                              Anzeige: Datum:                 *
;****************************************************************
S1.DAT:     CALL    S1.ANZEI            ;Anzeige: Datum:
            DW      00F02H              ;ZPOS=2  , SPOS=15
            DB      8
            DB      'Datum:  '
            DB      0

            LD      A,24                ;Anzeige des Datums
            LD      (MS.CMD),A
            LD      B,2
            LD      HL,S3.DATUM-S3.SEAT
            LD      DE,S0.DEAT
            ADD     HL,DE
            CALL    MO.MONI
            LD      A,20
            LD      (MS.CMD),A
            LD      A,'.'
            LD      (MS.TK),A
            CALL    MO.MONI
            LD      A,24
            LD      (MS.CMD),A
            LD      B,2
            LD      HL,S3.DATUM-S3.SEAT
            LD      DE,S0.DEAT+2
            ADD     HL,DE
            CALL    MO.MONI
            LD      A,20
            LD      (MS.CMD),A
            LD      A,'.'
            LD      (MS.TK),A
            CALL    MO.MONI
            LD      A,24
            LD      (MS.CMD),A
            LD      B,2
            LD      HL,S3.DATUM-S3.SEAT
            LD      DE,S0.DEAT+4
            ADD     HL,DE
            CALL    MO.MONI

;                               Anzeige: :
            LD      L,S0.SYSZ-1         ;ZPOS=SYSZ , SPOS=0
            LD      H,0
            LD      (MS.ZPOS),HL
            LD      A,20
            LD      (MS.CMD),A
            LD      A,':'
            LD      (MS.TK),A
            CALL    MO.MONI

            LD      A,21                ;SPOS=SPOS+1
            LD      (MS.CMD),A
            CALL    MO.MONI
            RET

            PAGE
;****************************************************************
;*                Anfangswertzuweisung von System - Variablen   *
;****************************************************************
S1.SYSTC:   LD      HL,S0.SKADR
            LD      (K2.SKADR),HL

            LD      HL,S0.FKADR
            LD      (K2.FKADR),HL

            LD      HL,S1.SYSTB
            LD      (K2.FRADR),HL

            LD      HL,S0.LRECL         ;physische Blocklaenge Kassette
            LD      (K2.LRECL),HL

            LD      A,S0.ZEIT1
            LD      (TS.ZEIT1),A

            LD      A,S0.ZEIT2
            LD      (TS.ZEIT2),A

;****************************************************************
;*               Tastaturaktivierung                            *
;****************************************************************
            CALL    TA.LOES             ;loeschen aller Tast.r.adr.

            LD      HL,0                ;D0.DD            ;Routine  Debug ;!!!
            LD      (TS.TAB2+2),HL
            LD      HL,S0.DEG1          ;Routine  ABS
            LD      (TS.TAB3+10),HL
            LD      HL,S1.START         ;Routine  POS_QUIT  und  ET1
            LD      (TS.TAB4),HL
            LD      (TS.NEWL),HL
            LD      A,10101110B         ;Sperrinitialisierung
            LD      (TS.SPMER),A

            PAGE
;****************************************************************
;*               Abfrage nach Ausgangszustand des Geraetes      *
;****************************************************************
S1.SYSTD:   LD      IX,S3.MASK1-S3.SEAT
            LD      DE,S0.DEAT
            ADD     IX,DE
            LD      A,(IX+0)
            XOR     0AAH                ;M1='10101010' ?
            JR      NZ,S1.INITE
            LD      A,(IX+1)
            XOR     055H                ;M2='01010101' ?
            JR      NZ,S1.INITE
            LD      A,(IX+2)
            XOR     0FFH                ;M3='11111111' ?
            JR      NZ,S1.INITE
            LD      A,(IX+3)
            XOR     000H                ;M4='00000000' ?
            JR      NZ,S1.INITE
            JR      S1.INIT5
;****************************************************************
;*               Ausgangszustand des Geraetes                   *
;****************************************************************
S1.INITE:   LD      HL,S3.SEAT          ;EA dyn := EA eprom
            LD      DE,S0.DEAT
            LD      BC,1024
            LDIR
            CALL    S1.DAT

            CALL    S1.ANZEI            ;Aufforderung zur Datumseingabe
            DB      S0.SYSZ-1           ;ZPOS=SYSZ
            DB      2                   ;SPOS=3
            DB      5
            DB      'DATE '
            DB      0                   ;Eingabelaenge

            LD      L,S0.SYSZ           ;ZMIN=SYSZ , SMIN=8
            LD      H,8
            LD      (MS.ZMIN),HL
            LD      H,13                ;ZMAX=SYSZ , SMAX=13
            LD      (MS.ZMAX),HL
            JR      S1.INIT6
;****************************************************************
;*               Cursor setzen und Eintritt in die              *
;*               Tastatur - Abfrageschleife                     *
;****************************************************************
S1.INIT5:   LD      A,3                 ;ZMIN=ZMAX=SYSZ , SMIN=3 , SMAX=16
            LD      (MS.CMD),A
            CALL    MO.MONI
S1.INIT6:   LD      A,6                 ;Cursor setzen
            LD      (MS.CMD),A
            CALL    MO.MONI
;****************************************************************
;*            Tastaturabfrageschleife                           *
;****************************************************************
S1.TFE:     CALL    TA.TFE              ;Warten auf Tastenende
S1.ABFR:    LD      SP,(TS.STACK)       ;Kellerzeiger zuruecksetzen
            CALL    TA.ABFR             ;Tastaturabfrage
            JR      S1.ABFR

            TITLE   'Tastenroutinen'
            PAGE
;****************************************************************
;*               Tastenroutine -   ==>                          *
;****************************************************************
S1.CNRS:    LD      A,(MS.DIRES)
            PUSH    AF
            RES     0,A
            RES     1,A
            RES     2,A
S1.CURS1:   LD      (MS.DIRES),A
            LD      A,21
            LD      (MS.CMD),A
            CALL    MO.MONI
            POP     AF
            LD      (MS.DIRES),A
            LD      A,1
            LD      (TS.ZSMER),A
            RET
;****************************************************************
;*               Tastenroutine -  <==                           *
;****************************************************************
S1.CNLS:    LD      A,(MS.DIRES)
            PUSH    AF
            RES     0,A
            RES     1,A
            SET     2,A
            JR      S1.CURS1
;****************************************************************
;*               Tastenroutine -  runter                        *
;****************************************************************
S1.CNUS:    LD      A,(MS.DIRES)
            PUSH    AF
            RES     0,A
            SET     1,A
            SET     2,A
            JR      S1.CURS1
;****************************************************************
;*               Tastenroutine -  hoch                          *
;****************************************************************
S1.CNOS:    LD      A,(MS.DIRES)
            PUSH    AF
            RES     0,A
            SET     1,A
            RES     2,A
            JR      S1.CURS1
;****************************************************************
;*               Tastenroutine -  HOME-Funktion                 *
;****************************************************************
S1.HOME:    LD      A,22
S1.CURS2:   LD      (MS.CMD),A
            CALL    MO.MONI
            RET
;****************************************************************
;*               Tastenroutine -  naechste Zeile Anfang         *
;****************************************************************
S1.CNZA:    LD      A,23
            JR      S1.CURS2

            PAGE
;****************************************************************
;*               Tastenroutine - DEL LINE                       *
;****************************************************************
S1.DELZL:   LD      A,13
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      A,10
            LD      (MS.CMD),A
            CALL    MO.MONI
            CALL    S1.SZAHL
S1.DEL2:    LD      B,A
            LD      A,' '
            LD      (MS.TK),A
            LD      A,20
            LD      (MS.CMD),A
S1.DEL1:    CALL    MO.MONI
            DJNZ    S1.DEL1
            RET
;****************************************************************
;*               Tastenroutine - Alphazeichen                   *
;****************************************************************
S1.AEIN:    LD      (MS.TK),A
            LD      A,20
            LD      (MS.CMD),A
            CALL    MO.MONI
            RET
;****************************************************************
;*               Tastenroutine - Taste 00  ,  Taste 000         *
;****************************************************************
S1.NN:      LD      A,'0'
            LD      (MS.TK),A
            LD      A,20
            LD      (MS.CMD),A
S1.NN1:     CALL    MO.MONI
            CALL    MO.MONI
            RET

S1.NNN:     LD      A,'0'
            LD      (MS.TK),A
            LD      A,20
            LD      (MS.CMD),A
            CALL    MO.MONI
            JR      S1.NN1
;****************************************************************
;*               Tastenroutine - Hart COPY                      *
;****************************************************************
S1.HCOPY:   LD      B,S0.ZANZ-2         ;ZANZ-2  auszugebende Zeilen
            LD      HL,(MS.BWSA)
S1.HC1:     PUSH    BC                  ;Zyklus ueber ZANZ-2  Zeilen
            LD      A,(MS.SPANZ)        ;Spaltenanzahl laden
            LD      B,A
S1.HC2:     LD      A,(HL)              ;Zyklus ueber eine Zeile
            LD      C,A                 ;auszugebendes Zeichen laden
            INC     HL
            CALL    SM.PRIO             ;ein Zeichen ausgeben
            DJNZ    S1.HC2              ;naechstes Zeichen
            LD      C,1EH               ;Zeilenende ausgeben
            CALL    SM.PRIO
            POP     BC
            DJNZ    S1.HC1              ;naechste  Zeile
            RET

            PAGE
;****************************************************************
;*               Tastenroutine - Starttaste (POS QUIT)          *
;****************************************************************
S1.START:   LD      A,12                ;HL:=SZA
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      A,30                ;ZPOL,SPOL:=HL
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      A,40                ;Zeichen vom BWS lesen
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      A,(MS.TK)
            CP      ':'
            RET     NZ
            CALL    S1.SZEI
            RET     Z
            DEC     HL
            EX      DE,HL
S1.SUCHE:   LD      HL,0
            PUSH    HL
            PUSH    HL
S1.SUCH2:   POP     BC
            POP     HL
            PUSH    DE
S1.SUCH1:   LD      A,L
            LD      E,H
            CPI
            JP      PO,S1.SYSTB
            JR      NZ,S1.SUCH1
            LD      A,E
            CP      (HL)
            JR      NZ,S1.SUCH1
            POP     DE
            PUSH    HL
            PUSH    BC
            LD      B,4                 ;Programmanfang suchen
            INC     HL
            CALL    S1.VERGL
            JR      NZ,S1.SUCH2
            POP     BC
            POP     DE
            LD      A,2                 ;ZMIN=SMIN=1 , ZMAX=ZANZ-2 , SMAX=SPANZ
            LD      (MS.CMD),A
            CALL    MO.MONI
            EI
            JP      (HL)

            TITLE   'Unterprogramme'
            PAGE
;****************************************************************
;*               Unterprogramm zur Bedienerkommunikation        *
;*               -----------------------------------------------*
;*  CALL ANZEI   Aufruf des Unterprogrammes                     *
;*  DB   zpos    zpos    ...   Zeilenpos. -1 fuer Kommunikation *
;*  DB   spos    spos    ...   Spaltenpos.-1 fuer Kommunikation *
;*  DB   alae    alae    ...   Laenge des Anzeigetextes         *
;*                             bit 7=0   es folgt atext         *
;*                                 7=1   es folgt adr(atext)    *
;*                             bit 6=0   bit 5...0 Textlaenge   *
;*                                 alae=0 keine Textanzeige, es *
;*                                 entfaellt der Parameter atext*
;*                                 6=1   Text mit Endekenng. -1 *
;*                                                              *
;*  DB   atext   atext   ...   Anzeigetext  bzw.                *
;*  DA   adr(atext)      ...   Adresse des Anzeigetextes        *
;*                                                              *
;*  DB   elae    elae    ...   Eingabebereichslaenge            *
;*                             bei elae=0 keine Eingabe,        *
;*                             es entfallen die nachf. Param.   *
;*  DB   spmer   spmer   ...   Wert fuer  TS.SPMER              *
;*  DA   nquit   nquit   ...   Routinenadr. fuer  NEG QUIT      *
;*  DA   pquit   pquit   ...   Routinenadr. fuer  POS QUIT      *
;*  DA   aein    aein    ...   Routinenadr. fuer  Alphnum-Tasten*
;*               -----------------------------------------------*
;*               wenn elae=0 , dann Programmfortsetzung beim    *
;*                             naechsten Befehl nach  elae      *
;*               wenn elae>0 , dann Programmfortsetzung bei der *
;*                             Tastaturabfrageschleife          *
;*               -----------------------------------------------*
;*               in  HL  wird die Adresse des Eingabebereiches  *
;*               und in  BC  die Bereichslaenge uebergeben      *
;****************************************************************
S1.ANZEI:   EX      (SP),IY             ;IY ==> Keller , Paradr ==> IY
            PUSH    IX                  ;Register retten
            PUSH    AF
            PUSH    DE
            LD      A,1                 ;def. gesamtes Bild als Fenster
            LD      (MS.CMD),A
            CALL    MO.MONI
            INC     IY                  ;IY auf  atext  positionieren
            INC     IY
            INC     IY
            PUSH    IY
            LD      L,(IY-3)            ;ZPOS
            LD      H,(IY-2)            ;SPOS
            LD      (MS.ZPOS),HL
            BIT     6,(IY-1)            ;Test, ob Laengenangabe
            JR      NZ,S1.ANZ6
            LD      A,(IY-1)            ;Laengenbyte
            AND     3FH
            JR      Z,S1.ANZ1           ;Anzeige ueberspringen
            LD      B,A
            LD      A,24
            LD      (MS.CMD),A
S1.ANZ6:    POP     HL                  ;Textadresse
            BIT     7,(IY-1)
            JR      Z,S1.ANZ3
            LD      L,(IY)
            LD      H,(IY+1)
S1.ANZ3:    INC     IY
            INC     IY
            PUSH    IY
            BIT     6,(IY-3)
            JR      NZ,S1.ANZ4
            CALL    MO.MONI
            BIT     7,(IY-3)
            JR      NZ,S1.ANZ1
            POP     IY
            PUSH    HL
            JR      S1.ANZ1

S1.ANZ4:    LD      A,20
            LD      (MS.CMD),A
S1.ANZ5:    LD      A,(HL)
            INC     HL
            CP      -1
            JR      Z,S1.ANZ1
            LD      (MS.TK),A
            PUSH    HL
            CALL    MO.MONI
            POP     HL
            JR      S1.ANZ5

S1.ANZ1:    POP     IY
            LD      A,11
            LD      (MS.CMD),A
            CALL    MO.MONI
            PUSH    HL
            LD      A,(IY)              ;Eingabelaenge
            LD      B,0
            LD      C,A
            PUSH    BC
            OR      A
            JR      Z,S1.ANZ2           ;keine Eingabe gefordert

            PAGE
            LD      HL,(MS.ZPOS)        ;ZMIN und SMIN ermitteln
            INC     H
            INC     L
            LD      (MS.ZMIN),HL
            LD      A,H                 ;ZMAX und SMAX ermitteln
            DEC     C
            ADD     A,C
            LD      H,A
            LD      (MS.ZMAX),HL
            CALL    TA.LOES
            LD      HL,(TS.STACK)
            PUSH    HL
            LD      L,(IY+2)            ;Routine  NEG QUIT
            LD      H,(IY+3)
            PUSH    HL
            LD      L,(IY+4)            ;Routine  POS QUIT
            LD      H,(IY+5)
            PUSH    HL
            LD      (TS.STACK),SP
            LD      HL,S1.ANZ7
            LD      (TS.TAB4),HL
            LD      HL,S1.ANZ8
            LD      (TS.TAB3+4),HL
            LD      L,(IY+6)            ;Routine  alphanum. Tasten
            LD      H,(IY+7)
            LD      (TS.EINA),HL
            LD      A,(IY+1)
            LD      (TS.SPMER),A
            LD      A,6                 ;Cursor setzen
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      HL,S1.TFE
            PUSH    HL
            RET                         ;zur Tastaturabfrageschleife


S1.ANZ2:    POP     BC                  ;Register herstellen
            POP     HL
            POP     DE
            POP     AF
            POP     IX
            INC     IY
            EX      (SP),IY
            RET                         ;Ruecksprung zum naechsten Befehl

S1.ANZ7:    POP     IY                  ;RET TA.MM   Rueckkehr POS_QUIT
            POP     IY                  ;RET ABFR
            POP     IY                  ;POS QUIT
            POP     HL                  ;NEG QUIT
S1.ANZ9:    DEC     IY
            POP     HL                  ;TS.STACK
            LD      (TS.STACK),HL
            JR      S1.ANZ2

S1.ANZ8:    POP     IY                  ;RET TA.MM   Rueckkehr NEG_QUIT
            POP     IY                  ;RET ABFR
            POP     IY                  ;POS QUIT
            POP     IY                  ;NEG QUIT
            JR      S1.ANZ9

            PAGE
;****************************************************************
;*               Vergleich der Zeichenketten                    *
;****************************************************************
S1.VERGL:   PUSH    DE                  ;DE = gegebene  ZK
S1.VERG1:   LD      A,(DE)              ;B  = Laenge
            CP      (HL)                ;HL = vermutete ZK
            JR      NZ,S1.VERG2
            INC     DE
            INC     HL
            DJNZ    S1.VERG1
S1.VERG2:   POP     DE                  ;Z  = 1 : Kette gefunden B = 0
            RET                         ;HL = Kette + 1    DE := DE
;****************************************************************
;*               Zeichen suchen                                 *
;****************************************************************
S1.SZEI:    LD      A,(MS.SPANZ)
S1.SZEI1:   LD      B,A
            DEC     B
            LD      A,40
            LD      (MS.CMD),A
S1.SZEI2:   CALL    MO.MONI
            LD      A,(MS.TK)
            CP      ' '
            RET     NZ
            DJNZ    S1.SZEI2
            RET                         ;Z = 0 falls kein Zeichen
;****************************************************************
;*               Spalten- bzw. Zeilenanzahl berechnen           *
;****************************************************************
S1.SZAHL:   PUSH    HL
            LD      HL,(MS.SMIN)
S1.SZA1:    LD      A,(MS.SMAX)
            JR      S1.ZAHL
S1.ZZAHL:   PUSH    HL
            LD      HL,(MS.ZMIN)
S1.ZZA1:    LD      A,(MS.ZMAX)
S1.ZAHL:    SUB     L
            INC     A
            POP     HL
            RET                         ;A = Zeilen- bzw. Spaltenanzahl
;
S1.IO:      EI
            RETI

;****************************************************************
;*              Anzeige eines Fehlertextes bei S0.FKADR und     *
;*              Sprung zur Systemgrundanzeige                   *
;*              HL  Adresse des Fehlertextes (38 Byte)          *
;****************************************************************
S1.FEH:     CALL    S1.FEH1
            JP      S1.SYSTB

            PAGE
;****************************************************************
;*               Anzeige eines Fehlertextes bei S0.FKADR und    *
;*          bei  FEHRR und POS/NEG QUIT       Ruecksprung       *
;*          bei  FEHR  und NEG QUIT           Sprung zum System *
;*          bei  FEHR  und POS QUIT           Ruecksprung       *
;*               HL  Adresse des Fehlertextes (38 Byte)         *
;*               DE  Tastenroutinenadresse  POS QUIT            *
;*               BC  Tastenroutinenadresse  NEG QUIT  nur FEHRR *
;****************************************************************
S1.FEHR:    LD      BC,S1.SYSTB
S1.FEHRR:   PUSH    BC
            PUSH    DE
            CALL    S1.FEH1
            CALL    TA.LOE
            POP     HL
            LD      (TS.TAB4),HL
            POP     HL
            LD      (TS.TAB3+4),HL
            LD      A,10000000B
            LD      (TS.SPMER),A
            LD      HL,S1.TFE
            PUSH    HL
            RET

S1.FEH1:    PUSH    HL
            XOR     A
            LD      (TS.MIO),A
            CALL    K1.MVS
            POP     HL
            LD      DE,(K2.FKADR)
            DEC     D
            DEC     E
            LD      (MS.ZPOS),DE
            LD      A,24
            LD      (MS.CMD),A
            LD      B,38
            CALL    MO.MONI
            CALL    K1.MVL
            RET
;****************************************************************
;*               Unterprogramm bestimmt Parameter nach          *
;*               Befehlsname                                    *
;*               D             = Parameter binaer               *
;*               DM1 ... DM1+8 = Parameter hexadezimal          *
;****************************************************************
S1.INPTR:   LD      H,7
            LD      L,S0.SYSZ-1
            LD      (MS.ZPOL),HL
            LD      B,9
            LD      HL,S2.DM1
            LD      A,44
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      HL,S2.DM1
            CALL    S1.HBKON
            LD      D,A
            RET

            PAGE
;****************************************************************
;*               Konvertierung Binaerwert in  HL                *
;*               ==> ISO - Dezimalwert ab  (DE)                 *
;****************************************************************
S1.HDI:     LD      BC,10000
            CALL    S1.HDI1
            LD      BC,1000
            CALL    S1.HDI1
            LD      BC,100
            CALL    S1.HDI1
            LD      BC,10
            CALL    S1.HDI1
            LD      A,L
            OR      30H
            LD      (DE),A
            INC     DE
            RET
S1.HDI1:    CALL    S1.DIV
            OR      30H
            CP      30H
            JR      NZ,S1.HDI3
            LD      B,A
            DEC     DE
            LD      A,(DE)
            INC     DE
            CP      ':'
            JR      NC,S1.HDI2
            CP      '0'
            JR      C,S1.HDI2
            LD      A,B
S1.HDI3:    LD      (DE),A
            INC     DE
            RET
S1.HDI2:    LD      A,' '
            JR      S1.HDI3
;****************************************************************
;*               Division HL/BC                                 *
;****************************************************************
S1.DIV:     XOR     A
S1.DIV1:    SBC     HL,BC
            INC     A
            JR      NC,S1.DIV1
            ADD     HL,BC
            DEC     A                   ;A:=HL/BC  HL:=Rest
            RET

            PAGE
;****************************************************************
;*               Konvertierung ISO - Dezimalwert ab  (DE)       *
;*               ==>  Binaerwert in  HL                         *
;*               Zahl < 10000                                   *
;****************************************************************
S1.IDH:     LD      C,6
            CALL    S1.IDH1
            RET     C                   ;CY = 1 Fehler: keine Zahl ab (DE)
            LD      H,0
S1.IDH2:    LD      L,A
            INC     DE
            DEC     C
            RET     Z                   ;Z  = 1 Fehler: Stellenzahl > 5
S1.IDH3:    CALL    S1.IDH1
            JR      C,S1.IDHE           ;CY = 1 wenn Zahl zu Ende
            CALL    S1.MUL10
            JR      C,S1.IDHF           ;CY = 1 wenn Zahl > FFFFH
            ADD     A,L
            JR      NC,S1.IDH2
            INC     H
            JR      S1.IDH2
S1.IDHF:    XOR     A
            RET                         ;Z  = 1 Fehler: Zahl > FFFFH
S1.IDHE:    LD      A,1
            OR      A
            RET                         ;Z  = CY = 0  kein Fehler
S1.IDH1:    LD      A,(DE)
            CALL    S1.SIEBD
            RET     C
            AND     0FH
            RET
;****************************************************************
;*               Test: ISO - Zeichen = Ziffer ?                 *
;****************************************************************
S1.SIEBD:   CP      '0'
            RET     C
            CP      ':'
            CCF
            RET                         ;CY = 1 wenn A keine Dez.Ziffer
;****************************************************************
;*               Multiplikation  HL * 10                        *
;****************************************************************
S1.MUL10:   PUSH    DE
            PUSH    HL
            POP     DE
            ADD     HL,HL
            ADD     HL,HL
            ADD     HL,DE
            ADD     HL,HL
            POP     DE
            RET                         ;HL := HL * 10

            PAGE
;****************************************************************
;*               Hexadezimal - Binaer - Konvertierung           *
;*               HL = Anfangsadresse des Hexazeichens           *
;*               A  = Binaerzeichen                             *
;****************************************************************
S1.HBKON:   PUSH    BC
            LD      B,0
            LD      A,(HL)              ;1.Zeichen
            INC     HL
            CALL    S1.KON1
            JR      C,S1.HBK1
            RL      B
            RL      B
            RL      B
            RL      B
            LD      A,(HL)              ;2.Zeichen
            INC     HL
            CALL    S1.KON1
            JR      C,S1.HBK1
            LD      A,B
S1.HBK1:    POP     BC
            RET
S1.KON1:    SUB     30H                 ;Test , ob Hexazeichen
            RET     C                   ;kein Hexzeichen
            CP      10
            JR      C,S1.KON3           ;Hexzeichen  0 ... 9
            CP      17H
            CCF
            RET     C                   ;kein Hexzeichen
            CP      11H
            RET     C                   ;kein Hexzeichen
            AND     0FH                 ;Hexzeichen  A ... F
            ADD     A,9
S1.KON3:    OR      B
            LD      B,A
            SCF                         ;CY = 0  Zeichen ist ein Hexazeichen
            CCF
            RET
;****************************************************************
;*               Konvertiere 8 Bit von Register A in ASCII      *
;*               Hexadezimal auf  (HL)                          *
;****************************************************************
S1.BHKON:   PUSH    AF                  ;rette A
            RRA
            RRA
            RRA
            RRA
            CALL    S1.KON2             ;konvertiere high order 4 Bits
            INC     HL
            POP     AF
            CALL    S1.KON2             ;konvertiere  low order 4 Bits
            INC     HL
            RET
S1.KON2:    AND     0FH                 ;Maske fuer   low order 4 Bits
            CP      10
            JR      C,S1.HB10
            ADD     A,7
S1.HB10:    ADD     A,30H
            LD      (HL),A
            RET

            PAGE
;****************************************************************
;*               Zeichen suchen                                 *
;*               (DE),(D+1),... = Suchbereich                   *
;*               B              = Laenge                        *
;****************************************************************
S1.SUZEI:   EX      DE,HL
            CALL    S1.SZEI2
            EX      DE,HL               ;A  = Zeichen , DE = Adresse
            RET                         ;Z  = 1 wenn kein Zeichen
;****************************************************************
;*               Zahl suchen                                    *
;*               (DE),(DE+1),... = Suchbereich                  *
;*               B               = Laenge                       *
;****************************************************************
S1.SUZA:    CALL    S1.SUZEI
            RET     Z                   ;Z  = 1 : kein Zeichen
S1.SUZA1:   CALL    S1.IDH
            RET     C                   ;Z  = 0 CY = 1 : falsche Zahl
            RET     NZ                  ;Z  = 0 CY = 0 : HL = Zahl
S1.SUZA3:   LD      A,1
            OR      A
            SCF
            RET                         ;Z  = 0 CY = 1 : falsche Zahl
;****************************************************************
;*               Zahl lesen und pruefen: A' < Zahl =< (IX+0)    *
;*               falls Bedingung erfuellt: L  = Zahl Z = CY = 0 *
;*               falls keine Zeichen     : Z  = 1               *
;*               falls falsche Zahl      : CY = 1               *
;****************************************************************
S1.LT1Z:    CALL    S1.SUZA
            RET     C
            RET     Z
            LD      A,H
            OR      A
            JR      NZ,S1.SUZA3
            LD      A,(IX+0)
            CP      L
            RET     C
            EX      AF,AF'              ;'
            CP      L
            CCF
            RET
S1.MX:      JP      (IX)
S1.RNR:     PUSH    HL                  ;Rechtsrotieren vor   (HL)
            POP     DE                  ;BC = Anzahl
            LD      A,(DE)
            DEC     HL
            LDDR
            LD      (DE),A
            RET
S1.RNL:     PUSH    HL                  ;Linksrotieren hinter (HL)
            POP     DE                  ;BC = Anzahl
            LD      A,(DE)
            INC     HL
            LDIR
            LD      (DE),A
            RET

            PAGE
;****************************************************************
;*               C R C - Kontrollsumme   berechnen              *
;*               -----------------------------------------------*
;*               Eingabe:  HL  ... Anfang des Bereiches         *
;*                         BC  ... Laenge des Bereiches         *
;*               Ausgabe:  DE  ... CRC-Summe ueber den Bereich  *
;****************************************************************
S1.CHK:     LD      DE,0FFFFH
S1.CHK1:    LD      A,(HL)
            XOR     D
            LD      D,A
            RRCA
            RRCA
            RRCA
            RRCA
            AND     00FH
            XOR     D
            LD      D,A
            RRCA
            RRCA
            RRCA
            PUSH    AF
            AND     01FH
            XOR     E
            LD      E,A
            POP     AF
            PUSH    AF
            RRCA
            AND     0F0H
            XOR     E
            LD      E,A
            POP     AF
            AND     0E0H
            XOR     D
            LD      D,E
            LD      E,A
            INC     HL
            DEC     BC
            LD      A,B
            OR      C
            JR      NZ,S1.CHK1
            RET

            PAGE
;****************************************************************
;*               Systemzustaende anzeigen                       *
;****************************************************************
S1.STAT:    CALL    MO.BWSE
            INC     HL
            CALL    MO.DESZ
            OR      A
            SBC     HL,DE
            SBC     HL,DE
            PUSH    HL
            EX      DE,HL
            LD      HL,S1.STT1
            LD      BC,27
            LDIR
            POP     HL
            CALL    MO.DESZ
            ADD     HL,DE
            EX      DE,HL
            LD      A,(S2.IOC)
            OR      A
            JR      Z,S1.STTT1
            LD      HL,S1.STT2
            JR      S1.STTT2
S1.STTT1:   LD      HL,S1.STT3
S1.STTT2:   LD      BC,7
            LDIR
            LD      A,(TS.KGMER)
            OR      A
            JR      Z,S1.STTT3
            LD      HL,S1.STT4
            JR      S1.STTT4
S1.STTT3:   LD      HL,S1.STT5
S1.STTT4:   LD      BC,7
            LDIR
            LD      A,(TS.UMERK)
            OR      A
            JR      Z,S1.STTT5
            LD      HL,S1.STT2
            JR      S1.STTT6
S1.STTT5:   LD      HL,S1.STT3
S1.STTT6:   LD      BC,7
            LDIR
            LD      HL,3
            ADD     HL,DE
            LD      A,(TS.EMERK)
            ADD     A,30H
            LD      (HL),A
            CALL    MO.BWSUS
            RET

S1.STT1:    DB      'IOC___TAS___INS MOD___EBENE'
S1.STT2:    DB      'EIN    '
S1.STT3:    DB      'AUS    '
S1.STT4:    DB      'S      '
S1.STT5:    DB      'P      '

            TITLE   'System-Kommandos'
            PAGE
;****************************************************************
;*               Kommandos  D A T E  ,  S T A S  ,  P T A S  ,  *
;*                          D I N I  ,  I O C E  ,  I O C A     *
;****************************************************************
            DW      $
            DB      'DATE'
            LD      H,7                 ;ZPOL=SYSZ , SPOL=7
            LD      L,S0.SYSZ-1
            LD      (MS.ZPOL),HL
            LD      HL,S3.DATUM-S3.SEAT
            LD      DE,S0.DEAT
            ADD     HL,DE
            LD      B,6
            LD      A,44
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      HL,(MS.BWSA)        ;Testen, ob Datum vorhanden
            LD      DE,10*80 + 7
            ADD     HL,DE
            LD      A,(HL)        
            CP      ' '
            JR      NZ,S1.DATE
                                        ;Kein Datum, dann akt. Datum holen
            PUSH    BC
            PUSH    DE
            LD      HL,S3.DATUM-S3.SEAT
            LD      DE,S0.DEAT
            ADD     HL,DE
            LD      BC,006FDH           ;actual Date ermitteln
            INIR
            POP     DE
            POP     BC
;
S1.DATE:    POP     HL
            POP     HL
            RET
;
;
            DW      $
            DB      'STAS'
            LD      A,1
S1.STAS1:   LD      (TS.KGMER),A
            JR      S1.DATE

            DW      $
            DB      'PTAS'
            XOR     A
            JR      S1.STAS1


            DW      $
            DB      'IOCE'
            LD      A,1
S1.IOCC:    LD      (S2.IOC),A
            JR      S1.DATE

            DW      $
            DB      'IOCA'
            XOR     A
            JR      S1.IOCC

            PAGE
            DW      $
            DB      'DINI'
            LD      IX,S3.PRIN-S3.SEAT
            LD      DE,S0.DEAT+3
            ADD     IX,DE
            LD      H,7                 ;ZPOL=SYSZ , SPOL=8
            LD      L,S0.SYSZ-1
            LD      (MS.ZPOL),HL
            LD      A,31                ;HL:=ZPOS,SPOS
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      A,(HL)              ;char per inch
            INC     HL
            CP      '0'
            JR      Z,S1.CPI10
            CP      '2'
            JR      NZ,S1.CPI
            SET     0,(IX+4)
            JR      S1.CPI
S1.CPI10:   RES     0,(IX+4)
S1.CPI:     LD      A,(HL)              ;line per inch
            INC     HL
            CP      '6'
            JR      Z,S1.LPI6
            CP      '8'
            JR      NZ,S1.LPI
            SET     1,(IX+4)
            JR      S1.LPI
S1.LPI6:    RES     1,(IX+4)
S1.LPI:     LD      A,(HL)              ;ohne/mit Nulldurchstreichung
            INC     HL
            CP      'O'
            JR      Z,S1.ONULL
            CP      'M'
            JR      NZ,S1.ONULL
            LD      A,-1
            JR      S1.NULL
S1.ONULL:   XOR     A
S1.NULL:    LD      (IX+12),A
            CALL    S1.SM
            JP      S1.DATE


            DW      $
            DB      'EXEC'
            CALL    S1.INPTR
            CALL    S1.HBKON
            LD      E,A
            PUSH    DE
            POP     HL
            JP      (HL)

            PAGE
;****************************************************************
;*              M E M O --- Anzeige von 16 x 16 Byte = 256 Byte *
;****************************************************************
            DW      $
            DB      'MEMO'
            CALL    S1.INPTR            ;Anfangsanzeigeadresse uebernehmen
            CALL    S1.HBKON
            LD      E,A
            LD      (S2.DMANF),DE
S1.DB0:     CALL    TA.LOES
            LD      HL,S1.ANZUM         ;Routine  ASCII- / Hex- Mode
            LD      (TS.TAB2),HL
            LD      HL,S1.NEGDB         ;Routine  blaettern zurueck
            LD      (TS.TAB3+4),HL
            LD      HL,S1.POSDB         ;Routine  blaettern vor
            LD      (TS.TAB4),HL
            LD      HL,S1.HCDB0         ;Hardcopyroutine
            LD      (TS.TAB3+8),HL
            LD      HL,S1.SYDB1         ;Routine  aktivieren Korrektur
            LD      (TS.TAB3+10),HL
            LD      HL,S1.EINDB         ;Routine  alphanum. Tasten
            LD      (TS.EINA),HL
S1.ANZUM:   CALL    S1.ANZU1
S1.DB1:     LD      BC,100H             ;Anzeigebild aufbauen
            LD      DE,200H
S1.DB111:   CALL    S1.MEAA
            LD      A,(TS.UMERK)        ;Bildfenster fuer Eingabe definieren
            OR      A
            JR      NZ,S1.DB12
S1.DB10:    LD      HL,00700H           ;ZPOS= 1 , SPOS= 8
S1.DB11:    LD      (MS.ZPOS),HL
            INC     H                   ;ZMIN= 1 , SPOS=..
            INC     L
            LD      (MS.ZMIN),HL
            JR      S1.DB13
S1.DB12:    LD      A,(MS.SPANZ)        ;A S C II
            CP      80
            JR      NZ,S1.DB10
            LD      HL,03B00H           ;ZPOS= 1 , SPOS=60
            JR      S1.DB11
S1.DB13:    LD      A,(TS.UMERK)
            OR      A
            JR      NZ,S1.DB14
            LD      HL,03910H           ;ZMAX=16 , SMAX=57
            JR      S1.DB16
S1.DB14:    LD      A,(MS.SPANZ)
            CP      80
            JR      NZ,S1.DB15
            LD      HL,04B10H           ;ZMAX=16 , SMAX=75
            JR      S1.DB16
S1.DB15:    LD      HL,02710H           ;ZMAX=16 , SMAX=39
S1.DB16:    LD      (MS.ZMAX),HL
            RET

            PAGE
S1.EINDB:   CALL    S1.AEIN
S1.DB9:     LD      HL,TS.ZSMER
            LD      (HL),1
            RET

S1.POSDB:   LD      HL,(S2.DMANF)       ;eine Anzeigeseite weiter
            LD      A,(TS.UMERK)
            OR      A
            LD      DE,100H
            JR      Z,S1.POS2
S1.POS1:    LD      A,(MS.SPANZ)
            CP      80
            JR      Z,S1.POS2
            LD      DE,200H
S1.POS2:    ADD     HL,DE
S1.DB2:     LD      (S2.DMANF),HL
            CALL    S1.DB9
            JR      S1.DB1

S1.NEGDB:   LD      HL,(S2.DMANF)
            LD      A,(TS.UMERK)
            OR      A
            LD      DE,100H
            JR      Z,S1.NEG2
S1.NEG1:    LD      A,(MS.SPANZ)
            CP      80
            JR      Z,S1.NEG2
            LD      DE,200H
S1.NEG2:    SBC     HL,DE
            JR      S1.DB2

S1.ANZU1:   LD      A,(TS.UMERK)
            OR      A
            JR      NZ,$+6
            LD      A,10101010B
            JR      $+4
            LD      A,11111111B
            LD      (TS.SPMER),A
            RET

S1.ANZU2:   PUSH    BC
            PUSH    BC
            CALL    S1.ANZU1
            POP     BC
            POP     DE
            JP      S1.DB111

            PAGE
;****************************************************************
;*               Abspeichern der Korrekturen                    *
;****************************************************************
S1.SYSDB:   LD      BC,100H             ;Anzahl anzuzeigender Byte
S1.SYDB2:   EXX
            LD      B,16                ;max. Anzahl Zeilen
            LD      HL,(MS.BWSA)        ;BWS      - Anfangsadresse
            LD      DE,7
            ADD     HL,DE
            LD      DE,(S2.DMANF)       ;Speicher - Anfangsadresse
S1.SDB1:    PUSH    BC
            PUSH    HL
            LD      A,(TS.UMERK)        ;INS_MOD ein/aus ?
            OR      A
            JR      NZ,S1.SDB5

            LD      B,4                 ;INS_MOD aus
S1.SDB2:    PUSH    BC
            LD      B,4
S1.SDB3:    CALL    S1.HBKON
            LD      (DE),A
            CALL    S1.INC1
            JR      Z,S1.SDB9           ;alle Byte uebernommen
            EXX
            DJNZ    S1.SDB3             ;naechstes Byte
            INC     HL
            POP     BC
            DJNZ    S1.SDB2             ;naechste  Vierergruppe
S1.SDB4:    LD      B,0                 ;BWS-Adresse erhoehen
            LD      A,(MS.SPANZ)
            LD      C,A
            POP     HL
            ADD     HL,BC
            POP     BC
            DJNZ    S1.SDB1                ;naechste  BWS-Zeile
            RET

S1.SDB5:    LD      A,(MS.SPANZ)        ;INS_MOD ein
            CP      80
            JR      NZ,S1.SDB6
            LD      BC,52
            ADD     HL,BC
            LD      B,16
            JR      S1.SDB7
S1.SDB6:    LD      B,32
S1.SDB7:    LD      A,(HL)
            CP      '.'
            JR      Z,S1.SDB8
            LD      (DE),A
S1.SDB8:    CALL    S1.INC1
            JR      Z,S1.SDB10          ;alle Byte uebernommen
            EXX
            DJNZ    S1.SDB7             ;naechstes Byte
            JR      S1.SDB4             ;naechste  Zeile

S1.SDB9:    POP     BC
S1.SDB10:   POP     HL
            POP     BC
            RET

S1.SYDB1:   CALL    S1.SYSDB
            JP      S1.DB1


;****************************************************************
;*            Aufbau des Speicheranzeigebildes                  *
;****************************************************************
S1.MEA:     LD      BC,100H
            LD      DE,200H
S1.MEAA:    LD      HL,(MS.BWSA)
            INC     HL
            PUSH    HL
            EXX
            LD      DE,(S2.DMANF)
            EXX
            LD      A,(MS.SPANZ)
            CP      80
            JR      NZ,S1.MEA5
            PUSH    BC                  ;BWS = 80 Spalten
            POP     DE
            EXX
S1.MEA11:   CALL    S1.HXN1             ;Puffer fuellen
            LD      B,16
S1.MEA12:   CALL    S1.MEAU2
S1.MEA13:   POP     HL
            PUSH    DE
            EX      DE,HL               ;Puffer ===> BWSA
            CALL    MO.BWSE
            INC     HL
            LD      BC,80
            LDIR
            EX      DE,HL
            POP     DE
            PUSH    HL
            EXX
            PUSH    BC                  ;Anzahl noch anzuzeigender Byte
            POP     DE
            LD      A,B
            OR      C
            JR      Z,S1.MEA14          ;alle Byte angezeigt
            EXX
            LD      A,(MS.SPANZ)        ;naechste Zeile aufbereiten
            CP      80
            JR      Z,S1.MEA11
            LD      A,(TS.UMERK)
            OR      A
            JR      Z,S1.MEA21
            JR      S1.MEA31

S1.MEA5:    LD      A,(TS.UMERK)        ;BWS < 80 Spalten
            OR      A
            JR      NZ,S1.MEA6
            PUSH    BC                  ;BWS < 80 Spalten, INS_MOD aus
            POP     DE
            EXX
S1.MEA21:   CALL    S1.HXN1
            JR      S1.MEA13

S1.MEA6:    PUSH    DE                  ;BWS < 80 Spalten, INS_MOD ein
            POP     BC
            EXX
S1.MEA31:   CALL    S1.PULOE
            LD      B,32
            JR      S1.MEA12

S1.MEA14:   POP     HL
            CALL    S0.BWSUS            ;BWSA ===> BWS
            RET

S1.HXN1:    CALL    MO.BWSE
            INC     HL
            PUSH    DE                  ;(S2.DMANF)
            CALL    S1.PULOE
            LD      A,D                 ;Zeilenadresse aufbereiten
            CALL    S1.BHKON
            LD      A,E
            CALL    S1.BHKON
            INC     HL
            INC     HL
            CALL    S1.MEAU1
            POP     DE                  ;(S2.DMANF)
            EXX
            PUSH    DE                  ;Anzahl Byte erneut bereitstellen
            POP     BC
            EXX
            RET

S1.PULOE:   PUSH    HL
            PUSH    DE
            PUSH    HL                  ;Puffer loeschen
            POP     DE
            INC     DE
            LD      BC,79
            LD      (HL),' '
            LDIR
            POP     DE                  ;(S2.DMANF)
            POP     HL                  ;Pufferanfangsadresse
            RET

            PAGE
;****************************************************************
;*               Hexadezimale Darstellung                       *
;****************************************************************
S1.MEAU1:   LD      B,4                 ;vier Vierergruppen aufbereiten
S1.MEA2:    PUSH    BC
            LD      B,4
S1.MEA3:    LD      A,(DE)              ;Vierergruppe
            CALL    S1.BHKON
            CALL    S1.INC1
            JR      Z,S1.MEA4
            EXX
            DJNZ    S1.MEA3             ;naechstes Byte
            INC     HL
            POP     BC
            DJNZ    S1.MEA2             ;naechste  Vierergruppe
            RET

S1.MEA32:   PUSH    BC
            LD      B,4
S1.MEA33:   INC     HL
            INC     HL
            INC     HL
            EXX
S1.MEA4:    EXX
            DJNZ    S1.MEA33
            INC     HL
            POP     BC                  ;Vierergruppenzaehler
            DJNZ    S1.MEA32
            RET
;****************************************************************
;*               A S C II - Darstellung                         *
;****************************************************************
S1.MEAU2:   LD      A,(DE)
            CP      ' '
            JR      C,S1.MEA7
            CP      '~'
            JR      C,S1.MEA9
S1.MEA7:    LD      A,'.'
S1.MEA9:    LD      (HL),A
            CALL    S1.INC1
            JR      Z,S1.MEA8
            EXX
            DJNZ    S1.MEAU2            ;naechstes Byte
            RET

S1.MEA8:    EXX
            RET


S1.INC1:    INC     HL
            INC     DE
            EXX
S1.INC2:    DEC     BC
            LD      A,B
            OR      C
            RET

            PAGE
;****************************************************************
;*               Hard-COPY - Routine fuer  M E M O              *
;****************************************************************
S1.HCDB0:   CALL    S1.HCDB
            JP      S1.POSDB            ;naechste Seite anzeigen

S1.HCDB:    PUSH    IX
            PUSH    IY
            LD      A,(TS.UMERK)
            OR      A
            JR      Z,S1.HCDB1
            XOR     A
            LD      (TS.UMERK),A
            CALL    S1.ANZUM
S1.HCDB1:   LD      IX,(S2.DMANF)       ;Anzeigeanfangsadresse
            LD      IY,(MS.BWSA)
            INC     IY
            LD      B,16                ;Anzahl Zeilen
S1.HCDB2:   PUSH    BC                  ;Zyklus ueber 16 Zeilen
            LD      B,58                ;Zeilenanfadr und Hex-Darstellung
S1.HCDB3:   LD      A,(IY)              ;uebernehmen
            INC     IY
            LD      C,A
            CALL    SM.PRIO             ;ein Zeichen drucken
            DJNZ    S1.HCDB3               ;naechstes Zeichen
            LD      B,16                ;ASCII-Darstellung uebernehmen
S1.HCDB4:   LD      A,(IX)
            INC     IX
            CP      7FH
            JR      NC,S1.HCDB5
            CP      ' '
            JR      NC,S1.HCDB6
S1.HCDB5:   LD      A,'.'
S1.HCDB6:   LD      C,A
            CALL    SM.PRIO             ;ASCII-Zeichen drucken
            DJNZ    S1.HCDB4            ;naechstes Zeichen
            LD      C,1EH               ;Zeilenende ausgeben
            CALL    SM.PRIO
            LD      B,22                ;IY korrigieren
S1.HCDB7:   INC     IY
            DJNZ    S1.HCDB7
            POP     BC
            DJNZ    S1.HCDB2               ;naechste Zeile
            LD      C,1EH               ;zwei Leerzeilen ausgeben
            CALL    SM.PRIO
            CALL    SM.PRIO
            POP     IY
            POP     IX
            RET

S1.OPEN     EQU     $
S1.CLOS     EQU     $
S1.LESV     EQU     $
S1.LESR     EQU     $
S1.SCHR     EQU     $
            RET

;           END
;           PN      S310
            TITLE   'Generierprogramm fuer die E-/A-Tabelle'
            PAGE
;****************************************************************
;*               Generierprogramm fuer die E-/A-Tabelle         *
;*  Version      -----------------------------------------------*
;*               Programmierer: M. Herbote --- K EAW  ZFT (WFT) *
;*  V 2 . 1      -----------------------------------------------*
;*               Stand        : 27.Januar 1984                  *
;****************************************************************


;****************************************************************
;*               Macro zu Erzeugung des Steuervektors nach      *
;*               ROBOTRON - MOS                                 *
;****************************************************************
S3.RMOS     MACRO   SB,FB,BA,SA,CMD,ENTRY,PUADR,PULAE,INF1,INF2
            DB      SB                  ;Statusbyte
            DB      FB                  ;Fehlerbyte
            DB      BA                  ;Basisadresse
            DB      SA                  ;Subadresse
            DB      CMD                 ;Kommando
            DW      ENTRY               ;Rueckehradresse
            DW      PUADR               ;Pufferadresse
            DB      HIGH(PULAE)         ;Pufferlaenge
            DB      LOW(PULAE)
            DB      INF1                ;Informationsbyte 1
            DB      INF2                ;Informationsbyte 2
            ENDM

;****************************************************************
;*               allgemeine Speicherplaetze der statischen      *
;*               E-/A-Tabelle                                   *
;****************************************************************
S3.SEAT     EQU     $
S3.MASK1:   DB      0AAH                ;Systemmaske 1
S3.MASK2:   DB      055H                ;Systemmaske 2
S3.MASK3:   DB      0FFH                ;Systemmaske 3
S3.MASK4:   DB      000H                ;Systemmaske 4

S3.DATUM:   DW      S0.D1               ;Stand des Systems
            DW      S0.D2
            DW      S0.D3

S3.PUFA:    DW      S0.PFFA             ;Adresse des Ausgabepuffers
S3.PUFI:    DW      S0.PFFI             ;Adresse des Eingabepuffers
S3.LANG:    DW      1024                ;Pufferlaenge

            DB      0
            DB      0
S3.STI:     DB      0

            TITLE   'Kanal - Tabellen'
            PAGE
;****************************************************************
;*               K a s s e t t e 1                              *
;****************************************************************
S3.KS1:     DB      S3.KS2-S3.KS1       ;Laengenbyte
            DB      11000000B           ;Typ - Kennsatz ja , SYS-Geraet
            DB      11000001B           ;Geraetebyte
            S3.RMOS 0,0,S0.AKB,1,0,0,S0.PFFI,100H,0,0
            DW      0                   ;OPEN
            DW      0                   ;CLOSE
            DW      0                   ;READ
            DW      0                   ;WRITE
            DW      0                   ;KONV
;****************************************************************
;*               K a s s e t t e 2                              *
;****************************************************************
S3.KS2:     DB      S3.DFU-S3.KS2       ;Laengenbyte
            DB      10000000B           ;Typ - Kennsatz ja
            DB      11000001B           ;Geraetebyte
            S3.RMOS 0,0,S0.AKB,2,0,0,S0.PFFI,100H,0,0
            DW      0                   ;OPEN
            DW      0                   ;CLOSE
            DW      0                   ;READ
            DW      0                   ;WRITE
            DW      0                   ;KONV

            PAGE
;****************************************************************
;*               D F U - Fernuebertragung                       *
;****************************************************************
S3.DFU:     DB      S3.LBL-S3.DFU       ;Laengenbyte
            DB      10000000B           ;Typ - Kennsatz ja
            DB      11000000B           ;Geraetebyte
            S3.RMOS 0,0,S0.V24,0,0,0,S0.PFFI,400H,0,0
            DW      0                   ;OPEN
            DW      0                   ;CLOSE
            DW      0                   ;READ
            DW      0                   ;WRITE
            DW      0                   ;KONV
;****************************************************************
;*               L B - L e s e r                                *
;****************************************************************
S3.LBL:     DB      S3.LBS-S3.LBL       ;Laengenbyte
            DB      00000000B           ;Typ - Kennsatz nein
            DB      01000000B           ;Geraetebyte
            S3.RMOS 0,0,S0.ADA,0,02H,0,S0.PFFI,400H,7FH,19H
            DW      0                   ;OPEN
            DW      0                   ;CLOSE
            DW      0                   ;READ
            DW      0                   ;KONV
;****************************************************************
;*               L B - S t a n z e r                            *
;****************************************************************
S3.LBS:     DB      S3.PRIN-S3.LBS      ;Laengenbyte
            DB      00000000B           ;Typ - Kennsatz nein
            DB      10000000B           ;Geraetebyte
            S3.RMOS 0,0,S0.ADA,0,0,0,S0.PFFA,400H,80H,19H
            DW      0                   ;OPEN
            DW      0                   ;CLOSE
            DW      0                   ;WRITE
            DW      0                   ;KONV
;****************************************************************
;*               P R I N - Drucker                              *
;****************************************************************
S3.PRIN:    DB      S3.ENDEA-S3.PRIN    ;Laengenbyte
            DB      00000000B           ;Typ - Kennsatz nein
            DB      10000001B           ;Geraetebyte
            S3.RMOS 0,0,S0.DRU,S0.IVSYS,0,0,S0.PFFA,400H,0,0
            DW      SM.MRES             ;OPEN
            DW      0                   ;CLOSE
            DW      SM.PRIO             ;WRITE
            DW      0                   ;KONV

S3.ENDEA:   DB      0                   ;Ende - Kanaltabellen

            PAGE
;****************************************************************
;*               K S K         Kennsatz-Section Kassette        *
;****************************************************************
S3.KSK1     EQU     $                   ;Kassettengeraet 1

S3.RCZ1     EQU     S3.KSK1             ;record counter
S3.BLK1     EQU     S3.RCZ1+2           ;block  counter
S3.MRP1     EQU     S3.BLK1+2           ;MRES - Parameterbereich



S3.KSK2     EQU     S3.MRP1+32          ;Kassettengeraet 2

S3.RCZ2     EQU     S3.KSK2             ;record counter
S3.BLK2     EQU     S3.RCZ2+2           ;block  counter
S3.MRP2     EQU     S3.BLK2+2           ;MRES - Parameterbereich


;           END
;           PN      MO26
            TITLE   'Monitorroutine'
            PAGE
;****************************************************************
;*               Monitorroutine                                 *
;*  Version      -----------------------------------------------*
;*               Programmierer: M. Herbote --- K EAW  ZFT (WFT) *
;*  V 2 . 1      -----------------------------------------------*
;*               Stand        : 05.April 1984                   *
;****************************************************************


;****************************************************************
;*                1.Aufteilung des Monitorbildes                *
;*                ------------------------------                *
;*   1         a       i   k         b                   m      *
;*   -----------------------------------------------------      *
;* 1 !A       !       SSA LSA         !                  !      *
;*   !                                                   !      *
;*   !- - - - ! - - - - - - - - - - - ! - - - - - - - - -!      *
;* c !         AF    SSAF LSAF                           !      *
;*   !        !                       !                  !      *
;*   !                                                   !      *
;* j !SZA     !SZAF    S              !                  !      *
;*   !                                                   !      *
;* l !LZA     !LZAF        L          !                  !      *
;*   !                                                   !      *
;*   !        !                       !                  !      *
;* d !                                                   !      *
;*   !- - - - ! - - - - - - - - - - - ! - - - - - - - - -!      *
;*   !                                                   !      *
;* n !        !                       !                  !      *
;*   -----------------------------------------------------      *
;*                                                              *
;*                2.Kommandos und ihre Bedeutung                *
;*                ------------------------------                *
;*    Schreibposition          !   Leseposition                 *
;*  ---------------------------!------------------------------  *
;*  = 10 ZPOS,SPOS:=HL         ! = 30 ZPOL,SPOL:=HL             *
;*  = 11 HL:=ZPOS,SPOS         ! = 31 HL:=ZPOL,SPOL             *
;*  = 12 HL:=SZA               ! = 32 HL:=LZA                   *
;*  = 13 HL:=SZAF              ! = 33 HL:=LZAF                  *
;*  = 14 HL:=SSA               ! = 34 HL:=LSA                   *
;*  = 15 HL:=SSAF              ! = 35 HL:=LSAF                  *
;*  = 20 Zeichen schreiben     ! = 40 Zeichen lesen             *
;*  = 21 akt. Position + 1     ! = 41 akt. Position + 1         *
;*  = 22 HOME-Fkt. Schreibpos. ! = 42 HOME-Fkt. Lesepos.        *
;*  = 23 n. Zeile Anf. "       ! = 43 n. Zeile Anf. "           *
;*  = 24 Vektor schreiben      ! = 44 Vektor lesen              *
;*                                                              *
;*                                                              *
;*                                                              *
;*                                                              *
;****************************************************************

            PAGE
;****************************************************************
;*  =  0 ZANZ:=24,SPANZ:=80                                     *
;*  =  1 ZMIN,SMIN:=1,ZMAX,SMAX:=ZANZ,SPANZ                     *
;*  =  2 ZMIN,SMIN:=1,ZMAX:=ZANZ-2,SMAX:=SPANZ                  *
;*  =  3 ZMIN,ZMAX:=SYSZ,SMIN:=3,SMAX:=16                       *
;*  =  4 gesamtes Bild loeschen                                 *
;*  =  5 Bildfenster   loeschen                                 *
;*  =  6 Cursor setzen                                          *
;*  =  7 Cursor loeschen                                        *
;*                                                              *
;*  = 50 HL:=AF                                                 *
;*  = 51 BC:=Laenge Bildspeicher                                *
;*  = 52 HL:=Ende   Bildspeicher                                *
;*  = 53 Bildfensterinhalt eine Zeile  nach oben                *
;*  = 54 Bildfensterinhalt eine Zeile  nach unten               *
;*  = 55 Bildfensterinhalt eine Spalte nach links               *
;*  = 56 Bildfensterinhalt eine Spalte nach unten               *
;*                                                              *
;*                3.Bedeutung von  DIRES  und  DIREL            *
;*                ----------------------------------            *
;*  Bit 7 = 0   Schreib-/Lese-position nicht weiter setzen      *
;*        = 1   Schreib-/Lese-position       weiter setzen      *
;*      6 = 0   Schreib-/Lese-position umlaufend auf Zeile      *
;*        = 1   Schreib-/Lese-position umlaufend im Bild        *
;*      5 = 0   Rollfunktion ausgeschaltet  (nur DIRES)         *
;*        = 1   Rollfunktion eingeschaltet  (nur DIRES)         *
;*      4 = 0   Bildfensterinhalt rollen    (nur DIRES)         *
;*        = 1   gesamte Zeile     rollen    (nur DIRES)         *
;*      3 = 0   mit  Umladen  BWSA ===> BWS                     *
;*        = 1   ohne Umladen  BWSA ===> BWS                     *
;*                                                              *
;*      2,1,0   geben die Richtung an , in welcher die          *
;*              Schreib-/Lese-position weitergesetzt werden     *
;*              soll                                            *
;*                            010                               *
;*                        (011) (001)                           *
;*                      100         000                         *
;*                        (101) (111)                           *
;*                            110                               *
;*                                                              *
;*                                                              *
;*                                                              *
;****************************************************************

            TITLE   'Eintritt in die Routine'
            PAGE
;****************************************************************
;*               Eintritt in die Monitorroutine und             *
;*               Verzweigen zu den einzelnen Kommandos          *
;****************************************************************
MO.MONI:    PUSH    IX
            PUSH    IY
            PUSH    AF
            PUSH    DE
            PUSH    BC
            LD      A,(MS.CMD)
            CP      57
            JR      NC,MO.ENMO
            PUSH    HL
            ADD     A,A
            LD      B,0
            LD      C,A
            LD      HL,MO.MOTAB
            ADD     HL,BC
            LD      A,(HL)
            INC     HL
            LD      H,(HL)
            LD      L,A
            PUSH    HL
            POP     IX
            POP     HL
            POP     BC
            PUSH    BC
            CALL    MO.MORT
MO.ENMO:    POP     BC
            POP     DE
            POP     AF
            POP     IY
            POP     IX
            RET
MO.MORT:    JP      (IX)
MO.ENMOT:   RET


MO.BWSUS:   LD      A,(MS.DIRES)
            BIT     3,A
            RET     NZ
            CALL    S0.BWSUS
            RET

MO.BWSUZ:   LD      A,(MS.DIRES)
            BIT     3,A
            RET     NZ
            CALL    S0.BWSUZ
            RET

            TITLE   'Tabelle der Routinenadressen'
            PAGE
;****************************************************************
;*               Tabelle mit den Adressen der Monitorroutinen   *
;****************************************************************
MO.MOTAB:   DW      MO.ANZ              ;CMD = 00
            DW      MO.VOLLB            ;    = 01
            DW      MO.VB2              ;    = 02
            DW      MO.SYSB             ;    = 03
            DW      MO.BILO             ;    = 04
            DW      MO.FSLO             ;    = 05
            DW      MO.SETC             ;    = 06
            DW      MO.RESC             ;    = 07
            DW      MO.ENMOT            ;    = 08
            DW      MO.ENMOT            ;    = 09
            DW      MO.LCPOS            ;    = 10
            DW      MO.CPOS             ;    = 11
            DW      MO.SZA              ;    = 12
            DW      MO.SZAF             ;    = 13
            DW      MO.SSA              ;    = 14
            DW      MO.SSAF             ;    = 15
            DW      MO.ENMOT            ;    = 16
            DW      MO.ENMOT            ;    = 17
            DW      MO.ENMOT            ;    = 18
            DW      MO.ENMOT            ;    = 19
            DW      MO.MZS              ;    = 20
            DW      MO.MPS              ;    = 21
            DW      MO.HOMES            ;    = 22
            DW      MO.CNZAS            ;    = 23
            DW      MO.MVS              ;    = 24
            DW      MO.ENMOT            ;    = 25
            DW      MO.ENMOT            ;    = 26
            DW      MO.ENMOT            ;    = 27
            DW      MO.ENMOT            ;    = 28
            DW      MO.ENMOT            ;    = 29
            DW      MO.LCPOL            ;    = 30
            DW      MO.CPOL             ;    = 31
            DW      MO.LZA              ;    = 32
            DW      MO.LZAF             ;    = 33
            DW      MO.LSA              ;    = 34
            DW      MO.LSAF             ;    = 35
            DW      MO.ENMOT            ;    = 36
            DW      MO.ENMOT            ;    = 37
            DW      MO.ENMOT            ;    = 38
            DW      MO.ENMOT            ;    = 39
            DW      MO.MZL              ;    = 40
            DW      MO.MPL              ;    = 41
            DW      MO.HOMEL            ;    = 42
            DW      MO.CNZAL            ;    = 43
            DW      MO.MVL              ;    = 44
            DW      MO.ENMOT            ;    = 45
            DW      MO.ENMOT            ;    = 46
            DW      MO.ENMOT            ;    = 47
            DW      MO.ENMOT            ;    = 48
            DW      MO.ENMOT            ;    = 49
            DW      MO.BWSAF            ;    = 50
            DW      MO.BWSL             ;    = 51
            DW      MO.BWSE             ;    = 52
            DW      MO.ROOB             ;    = 53
            DW      MO.ROUN             ;    = 54
            DW      MO.ROLI             ;    = 55
            DW      MO.RORE             ;    = 56

            TITLE   'Anfangswert UPs'
            PAGE
;****************************************************************
;*               belegen der Steuerwerte  SPANZ  und  ZANZ      *
;****************************************************************
MO.ANZ:     PUSH    HL
            LD      H,S0.SPANZ
            LD      L,S0.ZANZ
            LD      (MS.ZANZ),HL
            POP     HL
            RET
;****************************************************************
;*               volles Bild  ===> BWS - Format                 *
;****************************************************************
MO.VOLLB:   PUSH    HL
            LD      HL,0101H            ;SMIN=1        ZMIN=1
            LD      (MS.ZMIN),HL
            LD      HL,(MS.ZANZ)        ;SMAX=SPANZ    ZMAX=ZANZ
            LD      (MS.ZMAX),HL
            POP     HL
            RET

;****************************************************************
;*               volles Bild minus 2 Zeilen ===> BWS - Format   *
;****************************************************************
MO.VB2:     PUSH    HL
            LD      HL,0101H            ;SMIN=1        ZMIN=1
            LD      (MS.ZMIN),HL
            LD      HL,(MS.ZANZ)        ;SMAX=SPANZ    ZMAX=ZANZ-2
            DEC     L
            DEC     L
            LD      (MS.ZMAX),HL
            POP     HL
            RET

;****************************************************************
;*               Systemzeile   ===>  BWS - Format               *
;****************************************************************
MO.SYSB:    PUSH    HL
            LD      H,3                 ;SMIN=3
            LD      L,S0.SYSZ           ;ZMIN=SYSZ
            LD      (MS.ZMIN),HL
            LD      H,24                ;SMAX=24
            LD      (MS.ZMAX),HL
            POP     HL
            RET

            PAGE
;****************************************************************
;*               gesamtes Bild loeschen                         *
;****************************************************************
MO.BILO:    PUSH    HL
            LD      HL,(MS.BWSA)
            INC     HL
            EX      DE,HL
            LD      HL,(MS.BWSA)
            CALL    MO.BWSL
            DEC     BC
            LD      (HL),' '
            LDIR
            CALL    MO.BWSUS
            POP     HL
            RET
;****************************************************************
;*               Bildfenster loeschen                           *
;****************************************************************
MO.FSLO:    PUSH    HL
            LD      HL,(MS.ZMAX)
            LD      DE,(MS.ZMIN)
            XOR     A
            SBC     HL,DE
            LD      B,L
            INC     B
            PUSH    BC                  ;Anzahl Fensterzeilen
            LD      C,H
            PUSH    BC                  ;Anzahl Fensterspalten-1
            CALL    MO.BWSAF
            PUSH    HL
            LD      (HL),' '            ;erste Zeile loeschen
            INC     HL
            EX      DE,HL
            POP     HL
            PUSH    HL
            LD      B,0
            LDIR
MO.FSLO1:   POP     HL                  ;weitere Zeilen loeschen
            POP     DE
            POP     BC
            DEC     B
            JR      Z,MO.FSLO2
            PUSH    BC
            PUSH    DE
            LD      B,0
            LD      C,E
            INC     C
            PUSH    HL
            LD      A,(MS.SPANZ)
            LD      D,0
            LD      E,A
            ADD     HL,DE
            EX      DE,HL
            POP     HL
            PUSH    DE
            LDIR
            JR      MO.FSLO1
MO.FSLO2:   CALL    MO.BWSUS
            POP     HL
            RET
            TITLE   'Bildfensterinhalt rollen'
            PAGE
;****************************************************************
;*               Bildfensterinhalt um eine Zeile nach oben      *
;****************************************************************
MO.ROOB:    PUSH    HL
            CALL    MO.RORL1
            JR      Z,MO.ROOB2
            PUSH    AF
            CALL    MO.BWSAF            ;DE ermitteln
MO.ROOB1:   PUSH    HL
            CALL    MO.DESZ             ;HL ermitteln
            ADD     HL,DE
            POP     DE
            PUSH    DE
            CALL    MO.RORL5
            CALL    MO.DESZ
            POP     HL
            ADD     HL,DE
            POP     AF
            DEC     A
            PUSH    AF
            JR      NZ,MO.ROOB1
            POP     AF
MO.ROOB2:   CALL    MO.RORL7
            CALL    MO.BWSAF
            CALL    MO.PNSP
MO.ROOB3:   LD      (HL),' '
            PUSH    HL
            POP     DE
            INC     DE
            CALL    MO.RORL3
            JR      Z,MO.ROOB4
            CALL    MO.RORL6
MO.ROOB4:   JR      MO.FSLO2
;****************************************************************
;*               Bildfensterinhalt um eine Zeile nach unten     *
;****************************************************************
MO.ROUN:    PUSH    HL
            CALL    MO.RORL1
            JR      Z,MO.ROUN2
            PUSH    AF                  ;DE ermitteln
            CALL    MO.BWSAF
            CALL    MO.PNSP
MO.ROUN1:   PUSH    HL
            CALL    MO.DESZ             ;HL ermitteln
            OR      A
            SBC     HL,DE
            POP     DE
            PUSH    DE
            CALL    MO.RORL5
            CALL    MO.DESZ
            POP     HL
            OR      A
            SBC     HL,DE
            POP     AF
            DEC     A
            PUSH    AF
            JR      NZ,MO.ROUN1
            POP     AF
MO.ROUN2:   CALL    MO.BWSAF
            JR      MO.ROOB3

            PAGE
;****************************************************************
;*               Bildfensterinhalt um eine Spalte nach links    *
;****************************************************************
MO.ROLI:    PUSH    HL
            CALL    MO.RORL2
            EX      AF,AF'              ;'
            CALL    MO.BWSAF
MO.ROLI1:   PUSH    BC
            PUSH    HL
            PUSH    HL
            POP     DE
            INC     HL
            EX      AF,AF'              ;'
            OR      A
            JR      Z,MO.ROLI2
            CALL    MO.RORL6
MO.ROLI2:   POP     HL
            POP     BC
            CALL    MO.RORL4
            DJNZ    MO.ROLI1
MO.ROLI3:   JR      MO.ROOB4
;****************************************************************
;*               Bildfensterinhalt um eine Spalte nach rechts   *
;****************************************************************
MO.RORE:    PUSH    HL
            CALL    MO.RORL2
            CALL    MO.BWSAF
            LD      D,0
            LD      E,A
            EX      AF,AF'              ;'
            ADD     HL,DE
MO.RORE1:   PUSH    BC
            PUSH    HL
            PUSH    HL
            POP     DE
            DEC     HL
            EX      AF,AF'              ;'
            OR      A
            JR      Z,MO.RORE2
            LD      B,0
            LD      C,A
            LDDR
MO.RORE2:   POP     HL
            POP     BC
            CALL    MO.RORL4
            DJNZ    MO.RORE1
            JR      MO.ROLI3

            PAGE
MO.RORL1:   LD      IX,MS.ZMIN
MO.RORL7:   LD      A,(IX+2)
            SUB     (IX+0)
            RET

MO.RORL2:   CALL    MO.RORL1
            LD      B,A
            INC     B
MO.RORL3:   LD      A,(IX+3)
            SUB     (IX+1)
            RET

MO.RORL4:   EX      AF,AF'              ;'
            EX      DE,HL
            LD      (HL),' '
            LD      H,0
            LD      L,(IX+5)
            ADD     HL,DE
            RET

MO.RORL5:   CALL    MO.RORL3
            INC     A
MO.RORL6:   LD      B,0
            LD      C,A
            LDIR
            RET

            TITLE   'Cursor Operationen'
            PAGE
;****************************************************************
;*               Cursor setzen bzw. loeschen an der             *
;*               aktuellen Schreibposition                      *
;****************************************************************
MO.SETC:    PUSH    HL
            PUSH    BC
            PUSH    AF
            LD      A,(MS.SPOS)         ;X-Koordinate
            LD      (MO.SETC1+2),A
            LD      A,(MS.ZPOS)         ;Y-Koordinate
            LD      (MO.SETC1+3),A
            LD      HL,MO.SETC1         ;Emulator-Routine ansprechen
            LD      BC,00540H
            OTIR
            POP     AF
            POP     BC
            POP     HL
            RET
MO.SETC1:   DB      0F0H
            DB      001H                ;Cursor Ein
            DB      0                   ;X
            DB      0                   ;Y
            DB      0FFH

            CALL    MO.CPOS



;
MO.RESC:    PUSH    HL
            PUSH    BC
            LD      HL,MO.RESC1         ;Emulator-Routine ansprechen
            LD      BC,00340H
            OTIR
            POP     BC
            POP     HL
            RET
MO.RESC1:   DB      0F0H
            DB      002H                ;Cursor Aus
            DB      0FFH            
;****************************************************************
;*               DZPOS , DSPOS , DZPOL , DSPOL                  *
;****************************************************************
MO.DZPOL:   LD      HL,MS.ZPOL          ;Lesezeilennr.     decr.
            CALL    MO.DECZ
            JR      MO.DIL
MO.DSPOL:   LD      HL,MS.SPOL          ;Lesespaltennr.    decr.
            CALL    MO.DECS
MO.DIL:     PUSH    BC
            CALL    MO.CPOL
            POP     BC
            CCF                         ;Z = CY = 1  falls Uebertrag
            RET
MO.DZPOS:   LD      HL,MS.ZPOS          ;Schreibzeilennr.  decr.
            CALL    MO.DECZ
            JR      MO.DIS
MO.DECZ:    PUSH    BC
            LD      A,(MS.ZMAX)
            LD      B,A
            LD      A,(MS.ZMIN)
            JR      MO.DEC2
MO.DSPOS:   LD      HL,MS.SPOS          ;Schreibspaltennr. decr.
            CALL    MO.DECS
            JR      MO.DIS
MO.DECS:    PUSH    BC
            LD      A,(MS.SMAX)
            LD      B,A
            LD      A,(MS.SMIN)
MO.DEC2:    DEC     A
            CP      (HL)
            JR      Z,MO.DEC3           ;Z=1,CY=0 falls Uebertrag
            DEC     (HL)
            JP      MO.INC4
MO.DIS:     PUSH    BC
            CALL    MO.CPOS
            POP     BC
            CCF                         ;Z = CY = 1  falls Uebertrag
            RET
MO.ROLL:    LD      BC,(MS.ZANZ)        ;Standardanschlussroutine Rollfkt.
MO.ROL1:    LD      (HL),' '            ;loeschen der Zeile auf blank
            INC     HL
            DJNZ    MO.ROL1
            RET
            PAGE
MO.DEC3:    PUSH    AF                  ;Rollfunktion
            PUSH    BC                  ;rollen nach unten raus
            PUSH    DE
            PUSH    HL
            LD      HL,MS.DIRES         ;Abfrage , ob Rollen ein
            BIT     5,(HL)
            JR      Z,MO.DEC4
            BIT     4,(HL)
            JR      Z,MO.DEC6
            LD      HL,(MS.ZPOS)        ;ZPOS , SPOS retten
            PUSH    HL
            LD      HL,(MS.ZMAX)
            DEC     H
            DEC     L
            LD      (MS.ZPOS),HL
            CALL    MO.BWSE             ;DE ermitteln
            INC     HL
            EX      DE,HL
            CALL    MO.SZA              ;HL ermitteln
            LD      BC,(MS.SPANZ)       ;BC ermitteln
            LD      B,0
            LDIR                        ;letzte Zeile retten



            CALL    MO.SZA              ;HL ermitteln
            DEC     HL
            PUSH    HL
            CALL    MO.DESZ             ;DE ermitteln
            ADD     HL,DE
            PUSH    HL
            LD      HL,(MS.ZMIN)        ;BC ermitteln
            LD      A,(MS.ZMAX)
            SUB     L
            PUSH    AF
            LD      HL,0
            CALL    MO.PNSP
            POP     AF
            PUSH    HL
            POP     BC
            POP     DE
            POP     HL
            CP      0
            JR      Z,MO.DEC5
            LDDR                        ;Bildfensterzeilen um 1 Zeile nach unten

            PAGE
MO.DEC5:    POP     HL                  ;rueckspeichern von ZPOS , SPOS
            LD      (MS.ZPOS),HL
            LD      HL,(MS.RADR)        ;Verzweigen zur Anschlussroutine
            PUSH    HL
            POP     IX
            CALL    MO.BWSE             ;Parameter in HL = Adresse der
            INC     HL                  ;rausgerollten Zeile
            CALL    MO.MORT



            CALL    MO.BWSE             ;HL ermitteln
            INC     HL
            PUSH    HL
            CALL    MO.SZA              ;DE ermitteln
            EX      DE,HL
            POP     HL
            LD      BC,(MS.SPANZ)       ;BC ermitteln
            LD      B,0
            LDIR                        ;aktuelle Zeile neu belegen



            CALL    MO.BWSUS
MO.DEC7:    POP     HL
            POP     DE
            POP     BC
            POP     AF
            CCF
            JP      MO.INC4

MO.DEC4:    POP     HL
            POP     DE
            POP     BC
            POP     AF
            JP      MO.INC3

MO.DEC6:    CALL    MO.ROUN
            JR      MO.DEC7

            PAGE
;****************************************************************
;*                IZPOS , ISPOS , IZPOL , ISPOL                 *
;****************************************************************
MO.IZPOL:   LD      HL,MS.ZPOL          ;Lesezeilennr.     incr.
            CALL    MO.INCZ
            JP      MO.DIL
MO.ISPOL:   LD      HL,MS.SPOL          ;Lesespaltennr.    incr.
            CALL    MO.INCS
            JP      MO.DIL
MO.IZPOS:   LD      HL,MS.ZPOS          ;Schreibzeilennr.  incr.
            CALL    MO.INCZ
            JP      MO.DIS
MO.INCZ:    PUSH    BC
            LD      A,(MS.ZMIN)
            LD      B,A
            LD      A,(MS.ZMAX)
            JR      MO.INC2
MO.ISPOS:   LD      HL,MS.SPOS          ;Schreibspaltennr. incr.
            CALL    MO.INCS
            JP      MO.DIS
MO.INCS:    PUSH    BC
            LD      A,(MS.SMIN)
            LD      B,A
            LD      A,(MS.SMAX)
MO.INC2:    LD      C,A
            LD      A,(HL)
            INC     A
            CP      C
            JP      C,MO.INC1
            PUSH    AF                  ;Rollfunktion
            PUSH    BC                  ;rollen nach oben raus
            PUSH    DE
            PUSH    HL
            LD      HL,MS.DIRES         ;Abfrage , ob Rollen ein
            BIT     5,(HL)
            JR      Z,MO.INC5
            BIT     4,(HL)
            JR      Z,MO.INC7
            LD      HL,(MS.ZPOS)        ;retten von ZPOS , SPOS
            PUSH    HL
            LD      HL,(MS.ZMIN)
            DEC     H
            DEC     L
            LD      (MS.ZPOS),HL
            CALL    MO.BWSE             ;DE ermitteln
            INC     HL
            EX      DE,HL
            LD      HL,(MS.BWSA)        ;HL ermitteln
            LD      A,(MS.ZMIN)
            DEC     A
            CALL    MO.PNSP
            PUSH    HL
            LD      BC,(MS.SPANZ)       ;BC ermitteln
            LD      B,0
            LDIR                        ;erste Zeile retten

            PAGE
            POP     HL                  ;DE ermitteln
            PUSH    HL
            CALL    MO.DESZ             ;HL ermitteln
            ADD     HL,DE
            PUSH    HL
            LD      HL,(MS.ZMIN)        ;BC ermitteln
            LD      A,(MS.ZMAX)
            SUB     L
            PUSH    AF
            LD      HL,0
            CALL    MO.PNSP
            POP     AF
            PUSH    HL
            POP     BC
            POP     HL
            POP     DE
            CP      0
            JR      Z,MO.INC6
            LDIR                        ;Bildfensterzeilen um 1 Zeile nach oben

MO.INC6:    POP     HL                  ;rueckspeichern von ZPOS , SPOS
            LD      (MS.ZPOS),HL
            LD      HL,(MS.RADR)        ;Verzweigung zur Anschlussroutine
            PUSH    HL
            POP     IX
            CALL    MO.BWSE             ;Parameter in HL = Adresse der
            INC     HL                  ;rausgerollten Zeile
            CALL    MO.MORT
            CALL    MO.BWSE             ;HL ermitteln
            INC     HL
            PUSH    HL
            CALL    MO.SZA                 ;DE ermitteln
            EX      DE,HL
            POP     HL
            LD      BC,(MS.SPANZ)       ;BC ermitteln
            LD      B,0
            LDIR                        ;aktuelle Zeile belegen
            CALL    MO.BWSUS
MO.INC8:    POP     HL
            POP     DE
            POP     BC
            POP     AF
            CCF
            JR      MO.INC4

MO.INC7:    CALL    MO.ROOB
            JR      MO.INC8

MO.INC5:    POP     HL
            POP     DE
            POP     BC
            POP     AF
MO.INC3:    DEC     B
            LD      A,B
MO.INC1:    LD      (HL),A
MO.INC4:    POP     BC
            RET

            PAGE
;****************************************************************
;*               aktuelle Schreib-/Lese- position ==> HL        *
;****************************************************************
MO.CPOS:    CALL    MO.SSA              ;Schreib-
            JR      MO.SZA1

MO.CPOL:    CALL    MO.LSA              ;Lese-
            JR      MO.LZA1
;****************************************************************
;*               Spaltenanfang       Schreib-/Lese- position    *
;****************************************************************
MO.SSA:     LD      HL,(MS.SPOS)        ;Schreib-
MO.SSA1:    LD      H,0
            PUSH    AF
            LD      DE,(MS.BWSA)
            ADD     HL,DE
            POP     AF
            RET

MO.LSA:     LD      HL,(MS.SPOL)        ;Lese-
            JR      MO.SSA1
;****************************************************************
;*               Formatspaltenanfang Schreib-/Lese- position    *
;****************************************************************
MO.SSAF:    CALL    MO.SSA              ;Schreib-
MO.SSAF1:   PUSH    AF
            LD      A,(MS.ZMIN)
            DEC     A
MO.SSAF2:   CALL    MO.PNSP
            POP     AF
            RET

MO.LSAF:    CALL    MO.LSA              ;Lese-
            JR      MO.SSAF1
;****************************************************************
;*               Zeilenanfang        Schreib-/Lese- position    *
;****************************************************************
MO.SZA:     LD      HL,(MS.BWSA)        ;Schreib-
MO.SZA1:    PUSH    AF
            LD      A,(MS.ZPOS)
            JR      MO.SSAF2

MO.LZA:     LD      HL,(MS.BWSA)        ;Lese-
MO.LZA1:    PUSH    AF
            LD      A,(MS.ZPOL)
            JR      MO.SSAF2
;****************************************************************
;*               Formatzeilenanfang  Schreib-/Lese- position    *
;****************************************************************
MO.SZAF:    CALL    MO.POSA             ;Schreib-
            JR      MO.SZA1

MO.LZAF:    CALL    MO.POSA             ;Lese-
            JR      MO.LZA1

            PAGE
;****************************************************************
;*               Formatanfang BWS                               *
;****************************************************************
MO.BWSAF:   CALL    MO.POSA
            JR      MO.SSAF1

;****************************************************************
;*               Ende         BWS                               *
;****************************************************************
MO.BWSE:    LD      HL,(MS.BWSA)
            DEC     HL
MO.ADDBL:   LD      A,(MS.ZANZ)         ;HL=HL+BWSL
MO.PNSP:    OR      A                   ;HL:=HL+A*(SPANZ)
            RET     Z
            PUSH    DE
            CALL    MO.DESZ
MO.PNSP1:   ADD     HL,DE
            DEC     A
            JR      NZ,MO.PNSP1
            POP     DE
            RET

MO.DESZ:    LD      DE,(MS.SPANZ)       ;DE:=Spaltenanzahl
            LD      D,0
            RET
;****************************************************************
;*               Laenge       BWS                               *
;****************************************************************
MO.BWSL:    PUSH    HL
            LD      HL,0
            CALL    MO.ADDBL
            EX      (SP),HL
            POP     BC                  ;BC=BWSL  A=0
            RET                         ;HL,DE unveraendert

MO.POSA:    LD      HL,(MS.SMIN)
            DEC     L
            JR      MO.SSA1

            PAGE
;****************************************************************
;*               LCPOS , LCPOL                                  *
;****************************************************************
MO.LCPOS:   PUSH    HL                  ; HL ==> aktuelle Schreibposition
            PUSH    DE
            LD      DE,(MS.BWSA)
            OR      A
            SBC     HL,DE
            CALL    MO.DESZ
            XOR     A
MO.LCP1:    SBC     HL,DE
            INC     A
            JR      NC,MO.LCP1
            ADD     HL,DE
            DEC     A
            LD      (MS.ZPOS),A
            LD      A,L
            LD      (MS.SPOS),A
            POP     DE
            POP     HL
            RET
;
MO.LCPOL:   PUSH    HL
            PUSH    DE
            LD      DE,(MS.BWSA)
            OR      A
            SBC     HL,DE
            CALL    MO.DESZ
            XOR     A
MO.LCP2:    SBC     HL,DE
            INC     A
            JR      NC,MO.LCP2
            ADD     HL,DE
            DEC     A
            LD      (MS.ZPOL),A
            LD      A,L
            LD      (MS.SPOL),A
            POP     DE
            POP     HL
            RET

            PAGE
;****************************************************************
;*               HOME - Funktion  Schreibposition               *
;****************************************************************
MO.HOMES:   LD      HL,(MS.ZMIN)
            LD      (MS.ZPOS),HL
            CALL    MO.DZPOS
            CALL    MO.DSPOS
            RET

;****************************************************************
;*               HOME - Funktion  Leseposition                  *
;****************************************************************
MO.HOMEL:   LD      HL,(MS.ZMIN)
            LD      (MS.ZPOL),HL
            CALL    MO.DZPOL
            CALL    MO.DSPOL
            RET

;****************************************************************
;*               Anfangsposition naechste Zeile Schreiben       *
;****************************************************************
MO.CNZAS:   LD      A,(MS.SMIN)
            DEC     A
            LD      (MS.SPOS),A
            CALL    MO.IZPOS
            RET

;****************************************************************
;*               Anfangsposition naechste Zeile Lesen           *
;****************************************************************
MO.CNZAL:   LD      A,(MS.SMIN)
            DEC     A
            LD      (MS.SPOL),A
            CALL    MO.IZPOL
            RET

            TITLE   'Schreiben/Lesen eines Zeichens'
            PAGE
;****************************************************************
;*               Schreiben eines Zeichens auf Bildschirm        *
;****************************************************************
MO.MZS:     CALL    MO.CPOS
            LD      A,(MS.TK)
            LD      (HL),A
            CALL    MO.BWSUZ
MO.MPS:     LD      HL,MO.ZSTAB
            LD      A,(MS.DIRES)
            JR      MO.MSL
;****************************************************************
;*               Lesen     eines Zeichens vom Bildschirm        *
;****************************************************************
MO.MZL:     CALL    MO.CPOL
            LD      A,(HL)
            LD      (MS.TK),A
MO.MPL:     LD      HL,MO.ZLTAB
            LD      A,(MS.DIREL)
MO.MSL:     BIT     7,A
            RET     Z
            AND     07H
            ADD     A,A
            LD      B,0
            LD      C,A
            ADD     HL,BC
            LD      A,(HL)
            INC     HL
            LD      H,(HL)
            LD      L,A
            JP      (HL)
;****************************************************************
;*               ZSTAB  und  ZLTAB                              *
;****************************************************************
MO.ZSTAB:   DW      MO.MZSO
            DW      MO.MZSNO
            DW      MO.MZSN
            DW      MO.MZSNW
            DW      MO.MZSW
            DW      MO.MZSSW
            DW      MO.MZSS
            DW      MO.MZSSO
MO.ZLTAB:   DW      MO.MZLO
            DW      MO.MZLNO
            DW      MO.MZLN
            DW      MO.MZLNW
            DW      MO.MZLW
            DW      MO.MZLSW
            DW      MO.MZLS
            DW      MO.MZLSO

            PAGE
;****************************************************************
;*               MZSO , MZSW , MZSN , MZSS                      *
;****************************************************************
MO.MZSO:    LD      A,(MS.DIRES)
            PUSH    AF
            BIT     5,A
            JR      Z,MO.MZSO1
            LD      HL,MS.ZMAX
            LD      A,(MS.ZPOS)
            INC     A
            CP      (HL)
            JR      Z,MO.MZSO3
            POP     AF
            PUSH    AF
            RES     5,A
            LD      (MS.DIRES),A
MO.MZSO1:   CALL    MO.ISPOS
MO.MZSO2:   PUSH    AF
            POP     DE
            POP     AF
            PUSH    DE
            LD      (MS.DIRES),A
            BIT     6,A
            JR      Z,MO.MZSL
            POP     AF
            CALL    C,MO.IZPOS
            RET
MO.MZSO3:   CALL    MO.ISPOS
            JR      NZ,MO.MZSO2
            LD      A,(MS.SMIN)
            DEC     A
            LD      (MS.SPOS),A
            JR      MO.MZSO2

            PAGE
MO.MZSW:    LD      A,(MS.DIRES)
            PUSH    AF
            BIT     5,A
            JR      Z,MO.MZSW1
            LD      HL,MS.ZMIN
            LD      A,(MS.ZPOS)
            INC     A
            CP      (HL)
            JR      Z,MO.MZSW3
            POP     AF
            PUSH    AF
            RES     5,A
            LD      (MS.DIRES),A
MO.MZSW1:   CALL    MO.DSPOS
MO.MZSW2:   PUSH    AF
            POP     DE
            POP     AF
            PUSH    DE
            LD      (MS.DIRES),A
            BIT     6,A
            JR      Z,MO.MZSL
            POP     AF
            CALL    C,MO.DZPOS
            RET
MO.MZSW3:   CALL    MO.DSPOS
            JR      NZ,MO.MZSW2
            LD      A,(MS.SMAX)
            DEC     A
            LD      (MS.SPOS),A
            JR      MO.MZSW2

MO.MZSN:    CALL    MO.DZPOS
            PUSH    AF
            LD      A,(MS.DIRES)
            BIT     6,A
            JR      Z,MO.MZSL
            POP     AF
            CALL    C,MO.DSPOS
            RET

MO.MZSS:    CALL    MO.IZPOS
            PUSH    AF
            LD      A,(MS.DIRES)
            BIT     6,A
            JR      Z,MO.MZSL
            POP     AF
            CALL    C,MO.ISPOS
            RET

MO.MZSL:    POP     AF
            RET

MO.MZSNO    EQU     $
MO.MZSNW    EQU     $
MO.MZSSW    EQU     $
MO.MZSSO:   RET

            PAGE
;****************************************************************
;*               MZLO , MZLW , MZLN , MZLS                      *
;****************************************************************
MO.MZLO:    CALL    MO.ISPOL
            PUSH    AF
            LD      A,(MS.DIREL)
            BIT     6,A
            JR      Z,MO.MZSL
            POP     AF
            CALL    C,MO.IZPOL
            RET
MO.MZLW:    CALL    MO.DSPOL
            PUSH    AF
            LD      A,(MS.DIREL)
            BIT     6,A
            JR      Z,MO.MZSL
            POP     AF
            CALL    C,MO.DZPOL
            RET
MO.MZLN:    CALL    MO.DZPOL
            PUSH    AF
            LD      A,(MS.DIREL)
            BIT     6,A
            JR      Z,MO.MZSL
            POP     AF
            CALL    C,MO.DSPOL
            RET
MO.MZLS:    CALL    MO.IZPOL
            PUSH    AF
            LD      A,(MS.DIREL)
            BIT     6,A
            JR      Z,MO.MZSL
            POP     AF
            CALL    C,MO.ISPOL
            RET
MO.MZLNO    EQU     $
MO.MZLNW    EQU     $
MO.MZLSW    EQU     $
MO.MZLSO:   RET

            TITLE   'Vektor lesen/schreiben'
            PAGE
;****************************************************************
;*               Vektor schreiben                               *
;*               -----------------------------------------------*
;*               HL = auszugebender Vektor                      *
;*               B  = Laenge des    Vektors                     *
;****************************************************************
MO.MVS:     LD      A,(MS.DIRES)
            PUSH    AF
            SET     7,A
            SET     6,A
            LD      (MS.DIRES),A
MO.MVS1:    LD      A,(HL)
            INC     HL
            PUSH    HL
            PUSH    BC
            LD      (MS.TK),A
            CALL    MO.MZS
            POP     BC
            POP     HL
            DJNZ    MO.MVS1
            POP     AF
            LD      (MS.DIRES),A
            RET

;****************************************************************
;*                Vektor lesen                                  *
;*                ----------------------------------------------*
;*                HL = Zieladresse des einzulesenden Vektors    *
;*                B  = Laenge des Vektors                       *
;****************************************************************
MO.MVL:     LD      A,(MS.DIREL)
            PUSH    AF
            SET     7,A
            SET     6,A
            LD      (MS.DIREL),A
MO.MVL1:    PUSH    HL
            PUSH    BC
            CALL    MO.MZL
            POP     BC
            POP     HL
            LD      A,(MS.TK)
            LD      (HL),A
            INC     HL
            DJNZ    MO.MVL1
            POP     AF
            LD      (MS.DIREL),A
            RET

;           END
;           PN      TA35
            TITLE   'Tastaturroutine'
            PAGE
;****************************************************************
;*               Tastaturroutine                                *
;*  Version      -----------------------------------------------*
;*               Programmierer: M. Herbote --- K EAW  ZFT (WFT) *
;*  V 2 . 1      -----------------------------------------------*
;*               Stand        : 06.Maerz 1985                   *
;****************************************************************

;****************************************************************
;*               symbolische Adressen und ihre Bedeutung        *
;* symbol.Adr. ! Bedeutung                                      *
;*-------------!------------------------------------------------*
;* TA.TA1      ! Abfrage nach gedrueckter Taste                 *
;* TA.TA2      ! Einlesen des Tastaturcodes                     *
;* TA.PIOPR    ! programmieren des Tastatur-PIO                 *
;* TA.E0IN     ! Anfangswerte fuer EMERK , UMERK und KGMER      *
;* TA.LOE      ! loeschen aller Tastenroutinenadressen          *
;* TA.LOES     ! wie TA.LOE mit Belegung Standardroutinen       *
;* TA.ABFR     ! Tastaturabfrage und Ausfuehrung Tastenfunktion *
;* TA.TFE      ! Warteschleife bis keine Taste mehr gedrueckt   *
;*-------------!------------------------------------------------*
;* Tabellen mit den Funktionsadressen der einzelnen Tasten      *
;* TS.TAB1     ! Funktionstasten  P01 bis P48                   *
;* TS.TAB2     ! INS MOD   , DEL      , INS LINE   , DEL LINE , *
;*             ! SCH LINKS , C HOCH   , SCH RECHTS ,            *
;*             ! C LINKS   , HOME     , C RECHTS   ,            *
;*             ! CNZA      , C RUNTER                           *
;* TS.TAB3     ! 00 , 000  , NEG QUIT , SYS  , END , ABS        *
;* TS.TAB4     ! POS QUIT  , TABS     , TABL , CI  , M          *
;* TS.EINA     ! Auswerten der alphanumerischen Tasten          *
;* TS.TABU     ! Auswerten der Taste  ET2 == HT                 *
;* TS.NEWL     ! Auswerten der Taste  ET1 == RS                 *
;* TS.TAB5     ! Ebene 0   , Ebene 1  , Ebene 2    , Ebenen 3   *
;*-------------!------------------------------------------------*
;* TS.PTAST    ! I/O-Adresse der Tastatur                       *
;* TS.TK       ! Zwischenspeicher fuer den Tastaturcode         *
;* TS.PTK      ! Zwischenspeicher fuer die P-Tastennummer       *
;* TS.EMERK    ! Merker fuer die aktive P-Tastenebene           *
;* TS.SPMER    ! Tastaturgruppenmerker                          *
;*             ! Bit ! Hexacode    ! Funktion                   *
;*             !-----!-------------!----------------------------*
;*             ! 0   ! 00-1F       ! Steuer- / Sonder-zeichen   *
;*             ! 1   ! 20,2C       !  ,                         *
;*             ! 2   ! 2B,2D,2E    ! +-.                        *
;*             ! 3   ! 30-39       ! 0123456789                 *
;*             ! 4   !             ! !"%&'()*/:;<=>?[\]^_{|}`~  *
;*             ! 5   ! 40-5A,23,24 ! A...Z@#$   Grossbuchstaben *
;*             ! 6   ! 61-7A       ! a...z      Kleinbuchstaben *
;*             ! 7   ! 80-FF       ! Funktionstasten            *
;* TS.UMERK    ! =0 INS MOD aus   =1 INS MOD ein                *
;* TS.KGMER    ! =0 Programmier-  =1 Schreibmaschinen- Tastatur *
;* TS.ZSMER    ! =0 Schnellschreiben nicht erlaubt              *
;* TS.ZEIT1    ! Zeitkonstante 1 fuer die Warteschleife         *
;* TS.ZEIT2    ! Zeitkonstante 2 fuer die Warteschleife         *
;* TS.MIO      ! =0 I/O -         =1 memory - Bereitstellung    *
;* TS.MBF      ! =0 kein          =1 Abspeichern als Bedienfolge*
;* TS.BFOL1    ! Pointer Bedienfolgespeicher bei Aufbau         *
;* TS.BFOL2    ! Pointer Bedienfolgespeicher bei Abarbeitung    *
;* TS.STACK    ! Zeiger zum aktuellen Keller                    *
;****************************************************************
            PAGE
;****************************************************************
;*               Verbindungs - Macro zur Version 1.2            *
;****************************************************************
TA.TAST     MACRO   UP
            PUSH    AF
            CALL    S0.TAZU
            POP     AF
            CALL    UP
            PUSH    AF
            PUSH    BC
            PUSH    DE
            CALL    S2.STACK
            POP     DE
            POP     BC
            POP     AF
            ENDM
;****************************************************************
;*               UP zum Abfragen nach gedrueckter Taste         *
;****************************************************************
TA.TA1:     LD      A,(TS.PTAST)
            TA.TAST S0.TA1
            LD      (TS.ZEI21),A
            RET
;****************************************************************
;*               UP zum einlesen des Tastaturcodes              *
;****************************************************************
TA.TA2:     LD      A,(TS.PTAST)
            TA.TAST S0.TA2
            LD      B,A
            LD      A,(TS.ZEI21)
            BIT     2,A
            JR      NZ,TA.TA21
            LD      A,B                 ;Auswertung der CTRL-Tasten
            CP      85H
            JR      NC,TA.TA21
            CP      84H
            JR      NZ,TA.TA22
            LD      B,0F4H              ;SCH_LINKS
            JR      TA.TA21
TA.TA22:    CP      80H
            JR      C,TA.TA23
            ADD     A,31H               ;TABS,TABL,CI,M
            LD      B,A
TA.TA23:    CP      70H
            JR      NC,TA.TA21
            CP      60H
            JR      C,TA.TA24
            ADD     A,80H               ;Tastencode  E0H ... EFH
            LD      B,A
TA.TA24:    CP      50H
            JR      NC,TA.TA21
            CP      40H
            JR      C,TA.TA21
            ADD     A,90H               ;Tastencode  D0H ... DFH
            LD      B,A
TA.TA21:    LD      A,B
            RET

            TITLE   'Init. und Zusatzfkt. Tastatur'
            PAGE
;****************************************************************
;*               Init. und Zusatzfunktionen der Tastatur        *
;****************************************************************
TA.PIOPR:   LD      A,(TS.PTAST)
            TA.TAST S0.TINIT
            RET

TA.TA3:     CALL    TA.TA1
            JR      NZ,TA.TA3
            CALL    TA.TA2
            RET

TA.TRTFE:   LD      A,(TS.PTAST)
            TA.TAST S0.TFE
            RET

TA.TIM:     LD      A,(TS.PTAST)        ;Ansteuerung der INS_MOD Diode
            TA.TAST S0.TIM
            RET

TA.TEM:     LD      A,(TS.PTAST)        ;Ansteuerung der Ebenen- Dioden
            TA.TAST S0.TEM
            RET

TA.TBEL:    LD      A,(TS.PTAST)        ;Ansteuerung der Fehleranzeigen
            TA.TAST S0.TBEL
            RET
;****************************************************************
;*               Ebene 0 , INS MOD auf aus und KGMER auf PTAS   *
;****************************************************************
TA.E0IN:    XOR     A
            LD      (TS.KGMER),A
            LD      (TS.EMERK),A
            LD      (TS.UMERK),A
            LD      (TS.MIO),A
            LD      (TS.MBF),A

            LD      B,001H              ;INS_MOD aus, Ebene 1 ???  AUS/EIN 7, 17 ???
            PUSH    BC
;???            CALL    TA.TIM
            POP     BC
;???            CALL    TA.TEM

            RET

TA.BBB:     LD      A,(TS.EMERK)
            INC     A
            LD      B,A
            LD      A,080H
            RLCA                        ;<--!
            DJNZ    $-1                 ;---!
            LD      B,A
            LD      A,(TS.UMERK)
            OR      A
            RET     Z
            SET     7,B
            RET

            TITLE   'Abfrageschleife'
            PAGE
;****************************************************************
;*               Tastaturabfrageschleife                        *
;****************************************************************
TA.ABFR:    LD      A,(TS.MIO)          ;Tastencode von Tastatur bzw. vomSpeicher
            OR      A
            JR      Z,TA.ABFR1
            LD      HL,(TS.BFOL2)
            LD      A,(HL)
            INC     HL
            LD      (TS.BFOL2),HL
            JR      TA.ABFR2
TA.ABFR1:   CALL    TA.TA3              ;Tastencode einlesen
TA.ABFR2:   OR      A
            JP      Z,TA.TFE            ;Kode=00H ungueltig
            CP      7FH
            JP      Z,TA.TFE            ;Kode=7FH ungueltig
            LD      (TS.TK),A           ;Tastencode abspeichern
            LD      A,(TS.MBF)          ;Tastencode nach Bedienfolgespeicher ?
            OR      A
            LD      A,(TS.TK)
            JR      Z,TA.ABFR3
            LD      HL,(TS.BFOL1)
            LD      (HL),A
            INC     HL
            LD      (TS.BFOL1),HL
TA.ABFR3:   LD      A,(TS.KGMER)
            OR      A
            LD      A,(TS.TK)
            JR      Z,TA.ABF14
            CP      7EH
            JR      NC,TA.ABF14
            CP      61H
            JR      NC,TA.ABF15
            CP      5EH
            JR      NC,TA.ABF14
            CP      41H
            JR      NC,TA.ABF16
            JR      TA.ABF14
TA.ABF15:   SUB     20H
            JR      TA.ABF14
TA.ABF16:   ADD     A,20H
TA.ABF14:   CP      80H
            JP      NC,TA.ABF20         ;Kode > 7FH    Funktionstasten
            CP      09H
            JP      Z,TA.ET2            ;Taste ET2 == 09H == HT == Tabulator
            CP      1EH
            JP      Z,TA.ET1            ;Taste ET1 == 1EH == RS
TA.ABF1:    LD      HL,TS.SPMER         ;Auswertung Alphatastatur
            CP      3AH
            JR      NC,TA.ABF10
            CP      20H
            JR      NC,TA.ABF6
            BIT     0,(HL)              ;Kodegruppe 1   00H - 1FH
            JR      Z,TA.TFE

            PAGE
TA.ABF2:    LD      HL,(TS.EINA)
TA.ABF3:    LD      C,A
            LD      A,H
            OR      L
            JR      Z,TA.TFE

            LD      A,7                 ;Cursor loeschen
            LD      (MS.CMD),A
            CALL    MO.MONI

            LD      A,C
            CALL    TA.MM

            LD      A,6                 ;Cursor setzen
            LD      (MS.CMD),A
            CALL    MO.MONI

            LD      A,(TS.MIO)
            OR      A
            JP      Z,TA.WART
            RET

;
TA.MM:      JP      (HL)
;

TA.ABF6:    CP      30H                 ;Kodegruppe 2,3,4,5   20H - 39H
            JR      NC,TA.ABF9
            CP      '+'
            JR      Z,TA.ABF8
            CP      '-'
            JR      Z,TA.ABF8
            CP      '.'
            JR      Z,TA.ABF8
            CP      ' '
            JR      Z,TA.ABF7
            CP      ','
            JR      NZ,TA.ABF10

TA.ABF7:    BIT     1,(HL)              ;Kodegruppe 2   20H , 2CH
            JR      Z,TA.TFE
            JR      TA.ABF2

TA.ABF8:    BIT     2,(HL)              ;Kodegruppe 3   2BH , 2DH , 2EH
            JR      Z,TA.TFE
            JR      TA.ABF2

TA.ABF9:    BIT     3,(HL)              ;Kodegruppe 4   30H - 39H
            JR      Z,TA.TFE
            JR      TA.ABF2

            PAGE
TA.ABF10:   CP      '#'                 ;Kodegruppe 5,6,7
            JR      Z,TA.ABF12
            CP      '$'
            JR      Z,TA.ABF12
            CP      40H
            JR      C,TA.ABF11
            CP      7BH
            JR      NC,TA.ABF11
            CP      61H
            JR      NC,TA.ABF13
            CP      5BH
            JR      NC,TA.ABF11
            JR      TA.ABF12

TA.ABF11:   BIT     4,(HL)              ;Kodegruppe 5   !"%&'()*/:;<=>?[\]^_{|}`~
            JR      Z,TA.TFE
            JR      TA.ABF2

TA.ABF12:   BIT     5,(HL)              ;Kodegruppe 6   A bis Z , @ # $
            JR      Z,TA.TFE
            JR      TA.ABF2

TA.ABF13:   BIT     6,(HL)              ;Kodegruppe 7   a bis z
            JR      Z,TA.TFE
            JR      TA.ABF2

;****************************************************************
;*             Warten auf Tastenende                            *
;****************************************************************
TA.TFE:     XOR     A                   ;warten auf Tastenende
            LD      (TS.ZSMER),A
            LD      (TS.ZSTC),A
            LD      A,(TS.MIO)
            OR      A
            RET     NZ

            CALL    TA.TRTFE

            RET

            PAGE
TA.ABF20:   CP      0FCH                ;Funktionstasten   Code > 7FH
            JP      NC,TA.EW1           ;Ebenenumschalter E=0 - E=3
            CP      0F0H
            JP      NC,TA.STEUT         ;Kursorsteuertasten
            CP      0D0H
            JP      NC,TA.STZ           ;Hexatasten 00H - 1FH
            CP      0CAH
            JP      NC,TA.FKT2          ;Fkt.tasten 00,000,NEG QUIT,SYS,END,ABS
            CP      0C0H
            JP      NC,TA.HZE           ;Hexatasten 0 - 9
            LD      HL,TS.SPMER
            BIT     7,(HL)
            JR      Z,TA.TFE
            CP      0B0H
            JP      NC,TA.FKT1          ;Fkt.tasten POS QUIT,TABS,TABL,USP1,USP2
;
            XOR     A                   ;Fkt.tasten P1 - P12
            LD      HL,TS.EMERK
            CP      (HL)
            JR      Z,TA.EAW4
            LD      HL,TS.EMERK
            LD      B,(HL)
            LD      A,(TS.TK)
            SUB     80H
TA.EAW2:    ADD     A,12
            DJNZ    TA.EAW2
TA.EAW3:    INC     A
            LD      (TS.PTK),A
            DEC     A
            ADD     A,A
            LD      B,0
            LD      C,A
            LD      HL,TS.TAB1
            ADD     HL,BC
TA.ABFR9:   LD      A,(HL)
            INC     HL
            LD      H,(HL)
            LD      L,A
            JP      TA.ABF3
TA.EAW4:    LD      A,(TS.TK)
            SUB     80H
            JR      TA.EAW3

TA.EW1:     LD      HL,TS.SPMER         ;Funktionstasten FCH - FFH
            BIT     7,(HL)
            JP      Z,TA.TFE
            CPL
            LD      (TS.EMERK),A
            CALL    S1.STAT

            CALL    TA.BBB
            CALL    TA.TEM

            LD      A,(TS.EMERK)
            LD      HL,TS.TAB5
            JP      TA.FKT3

            PAGE
TA.STEUT:   LD      HL,TS.SPMER         ;Funktionstasten F0H - FBH
            BIT     7,(HL)
            JP      Z,TA.TFE
            CP      0F0H
            JR      Z,TA.INSMD
            SUB     0F0H
            ADD     A,A
TA.STEU1:   LD      B,0
            LD      C,A
            LD      HL,TS.TAB2
            ADD     HL,BC
            JP      TA.ABFR9

TA.INSMD:   LD      A,(TS.UMERK)
            OR      A
            JR      Z,TA.INSME
            DEC     A                   ;INS_MOD ausschalten
            JR      TA.INSML
TA.INSME:   INC     A                   ;INS_MOD einschalten
TA.INSML:   LD      (TS.UMERK),A

            CALL    TA.BBB
            CALL    TA.TIM

            CALL    S1.STAT
            XOR     A
            JR      TA.STEU1

TA.STZ:     SUB     0D0H                ;Funktionstasten D0H - EFH
            JP      TA.ABF1

TA.FKT2:    LD      HL,TS.SPMER         ;Fkt.tasten 00,000,NEG QUIT,SYS,END,ABS
            BIT     7,(HL)
            JP      Z,TA.TFE
            SUB     0CAH
            LD      HL,TS.TAB3
TA.FKT3:    ADD     A,A
            LD      B,0
            LD      C,A
            ADD     HL,BC
            JP      TA.ABFR9

TA.FKT1:    SUB     0B0H                ;Fkt.tasten POS QUIT,TABS,TABL,USP1,USP2
            ADD     A,A
            LD      HL,TS.TAB4
            JR      TA.FKT3

TA.HZE:     SUB     90H                 ;Hexatasten 0 - 9
            JP      TA.ABF1

TA.ET2:     LD      HL,(TS.TABU)
            JP      TA.ABF3

TA.ET1:     LD      HL,(TS.NEWL)
            JP      TA.ABF3
            PAGE
;****************************************************************
;*               loeschen aller Tastenroutinenadressen          *
;****************************************************************
TA.LOE:     XOR     A
            LD      (TS.SPMER),A
            LD      HL,TS.TAB1
            LD      (HL),0
            LD      DE,TS.TAB1+1
            LD      BC,TS.PTAST-TS.TAB1-1
            LDIR
            LD      HL,S1.HCOPY
            LD      (TS.TAB3+8),HL
            RET
;****************************************************************
;*               wie LOE  , zusaetzlich werden Standardroutinen *
;*               eingetragen: Cursortasten , DEL LINE , SYS ,   *
;*                            alphanum. Tasten                  *
;****************************************************************
TA.LOES:    CALL    TA.LOE
            LD      HL,TA.TRTAB
            LD      DE,TS.TAB2
            LD      BC,TS.TAB5-TS.TAB2
            LDIR
            RET
;****************************************************************
;*               Standardbelegung der Tastaturadress-Tabellen   *
;****************************************************************
TA.TRTAB:   DW      0                   ;TS.TAB2   INS MOD
            DW      0                   ;          DEL
            DW      0                   ;          INS LINE
            DW      S1.DELZL            ;          DEL LINE

            DW      0                   ;          SCH LINKS
            DW      S1.CNOS             ;          C   HOCH
            DW      0                   ;          SCH RECHTS
            DW      S1.CNLS             ;          C   LINKS
            DW      S1.HOME             ;          HOME
            DW      S1.CNRS             ;          C   RECHTS
            DW      S1.CNZA             ;          CNZA
            DW      S1.CNUS             ;          C   RUNTER

            DW      S1.NN               ;TS.TAB3   00
            DW      S1.NNN              ;          000
            DW      0                   ;          NEG QUIT
            DW      S1.SYSTB            ;          SYS
            DW      S1.HCOPY            ;          HCOPY
            DW      0                   ;          ABS

            DW      0                   ;TS.TAB4   POS QUIT
            DW      0                   ;          TABS
            DW      0                   ;          TABL
            DW      0                   ;          CI
            DW      0                   ;          M

            DW      S1.AEIN             ;TS.EINA

            DW      0                   ;TS.TABU

            DW      0                   ;TS.NEWL

            TITLE   'Warteschleife'
            PAGE
;****************************************************************
;*               Warteschleife fuer Schnellschreiben            *
;****************************************************************
TA.WART:    PUSH    IX
            LD      IX,TS.ZEIT1
TA.WART0:   LD      A,(IX+1)
            SUB     (IX+0)
            LD      (IX+2),A
            LD      B,130
TA.WART1:   LD      A,(TS.ZSMER)
            OR      A
            JR      Z,TA.WART2
            PUSH    BC
            CALL    TA.TA1
            POP     BC
            JR      NZ,TA.WART2
            PUSH    BC
            CALL    TA.TA2
            POP     BC
            LD      HL,TS.TK
            CP      (HL)
            JR      NZ,TA.WART2
            DJNZ    TA.WART1
            LD      A,(TS.ZSTC)
            CP      (IX+2)
            JR      C,TA.WART3
            CP      (IX+1)
            JR      Z,TA.WART4
TA.WART3:   INC     A
            LD      (TS.ZSTC),A
            JR      TA.WART0

TA.WART2:   POP     IX
            JP      TA.TFE

TA.WART4:   LD      A,(IX+2)
            LD      (TS.ZSTC),A
            XOR     A
            LD      (TS.TK),A
            POP     IX
            RET


;           END
;           PN      K158
            TITLE   'Basisroutinen Kassette'
            PAGE
;****************************************************************
;*               Basisroutinen Kassette                         *
;*  Version      -----------------------------------------------*
;*               Programmierer: M. Herbote --- K EAW  ZFT (WFT) *
;*  V 2 . 1      -----------------------------------------------*
;*               Stand        : 10.April 1984                   *
;****************************************************************


;****************************************************************
;*                                                              *
;*   Die unterste Schicht wird von der  ROBOTRON - OEM-Routine  *
;*   gebildet. Sie enthaelt die Routinen:                       *
;*   INIT  ...   Initialisieren der  AKB - PIO s  und           *
;*   BRKMB ...   Ausfuehrung eines Kassettenkommandos           *
;*                                                              *
;*   Nachfolgende Tabelle zeigt die implementierten Basis-      *
;*   routinen und ihre Kommandos.                               *
;*                                                              *
;*   symb. Adr. OEM-Komm. SYS-Komm.                             *
;*   ---------------------------------------------------------  *
;*   GNRE       31H       KiRE      reservieren ein             *
;*   GNRA       41H                 reservieren aus             *
;*                        KiRA      enthaelt GNRE,GNRW,GNRA     *
;*   GNRW       21H       KiRW      rewind                      *
;*   GNRP                 KiR+      einen  Block vor            *
;*   GNRM                 KiR-      einen  Block zurueck        *
;*   GNLP       71H       KiL+      eine   Datei vor            *
;*   GNLPN                          um (D) Dateien vor          *
;*   GNLM       75H       KiL-      eine   Datei zurueck        *
;*   GNLMN                          um (D) Dateien zurueck      *
;*   GNCLS   51,61,15,11H KiCL      Abschluss einer Ausg.datei  *
;*                                                              *
;*   GNRD       02H                 einen  Block  ==>  KS.PUFFS *
;*   GNRDR                KiXA,-XE  (K2.TXANF-K2.TXEND) fuellen *
;*   EIN                            S0.PFFI  fuellen            *
;*   EINP                           einen  Block  ==>  S0.PFFI  *
;*   LESV                           Eingabe eines Zeichens vw.  *
;*   LESR                           Eingabe eines Zeichens rw.  *
;*                                                              *
;*   GNWR       00H                 einen  Block ausgeben       *
;*   GNWRT                KiY       (K2.TXANF-K2.TXEND) ausgeben*
;*   AUS                            S0.PFFA  ausgeben           *
;*   SCHR                           Ausgabe eines Zeichens      *
;*                                                              *
;*   GNRWR      08H                 einen  Block zurueckschr.   *
;*                                                              *
;*   MRCAT                          Zugriff auf MRES-Katalog    *
;*   MREPO                KiME      MRES-Eingabedatei eroeffnen *
;*   MRAPO                KiMA      MRES-Ausgabedatei eroeffnen *
;*   MRCLS                KiMC      MRES-Ausgabedatei abschl.   *
;*                                                              *
;****************************************************************

K1.ADRK1:   DB      ' Fehler- Status:    .. Nummer:    ..  '
K1.ADRK2:   DB      ' Ger: .   Datei:  ....   Satz:  ....  '
K1.ADRK3:   DB      '   Kassette fuehrt ein Kommando aus   '
K1.ADRK4:   DB      '                                      '

            TITLE   'K M B G  allgemeine Unterprogramme'
            PAGE
;****************************************************************
;*  K M B G      Aktivierung Geraeteroutine                     *
;****************************************************************
K1.ARMB:    PUSH    IX
            PUSH    IY
            CALL    K1.MVS              ;Anzeige Kassettengeraet arbeitet
            LD      HL,(K2.FKADR)
            LD      DE,K1.ADRK3
            CALL    K1.MONI
            CALL    K1.MVL
            LD      (IX+5),LOW(K1.ARMB1)
            LD      (IX+6),HIGH(K1.ARMB1)
K1.ARMBM:   CALL    S0.KRZU             ;BAMOS-Routine zuschalten
;            CALL    0   ;??? KR.BRKMB            ;Ausfuehrung Kassettenkommando
K1.ARMB0:   HALT                        ;warten auf Routinen-Ende
            JR      K1.ARMB0
K1.ARMB1:   INC     SP                  ;stack-pointer korrigieren
            INC     SP
            CALL    S2.STACK            ;BAMOS-Routine wegschalten
            POP     IY
            POP     IX
            RET
;****************************************************************
;*  K M B G      Fehlertest nach CALL ARMB                      *
;****************************************************************
K1.ARBT:    BIT     7,(IX+0)
            JP      NZ,K1.ERRT
            CALL    K1.FL
            RET
;****************************************************************
;*  K M B G      Unterprogramme fuer RCZx +- 1 und BLKx +-1     *
;****************************************************************
K1.BLKP:    LD      H,(IY-1)            ;BLK x  +  1
            LD      L,(IY-2)
            INC     HL
            LD      (IY-1),H
            LD      (IY-2),L
            RET

K1.BLKM:    LD      H,(IY-1)            ;BLK x  -  1
            LD      L,(IY-2)
            DEC     HL
            LD      (IY-1),H
            LD      (IY-2),L
            RET

K1.RCZP:    LD      H,(IY-3)            ;RCZ x  +  1
            LD      L,(IY-4)
            INC     HL
            LD      (IY-3),H
            LD      (IY-4),L
            RET

K1.RCZM:    LD      H,(IY-3)            ;RCZ x  -  1
            LD      L,(IY-4)
            DEC     HL
            LD      (IY-3),H
            LD      (IY-4),L
            RET

            PAGE
;****************************************************************
;*  K M B G      RCZx loeschen                                  *
;****************************************************************
K1.RCZN:    XOR     A                   ;RCZ x  :=  0
K1.RCZS:    LD      (IY-3),A            ;RCZ x  :=  (A)
            LD      (IY-4),A
            RET
;****************************************************************
;*  K M B G      HL und BC laden aus E/A-Tabelle                *
;****************************************************************
K1.LHLBC:   LD      H,(IX+8)
            LD      L,(IX+7)
            LD      B,(IX+9)
            LD      C,(IX+10)
            RET
;****************************************************************
;*  K M B G      Bandmarke gelesen ?                            *
;****************************************************************
K1.BM:      LD      A,(IX+9)
            OR      (IX+10)
            RET
;****************************************************************
;*  K M B G      zweiter Leseversuch nach Fehler 17             *
;****************************************************************
K1.F17:     LD      A,(IX+1)            ;Fehlerbyte
            CP      17H
            RET     NZ
            LD      (IX+4),15H          ;CMD einen Block zurueck
            CALL    K1.ARMB
            CALL    K1.ARBT
            LD      (IX+4),02H          ;CMD Wiedergabe
            CALL    K1.ARMB
            RET
;****************************************************************
;*  K M B G      IX und IY  mit Anfangswerten laden             *
;****************************************************************
K1.RGL1:    LD      IX,S3.KS1-S3.SEAT
            LD      DE,S0.DEAT+3
            ADD     IX,DE
            LD      IY,S3.KSK1-S3.SEAT
            INC     DE
            ADD     IY,DE
            RET

K1.RGL2:    LD      IX,S3.KS2-S3.SEAT
            LD      DE,S0.DEAT+3
            ADD     IX,DE
            LD      IY,S3.KSK2-S3.SEAT
            INC     DE
            ADD     IY,DE
            RET

            PAGE
;****************************************************************
;*  K M B G      Anzeigetext    ===>    K2.S/F-KADR             *
;****************************************************************
K1.MONI:    DEC     H                   ;(HL) ...  K2.S/F-KADR
            DEC     L                   ;(DE) ...  ADRKi
            LD      (MS.ZPOS),HL
            EX      DE,HL
            LD      B,38
            LD      A,24
            LD      (MS.CMD),A
            CALL    MO.MONI
            RET

K1.FL:      CALL    K1.MVS              ;Fehlerzeile loeschen
            LD      HL,(K2.FKADR)
            LD      DE,K1.ADRK4
            CALL    K1.MONI
            CALL    K1.MVL
            RET
;****************************************************************
;*  K M B G      Monitorvektor retten und wiederherstellen      *
;***************************************************************
K1.MVS:     LD      HL,MS.ZPOL
            LD      DE,K2.RBER
            LD      BC,21
            LDIR
            LD      HL,K1.ZMIN
            LD      DE,MS.ZMIN
            LD      BC,10
            LDIR
            RET

K1.MVL:     LD      HL,K2.RBER
            LD      DE,MS.ZPOL
            LD      BC,21
            LDIR
            RET

K1.ZPR2:    PUSH    HL
            PUSH    BC
            RLD
            AND     0FH
            ADD     A,30H
            CP      3AH
            JR      C,K1.ZPR3
            ADD     A,7
K1.ZPR3:    POP     BC
            POP     HL
            RET

            PAGE
;****************************************************************
;*  K M B G      Anzeige Geraetefehler                          *
;****************************************************************
K1.ERRT:    CALL    K1.MVS
            LD      HL,K1.ADRK1
            LD      DE,K2.ADRK
            LD      BC,38
            LDIR
            PUSH    IX
            PUSH    IX
            LD      IX,K2.ADRK
            POP     HL                  ;Statusaufbereitung
            CALL    K1.ZPR2
            LD      (IX+20),A
            CALL    K1.ZPR2
            LD      (IX+21),A
            LD      (HL),0              ;reset status
            INC     HL                  ;Fehleraufbereitung
            CALL    K1.ZPR2
            LD      (IX+34),A
            CALL    K1.ZPR2
            LD      (IX+35),A
            LD      (HL),0              ;reset fehler
            LD      HL,(K2.FKADR)
            LD      DE,K2.ADRK
            CALL    K1.MONI
            POP     IX
            CALL    K1.MVL
            CALL    K1.GNSTS
            XOR     A                   ;Tastaturroutine ruecksetzen auf Tasteneingabe
            LD      (TS.MIO),A
            LD      HL,(K2.FRADR)
            JP      (HL)
;****************************************************************
;*  K M B G    Anzeige STATUS                                   *
;****************************************************************
K1.GNSTS:   CALL    K1.MVS
            LD      L,(IY-4)            ;RCZ:=RCZx
            LD      H,(IY-3)
            LD      (K2.RCZ),HL
            LD      L,(IY-2)            ;BLK:=BLKx
            LD      H,(IY-1)
            LD      (K2.BLK),HL
            LD      HL,K1.ADRK2
            LD      DE,K2.ADRK
            LD      BC,38
            LDIR
            LD      DE,K2.ADRK+6
            LD      A,(IX+3)            ;Geraeteadressenaufbereitung
            ADD     A,30H
            LD      (DE),A
            LD      HL,(K2.BLK)         ;Blockzaehleraufbereitung
            LD      DE,K2.ADRK+17
            CALL    S1.HDI
            LD      HL,(K2.RCZ)         ;Satzzaehleraufbereitung
            LD      DE,K2.ADRK+31
            CALL    S1.HDI
            LD      HL,(K2.SKADR)
            LD      DE,K2.ADRK
            CALL    K1.MONI
            CALL    K1.MVL
            RET
            TITLE   'K M B G  reservieren ein/aus und rewind'

;****************************************************************
;*  K M B G    Reservieren Geraet x ein                         *
;****************************************************************
K1.GNRE1:   LD      (IX+4),31H          ;CMD reservieren ein
            CALL    K1.ARMB
            BIT     4,(IX)
            CALL    NZ,K1.ERRT
            RET
K1.GNRE:    CALL    K1.GNRE1
            CALL    K1.GNRE1
            CALL    K1.FL
            BIT     1,(IX-1)
            RET     NZ
            CALL    K1.RCZN             ;RCZx:=0
            LD      (IY-1),A            ;BLKx:=1
            INC     A
            LD      (IY-2),A
            SET     1,(IX-1)
            RET
;****************************************************************
;*  K M B G    Reservieren Geraet x aus                         *
;****************************************************************
K1.GNRA:    LD      (IX+4),41H          ;CMD reservieren aus
            CALL    K1.ARMB
            CALL    K1.ARBT
            RES     1,(IX-1)            ;OPEN-bit           zuruecksetzen
            RES     2,(IX-1)            ;Richtungsbit       zuruecksetzen
            RES     3,(IX-1)            ;Verarbeitungsbit   zuruecksetzen
            RES     4,(IX-1)            ;Konvertierungsbit  zuruecksetzen
            RET
;****************************************************************
;*  K M B G    REWIND - Routine                                 *
;****************************************************************
K1.GNRW:    CALL    K1.RW3
            CALL    K1.RCZN             ;RCZx:=0
            LD      (IY-1),A            ;BLKx:=1
            INC     A
            LD      (IY-2),A
            CALL    K1.FL
            RET
K1.RW3:     LD      (IX+4),21H          ;CMD  rewind
            CALL    K1.ARMB
K1.RW1:     CALL    K1.BERT
            RET     NC
            JR      K1.RW1

K1.BERT:    CALL    S0.KRZU
;            CALL    0   ;??? KR.BERT
            CALL    S2.STACK
            RET

            TITLE   'K M B G  set RCD +- 1'
            PAGE
;****************************************************************
;*  K M B G    set record + 1                                   *
;****************************************************************
K1.GNRP:    LD      (IX+4),02H          ;CMD wiedergabe
            CALL    K1.ARMB
            CALL    K1.ARBT
            CALL    K1.RCZP
            CALL    K1.BM               ;RCD = BM ?
            LD      B,0
            RET     NZ
            INC     B
            CALL    K1.BLKP
            CALL    K1.RCZN             ;RCZx:=0
            RET
;****************************************************************
;*  K M B G    set record - 1                                   *
;****************************************************************
K1.GNRM:    LD      (IX+4),15H          ;CMD einen block zurueck
            CALL    K1.ARMB
            CALL    K1.ARBT
            LD      (IX+4),02H          ;CMD wiedergabe
            CALL    K1.ARMB
            CALL    K1.ARBT
            LD      (IX+4),15H          ;CMD einen block zurueck
            CALL    K1.ARMB
            CALL    K1.ARBT
            CALL    K1.RCZM
            CALL    K1.BM                  ;RCD = BM ?
            LD      B,0
            RET     NZ
            INC     B
            CALL    K1.BLKM
            LD      A,0FFH              ;RCZx:=FFFFH
            CALL    K1.RCZS
            RET

            TITLE   'K M B G  suche BM'
            PAGE
;****************************************************************
;*  K M B G    suchen Bandmarke                                 *
;****************************************************************
K1.GNLP:    LD      D,1                 ;vorwaerts     ====>
K1.GNLPN:   PUSH    DE
            LD      A,(IY-3)            ;RCZx = 0 ?
            OR      (IY-4)
            JR      Z,K1.LP2
            LD      A,(IY-1)            ;RCZx > 0 , BLKx = 1 ?
            OR      A
            JR      NZ,K1.LP1
            LD      A,(IY-2)
            CP      1
            JR      NZ,K1.LP1
            CALL    K1.RW3              ;BLKx = 1
            JR      K1.LP2
K1.LP1:     LD      A,1                 ;BLKx > 1
            LD      B,75H
            CALL    K1.RW4
K1.LP2:     POP     AF
            OR      A
            JR      Z,K1.LP3
            PUSH    AF
            LD      B,71H
            CALL    K1.RW4
            POP     BC                  ;BLKx := BLKx + N
            CALL    K1.BLKP
            DJNZ    $-3
K1.LP3:     CALL    K1.RCZN             ;RCZx := 0
            RET
K1.GNLM:    LD      D,1                 ;rueckwaerts   <====
K1.GNLMN:   LD      A,(IY-1)
            OR      A
            JR      NZ,K1.LM1
            LD      A,(IY-2)
            DEC     A                   ;A := i-1
            SUB     D                   ;A := i-1-N
            JP      Z,K1.GNRW
            JP      P,K1.LM1
            JP      K1.GNRW
K1.LM1:     LD      A,(IY-3)            ;RCZx = 0 ?
            OR      (IY-4)
            PUSH    DE
            JR      Z,K1.LM2
            INC     D
K1.LM2:     LD      A,D
            LD      B,75H
            CALL    K1.RW4
            POP     BC                  ;BLKx := BLKx - N
            LD      A,B
            OR      A
            JR      Z,K1.LM3
            CALL    K1.BLKM
            DJNZ    $-3
K1.LM3:     JR      K1.LP3
K1.RW4:     OR      A                   ;Anzahl Bandmarken = 0 ?
            RET     Z
            LD      (IX+4),B            ;Kommando
            LD      (IX+9),0
            LD      (IX+10),A           ;Anzahl Bandmarken
            CALL    K1.ARMB
            CALL    K1.ARBT
            RET
            TITLE   'K M B G   CLOSE'

;****************************************************************
;*  K M B G    CLOSE - Routine                                  *
;****************************************************************
K1.GNCLS:   LD      (IX+4),51H          ;CMD write BM
            CALL    K1.ARMB
            CALL    K1.ARBT
            LD      (IX+4),61H          ;CMD write end of volume
            CALL    K1.ARMB
            CALL    K1.ARBT
            LD      (IX+4),15H          ;CMD ein block zurueck
            CALL    K1.ARMB
            CALL    K1.ARBT
            LD      (IX+4),11H          ;CMD ein block vor
            CALL    K1.ARMB
            CALL    K1.ARBT
K1.RD1:     CALL    K1.BLKP
            JR      K1.LM3

            TITLE   'K M B G  READ-Routinen'
            PAGE
;****************************************************************
;*  K M B G    READ - Routine : einen Block ===> KS.PUFFS       *
;****************************************************************
K1.GNRD:    LD      (IX+4),02H          ;CMD  wiedergabe
            CALL    K1.ARMB
            CALL    K1.F17
            CALL    K1.ARBT
            CALL    K1.BM
            JR      Z,K1.RD1
            CALL    K1.RCZP
K1.PUFT:    CALL    S0.KRZU             ;Kass.puffer V1.1 aktivieren
            CALL    K1.LHLBC            ;Kass.puffer V1.1 ===> V2.1
            LD      DE,KS.PUFFS+1
            LD      (IX+8),D
            LD      (IX+7),E
            LDIR
            CALL    S2.STACK            ;Kass.puffer V1.1 entaktivieren
            RET

;****************************************************************
;*  K M B G    READ - Routine :  Speicherbereich fuellen        *
;****************************************************************
K1.GNRDR:   LD      HL,(K2.TXANF)
            LD      (K2.TXOP),HL

K1.GNRZ:    LD      HL,(K2.TXEND)
            LD      BC,(K2.TXOP)
            OR      A
            SBC     HL,BC
            JR      Z,K1.GNRZE
            JP      M,K1.GNRZE
            BIT     3,(IX-1)            ;Verarbeitungsbit  NL/SL  ?
            JR      NZ,$+7
            LD      BC,256              ;no       label
            JR      $+5
            LD      BC,128              ;standard label
            SBC     HL,BC
            JP      M,K1.GNRZE

            CALL    K1.GNRD

            CALL    K1.BM
            JR      Z,K1.GNRZE
            CALL    K1.LHLBC
            LD      DE,(K2.TXOP)
            LDIR
            LD      (K2.TXOP),DE
            JR      K1.GNRZ

K1.GNRZE:   LD      HL,(K2.TXOP)
            LD      (K2.TXEND),HL
            RET

            TITLE   'K M B G  WRITE-Routinen'
            PAGE
;****************************************************************
;*  K M B G    WRITE - Routine :  einen Block schreiben         *
;****************************************************************
K1.GNWR:    CALL    K1.LHLBC            ;Ausgabeblock ==> KS.PUFFS von V2
            LD      DE,KS.PUFFS+1
            LD      (IX+8),D
            LD      (IX+7),E
            LDIR
            PUSH    HL
            LD      (IX+4),00H          ;CMD write record mit RAW
            CALL    K1.ARMB
            CALL    K1.ARBT
            CALL    K1.RCZP
            POP     HL
            LD      (IX+8),H
            LD      (IX+7),L
            RET
;****************************************************************
;*  K M B G    WRITE - Routine :   einen Block zurueckschreiben *
;****************************************************************
K1.GNRWR:   PUSH    HL                  ;Pufferadresse
            PUSH    BC                  ;Pufferlaenge
            LD      (IX+4),2            ;CMD  wiedergabe
            CALL    K1.ARMB
            CALL    K1.F17
            CALL    K1.ARBT
            CALL    K1.RCZP
            POP     HL                  ;neue Blocklaenge
            PUSH    HL
            LD      B,(IX+9)            ;alte Blocklaenge
            LD      C,(IX+10)
            OR      A
            SBC     HL,BC               ;alte = neue Blocklaenge ?
            JR      NZ,K1.GNRW3         ;Z-FF=0 ... Block nicht zur.geschr.
            LD      (IX+4),15H          ;CMD ein block zurueck
            CALL    K1.ARMB
            CALL    K1.ARBT
            POP     BC
            POP     HL
K1.GNRW2:   LD      DE,KS.PUFFS+1
            LD      (IX+8),D
            LD      (IX+7),E
            LD      (IX+9),B
            LD      (IX+10),C
            LDIR
K1.GNRW1:   LD      (IX+4),8            ;CMD write record ohne RAW
            CALL    K1.ARMB
            CALL    K1.ARBT
            XOR     A                   ;Z-FF=1 ... Block zurueckgeschr.
            RET
K1.GNRW3:   POP     BC
            POP     HL
            RET

            PAGE
;****************************************************************
;*  K M B G    WRITE - Routine :  aus Speicherbereich ausgeben  *
;****************************************************************
K1.GNWRT:   LD      HL,(K2.TXANF)
            LD      (IX+7),L            ;Pufferadresse ===> E/A-Tabelle
            LD      (IX+8),H
            BIT     3,(IX-1)            ;Verarbeitungsbit  NL/SL  ?
            JR      NZ,$+7
            LD      HL,256              ;no       label
            JR      $+5
            LD      HL,128              ;standard label
            LD      (IX+9),H            ;Pufferlaenge  ===> E/A-Tabelle
            LD      (IX+10),L

K1.GNZKL:   LD      HL,(K2.TXEND)       ;Endeadresse Text
            LD      D,(IX+8)            ;operative Anfangsadresse
            LD      E,(IX+7)
            OR      A
            SBC     HL,DE               ;noch auszugeb. Textlaenge
            JR      Z,K1.WRTEN          ;Ende bei Textlaenge gleich Null
            JP      M,K1.WRTEN
            LD      (K2.BLZ),HL         ;merken Textlaenge
            BIT     3,(IX-1)            ;Verarbeitungsbit  NL/SL  ?
            JR      NZ,$+7
            LD      DE,256              ;no       label
            JR      $+5
            LD      DE,128              ;standard label
            OR      A
            SBC     HL,DE               ;Textlaenge groesser LRECL
            JP      P,K1.GNTS1
            ADD     HL,DE               ;reset
            LD      DE,32
            OR      A
            SBC     HL,DE
            JP      P,K1.GNTS2          ;Satz groesser 32 Byte
; Korrektur fuer Saetze kleiner 32 Byte
            LD      A,32                ;L-Teil der Textlaenge
            LD      (K2.BLZ),A
; Modifikation Record-Laenge
K1.GNTS2:   LD      A,(K2.BLZ)
            LD      (IX+9),0            ;Ausgabelaenge setzen
            LD      (IX+10),A
; Ausgabe eines Blockes
K1.GNTS1:   CALL    K1.GNWR
            JR      K1.GNZKL
; Aufrufende
K1.WRTEN:   RET

            TITLE   'K M B G  Komplex-Routinen Teil I '
            PAGE
;****************************************************************
;*  K M B G      K o m p l e x - R o u t i n e n  Teil I        *
;*                zum Aufruf der Kassettengrundroutinen         *
;****************************************************************
            DW      $                   ;K 1 R E   ---   K 2 R E
            DB      'K1RE'
            CALL    K1.RGL1
            JR      K1.SRV

            DW      $
            DB      'K2RE'
            CALL    K1.RGL2
K1.SRV:     CALL    K1.GNRE
            JR      K1.STS



            DW      $                   ;K 1 R A   ---   K 2 R A
            DB      'K1RA'
            CALL    K1.RGL1
            JR      K1.UNL

            DW      $
            DB      'K2RA'
            CALL    K1.RGL2
K1.UNL:     CALL    K1.GNRE
            CALL    K1.GNRW
            CALL    K1.GNRA
            JR      K1.STS



            DW      $                   ;K 1 R W   ---   K 2 R W
            DB      'K1RW'
            CALL    K1.RGL1
            JR      K1.RV1

            DW      $
            DB      'K2RW'
            CALL    K1.RGL2
K1.RV1:     CALL    K1.GNRW
            JR      K1.STS

            PAGE
            DW      $                   ;K 1 C L   ---   K 2 C L
            DB      'K1CL'
            CALL    K1.RGL1
            JR      K1.CLS

            DW      $
            DB      'K2CL'
            CALL    K1.RGL2
K1.CLS:     CALL    K1.GNCLS
            JR      K1.STS



            DW      $                   ;K 1 S T   ---   K 2 S T
            DB      'K1ST'
            CALL    K1.RGL1
            JR      K1.STS

            DW      $
            DB      'K2ST'
            CALL    K1.RGL2
K1.STS:     CALL    K1.GNSTS
            POP     HL                  ;Ruecksprung zum System
            POP     HL
            RET



            DW      $                   ;K 1 R +   ---   K 2 R +
            DB      'K1R+'
            CALL    K1.RGL1
            JR      K1.RP

            DW      $
            DB      'K2R+'
            CALL    K1.RGL2
K1.RP:      CALL    K1.GNRP
            JR      K1.STS



            DW      $                   ;K 1 R -   ---   K 2 R -
            DB      'K1R-'
            CALL    K1.RGL1
            JR      K1.RM

            DW      $
            DB      'K2R-'
            CALL    K1.RGL2
K1.RM:      CALL    K1.GNRM
            JR      K1.STS

            PAGE
            DW      $                   ;K 1 L +   ---   K 2 L +
            DB      'K1L+'
            CALL    K1.RGL1
            JR      K1.LP

            DW      $
            DB      'K2L+'
            CALL    K1.RGL2
K1.LP:      CALL    K1.GNLP
            JR      K1.STS



            DW      $                   ;K 1 L -   ---   K 2 L -
            DB      'K1L-'
            CALL    K1.RGL1
            JR      K1.LM

            DW      $
            DB      'K2L-'
            CALL    K1.RGL2
K1.LM:      CALL    K1.GNLM
K1.STS1:    JR      K1.STS



            DW      $                   ;K 1 Y     ---   K 2 Y
            DB      'K1Y '
            CALL    K1.RGL1
            JR      K1.WR1

            DW      $
            DB      'K2Y '
            CALL    K1.RGL2
K1.WR1:     LD      HL,(S2.TPA)
            LD      (K2.TXANF),HL
            LD      HL,(S2.END)
            LD      (K2.TXEND),HL
            CALL    K1.GNWRT
            JR      K1.STS1

            PAGE
            DW      $                   ;K 1 X A   ---   K 2 X A
            DB      'K1XA'
            CALL    K1.RGL1
            JR      K1.XA

            DW      $
            DB      'K2XA'
            CALL    K1.RGL2
K1.XA:      LD      HL,(S2.TPA)
K1.XA1:     LD      (K2.TXANF),HL
            LD      HL,(S2.TPE)
            LD      (K2.TXEND),HL
            CALL    K1.GNRDR
            LD      HL,(K2.TXEND)
            LD      (S2.END),HL
            JR      K1.STS1



            DW      $                   ;K 1 X E   ---   K 2 X E
            DB      'K1XE'
            CALL    K1.RGL1
            JR      K1.XE

            DW      $
            DB      'K2XE'
            CALL    K1.RGL2
K1.XE:      LD      HL,(S2.END)
            INC     HL
            JR      K1.XA1

            TITLE   'K M B G  Komplex-Routinen Teil II'
            PAGE
;****************************************************************
;*  K M B G      K o m p l e x - R o u t i n e n   Teil II      *
;****************************************************************

;****************************************************************
;*               E i n g a b e - P u f f e r    fuellen         *
;****************************************************************
K1.EIN:     LD      HL,S0.PFFI          ;Eingabeparameter:
            PUSH    HL                  ; BC  ...  zu belegender Puffer
            PUSH    HL
            LD      (K2.TXANF),HL
            LD      (S2.POIE),HL
            ADD     HL,BC
            LD      (K2.TXEND),HL
            POP     HL                  ;Puffer loeschen
            POP     DE
            CALL    K1.FU
            CALL    K1.GNRDR            ;Puffer fuellen
            CALL    K1.GNSTS
            RET

K1.EINP:    CALL    K1.GNRD             ;einen Block einlesen in den Eingabepuffer
K1.EINP1:   LD      HL,S0.PFFI
            PUSH    HL
            PUSH    HL
            POP     DE
            CALL    K1.FU
            CALL    K1.LHLBC
            POP     DE
            LD      (S2.POIE),DE
            LD      A,B
            OR      C
            JR      Z,K1.EINP2
            LDIR
K1.EINP2:   CALL    K1.GNSTS
            RET
;****************************************************************
;*               A u s g a b e - P u f f e r   leeren           *
;****************************************************************
K1.AUS:     LD      HL,(S2.POIA)
            LD      (K2.TXEND),HL
            LD      HL,S0.PFFA
            PUSH    BC
            PUSH    HL
            PUSH    HL
            LD      (K2.TXANF),HL
            LD      (S2.POIA),HL
            CALL    K1.GNWRT
            CALL    K1.GNSTS
            POP     HL
            POP     DE
            CALL    K1.FU
            POP     BC
            RET

K1.FU:      INC     DE
            LD      BC,400H
            LD      (HL),00DH
            LDIR
            RET

            PAGE
;****************************************************************
;*               E i n g a b e z e i c h e n  ===>   A          *
;****************************************************************
K1.LESV:    PUSH    DE
            PUSH    HL
            LD      HL,(S2.POIE)
            LD      A,(HL)
            INC     HL
            LD      (S2.POIE),HL
            LD      DE,S0.PFFI+400H
            OR      A
            SBC     HL,DE
            PUSH    BC
            PUSH    AF
            LD      BC,400H
            CALL    Z,K1.EIN
            POP     AF
            POP     BC
            POP     HL
            POP     DE
            RET
;****************************************************************
;*               Zeichen im Register A ausgeben                 *
;****************************************************************
K1.SCHR:    PUSH    DE
            PUSH    HL
            LD      HL,(S2.POIA)
            LD      (HL),A
            INC     HL
            LD      (S2.POIA),HL
            LD      DE,S0.PFFA+400H
            OR      A
            SBC     HL,DE
            CALL    Z,K1.AUS
            POP     HL
            POP     DE
            RET

            PAGE
;****************************************************************
;*               Zugriff auf  M R E S - Katalog                 *
;****************************************************************
K1.MRCAT:   CALL    K1.GNRE
            CALL    K1.GNRW
            LD      D,2                 ;auf Verzeichnisbloecke pos.
            CALL    K1.GNLPN
            CALL    K1.GNRD             ;ersten zwei Verz.eintr. einlesen
            CALL    K1.GNRD
            LD      A,(KS.PUFFS+2)      ;naechste freie Datei
            PUSH    AF
            LD      A,(KS.PUFFS+4)      ;Anzahl Dateien
            DEC     A
            JR      Z,K1.MRC5
            LD      B,A
K1.MRC1:    PUSH    BC
            PUSH    IX
            CALL    K1.GNRD             ;einen       Verz.eintr. einlesen
            LD      HL,KS.PUFFS+1
            PUSH    HL
            POP     IX
            LD      A,(IY+6)            ;Dateityp
            CP      (IX+6)
            JR      NZ,K1.MRC3
            LD      A,(IY+7)            ;Dateiattribut
            CP      ' '
            JR      Z,K1.MRC2
            CP      (IX+7)
            JR      NZ,K1.MRC3
K1.MRC2:    PUSH    IY                  ;Dateiname
            POP     DE
            LD      B,6
            CALL    S1.VERGL
            JR      Z,K1.MRC4
K1.MRC3:    POP     IX
            POP     BC
            DJNZ    K1.MRC1
K1.MRC5:    CALL    K1.GNSTS
            POP     DE
            SCF                         ;CY=1  keine Datei vorhanden
            RET
K1.MRC4:    LD      D,(IX+17H)
            POP     IX
            PUSH    DE
            CALL    K1.GNSTS
            POP     DE
            POP     BC
            POP     BC
            SCF                         ;CY=0        Datei vorhanden
            CCF
            RET

            PAGE
;****************************************************************
;*          M R E S  Eingabedatei eroeffnen                     *
;****************************************************************
K1.MREPO:   CALL    K1.MRCAT
            JR      NC,K1.MRPO4
            CALL    K1.GNRW             ;Datei nicht im Verzeichnis
            CALL    K1.GNRA
            CALL    K1.GNSTS
            LD      A,1
            OR      A                   ;Z-FF = 0
            RET

K1.MRPO4:   PUSH    DE                  ;Dateifolgenummer
            LD      A,2
            ADD     A,D
            PUSH    AF
            CALL    K1.GNRW
            POP     DE
            CALL    K1.GNLPN
            CALL    K1.GNRD             ;Verzeichnissatz der Datei einlesen
            LD      HL,KS.PUFFS+1
            POP     AF
            CP      (HL)
            JR      Z,K1.MRPO5

K1.MRPO3:   CALL    K1.GNRW             ;Datei nicht richtig pos.
            CALL    K1.GNRA
            LD      A,2
            OR      A                   ;Z-FF = 0
            RET

K1.MRPO5:   SET     1,(IX-1)            ;OPEN bit          setzen
            SET     3,(IX-1)            ;Verarbeitungsbit  setzen
            LD      BC,400H             ;Eingabepuffer fuellen
            CALL    K1.EIN
            XOR     A                   ;Z-FF = 1
            RET

            PAGE
;****************************************************************
;*               M R E S  Ausgabedatei eroeffnen                *
;****************************************************************
K1.MRAPO:   CALL    K1.MRCAT
            JR      NC,K1.MRAP2

K1.MRAP4:   PUSH    DE                  ;(D) ... zu positionierende Datei
            LD      A,2
            ADD     A,D
            PUSH    AF
            CALL    K1.GNRW
            POP     DE
            CALL    K1.GNLPN
            CALL    K1.GNRD
            LD      HL,KS.PUFFS+1
            POP     AF
            CP      (HL)
            JR      NZ,K1.MRPO3         ;Datei nicht richtig pos.
            LD      (IY+17H),A          ;Dateinummer
            LD      HL,S0.PFFA          ;Ausgabe - Pointer setzen
            LD      (S2.POIA),HL
            PUSH    HL
            POP     DE
            CALL    K1.FU
K1.MRAP1:   SET     1,(IX-1)            ;OPEN bit          setzen
            SET     2,(IX-1)            ;Richtungsbit      setzen
            SET     3,(IX-1)            ;Verarbeitungsbit  setzen
            XOR     A                   ;Z-FF = 1
            RET

K1.MRAP2:   LD      (S2.RBBR),DE        ;Dateiname schon vergeben
            LD      HL,LO.TXT11
            LD      DE,K1.MRAP3
            LD      BC,K1.MRAP5
            LD      (TS.STACK),SP
            JP      S1.FEHRR

K1.MRAP3:   LD      A,(S2.RBBR+1)       ;POS QUIT
            LD      D,A
            POP     HL
            POP     HL
            JR      K1.MRAP4

K1.MRAP5:   CALL    K1.GNRW             ;NEG QUIT
            CALL    K1.GNRA
            LD      A,3
            OR      A                   ;Z-FF = 0
            RET

            PAGE
;****************************************************************
;*               M R E S  Ausgabedatei abschliessen und         *
;*                        Verzeichniseintrag realisieren        *
;****************************************************************
K1.MRCLS:   LD      (IX+7),LOW(S0.PFFA)   ;Pufferadresse
            LD      (IX+8),HIGH(S0.PFFA)
            LD      (IX+9),0            ;Blocklaenge eintragen
            LD      (IX+10),80H
K1.MRCL1:   CALL    K1.GNWR
            LD      HL,(S2.POIA)
            LD      D,(IX+8)
            LD      E,(IX+7)
            OR      A
            SBC     HL,DE
            JR      Z,K1.MRCL2
            JP      P,K1.MRCL1

K1.MRCL2:   LD      H,(IY-3)            ;Satzanzahl im Verzeichnisblock merken
            LD      L,(IY-4)
            DEC     HL
            LD      (IY+25),L
            LD      (IY+26),H
            CALL    K1.GNCLS            ;Bandmarke schreiben

            LD      HL,KS.PUFFS+1       ;1.Satz der naechsten Datei aufb.
            LD      (IX+8),H            ;Ausgabeadresse
            LD      (IX+7),L
            LD      (IX+10),32          ;Ausgabelaenge
            LD      DE,KS.PUFFS+2
            LD      BC,31
            LD      (HL),0
            LDIR
            LD      A,(IY+17H)          ;Dateinummer
            INC     A
            LD      (KS.PUFFS+1),A
            CALL    K1.GNWR                ;Verz.satz ausgeben
            CALL    K1.GNSTS

            PAGE
            CALL    K1.GNRW             ;Kassette auf Verzeichnis pos.
            LD      D,2
            CALL    K1.GNLPN
            CALL    K1.GNRD             ;Ausgleich-Satz
            CALL    K1.GNRD             ;DS       -Satz
            LD      A,(KS.PUFFS+4)      ;auf Verzeichnissatz pos.
            LD      B,A
            LD      A,1
K1.MRCL3:   INC     A
            PUSH    AF
            PUSH    BC
            CALL    K1.GNRD
            LD      A,(KS.PUFFS+18H)
            CP      (IY+17H)
            POP     BC
            JR      Z,K1.MRCL4
            POP     AF
            DJNZ    K1.MRCL3
            PUSH    AF
K1.MRCL4:   CALL    K1.GNRM
            PUSH    IY                  ;aktuelles Datum in  KSK  eintragen
            POP     HL
            LD      BC,14
            ADD     HL,BC
            EX      DE,HL
            LD      HL,S3.DATUM-S3.SEAT
            LD      BC,S0.DEAT
            ADD     HL,BC
            LD      BC,6
            LDIR
            LD      (IY+20),S0.V1       ;System-Signum eintragen
            LD      (IY+21),S0.V2
            LD      (IY+22),S0.V3
            LD      (IY+24),0
            PUSH    IY
            POP     HL
            LD      BC,32
            CALL    K1.GNRWR
            CALL    K1.GNSTS
            CALL    K1.GNRW             ;DS - Satz korrigieren
            LD      D,2
            CALL    K1.GNLPN
            CALL    K1.GNRD
            CALL    K1.GNRD
            LD      A,(IY+17H)          ;naechste freie Datei
            INC     A
            LD      (KS.PUFFS+2),A
            POP     AF                  ;Anzahl Verzeichniseintraege
            LD      (KS.PUFFS+4),A
            CALL    K1.LHLBC
            LD      DE,S0.PFFA
            LDIR
            CALL    K1.GNRM
            CALL    K1.GNRM
            CALL    K1.GNRP
            LD      HL,S0.PFFA
            LD      BC,32
            CALL    K1.GNRW2
            CALL    K1.GNRW
            CALL    K1.GNRA
            RET
            TITLE   'K M B G  Komplex-Routinen Teil III'
            PAGE
;****************************************************************
;*  K M B G      K o m p l e x - R o u t i n e n   Teil III     *
;****************************************************************
            DW      $                   ;X K A 1  n   ---   X K A 2  n
            DB      'XKA1'
            CALL    K1.RGL1
            JR      K1.M0

            DW      $
            DB      'XKA2'
            CALL    K1.RGL2
K1.M0:      LD      H,7                 ;SPOL= 8
            LD      L,S0.SYSZ-1         ;ZPOL=SYSZ
            LD      (MS.ZPOL),HL
            LD      HL,K2.ADRK
            LD      B,6
            LD      A,44
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      DE,K2.ADRK
            CALL    S1.IDH
            LD      A,L
            LD      (K2.PTADR),A
            LD      HL,(S2.TPA)
            LD      (K2.TXANF),HL
            LD      HL,(S2.TPE)
            LD      (K2.TXEND),HL
            CALL    K1.GNRE
            CALL    K1.GNRW
            LD      A,(K2.PTADR)
            DEC     A
            JR      Z,K1.M2
            LD      D,A
            CALL    K1.GNLPN
K1.M2:      CALL    K1.GNRDR
            LD      HL,(K2.TXEND)
            LD      (S2.END),HL
            CALL    K1.GNRW
            CALL    K1.GNRA
            JP      K1.STS

            PAGE
            DW      $                   ;Y K A 1  n   ---   Y K A 2  n
            DB      'YKA1'
            CALL    K1.RGL1
            JR      K1.M3

            DW      $
            DB      'YKA2'
            CALL    K1.RGL2
K1.M3:      LD      H,7                 ;SPOL= 8
            LD      L,S0.SYSZ-1         ;ZPOL=SYSZ
            LD      (MS.ZPOL),HL
            LD      HL,K2.ADRK
            LD      B,6
            LD      A,44
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      DE,K2.ADRK
            CALL    S1.IDH
            LD      A,L
            LD      (K2.PTADR),A
            LD      HL,(S2.TPA)
            LD      (K2.TXANF),HL
            LD      HL,(S2.END)
            LD      (K2.TXEND),HL
            CALL    K1.GNRE
            CALL    K1.GNRW
            LD      A,(K2.PTADR)
            DEC     A
            JR      Z,K1.M5
            LD      D,A
            CALL    K1.GNLPN
K1.M5:      CALL    K1.GNWRT
            CALL    K1.GNCLS
            CALL    K1.GNRW
            CALL    K1.GNRA
K1.M6:      JP      K1.STS

            PAGE
;****************************************************************
;*               Systemkommandos fuer  MRES - OPEN/CLOSE        *
;****************************************************************
            DW      $                   ;K 1 M E   ---   K 2 M E
            DB      'K1ME'
            CALL    K1.RGL1
            JR      K1.ME1

            DW      $
            DB      'K2ME'
            CALL    K1.RGL2
K1.ME1:     CALL    K1.MREPO
K1.ME2:     JR      K1.M6



            DW      $                   ;K 1 M A   ---   K 2 M A
            DB      'K1MA'
            CALL    K1.RGL1
            JR      K1.ME3

            DW      $
            DB      'K2MA'
            CALL    K1.RGL2
K1.ME3:     CALL    K1.MRAPO
            JR      K1.ME2



            DW      $                   ;K 1 M C   ---   K 2 M C
            DB      'K1MC'
            CALL    K1.RGL1
            JR      K1.ME4

            DW      $
            DB      'K2MC'
            CALL    K1.RGL2
K1.ME4:     CALL    K1.MRCLS
            JR      K1.ME2

            PAGE
;****************************************************************
;*  K M B G      T e s t a u f r u f  von   BRKMB               *
;****************************************************************
            DW      $                   ;K M B G
            DB      'KMBG'
            LD      IX,S3.KS1-S3.SEAT
            LD      DE,S0.DEAT+3
            ADD     IX,DE
            CALL    K1.ARMBM
            POP     HL
            POP     HL
            RET



K1.ZMIN:    DB      1
            DB      1
            DB      S0.ZANZ
            DB      S0.SPANZ
            DB      S0.ZANZ
            DB      S0.SPANZ
            DW      S0.BWSA
            DB      0C0H
            DB      0C0H



;           END
;           PN      LO28
            TITLE   'LOADer / SAVE fuer MRES - Dateien'
            PAGE
;****************************************************************
;*               absoluter LOADer fuer  M R E S - P   - Dateien *
;*               relativer LOADer fuer  M R E S - R/O - Dateien *
;*                         SAVE   fuer  M R E S - P   - Dateien *
;*  Version      -----------------------------------------------*
;*               Programmierer: M. Herbote --- K EAW  ZFT (WFT) *
;*  V 2 . 1      -----------------------------------------------*
;*               Stand        : 09.November 1984                *
;****************************************************************
            TITLE   'abs. / rel. LOADer'
            DB      'V2.1/091184'

            DW      $
            DB      'LP1 '
            LD      A,1
            JR      LO.LO11

            DW      $
            DB      'LP2 '
            LD      A,2
LO.LO11:    LD      (S2.RBBR),A
            LD      A,1
            LD      (S2.RBBR+1),A
            CALL    LO.LOEIN

LO.LO1:     CALL    S1.ANZEI            ;Eingabe des Dateinamens
            DB      S0.SYSZ+1           ;ZPOS=SYSZ+2
            DB      21                  ;SPOS=22
            DB      0
            DB      6                   ;Eingabelaenge
            DB      10101010B           ;TS.SPMER
            DW      0                   ;NEG QUIT
            DW      LO.LO2              ;POS QUIT
            DW      LO.EIN              ;EINA

LO.EIN:     CP      ','                 ;Tastenroutine alphanum. Tasten
            RET     Z
            JP      S1.AEIN

LO.LOEIN:   CALL    S1.ANZEI            ;Anzeige: MRES - Eingabedatei:
            DB      S0.SYSZ+1           ;ZPOS=SYSZ+2
            DB      0                   ;SPOS=1
            DB      21+80H              ;Textlaenge
            DW      LO.TXT1
            DB      0                   ;Eingabelaenge
            RET

LO.LOAUS:   CALL    LO.LOEIN
            CALL    S1.ANZEI            ;Anzeige: MRES - Ausgabedatei:
            DB      S0.SYSZ+1           ;ZPOS=SYSZ+2
            DB      7                   ;SPOS= 8
            DB      3+80H               ;Textlaenge
            DW      LO.TXT15
            DB      0                   ;Eingabelaenge
            RET

            PAGE
LO.LO2:     PUSH    BC
            PUSH    HL
            CALL    LO.RGL
LO.LO4:     PUSH    IY                  ;Programmname aus BWS uebernehmen
            POP     DE
            POP     HL
            POP     BC
            LDIR
            EX      DE,HL
            LD      A,(S2.RBBR+1)       ;Abfrage, ob abs. oder rel. LOAD
            CP      2
            JR      Z,LO.LO8
            LD      (HL),'P'            ;Dateityp   in PAR-Bereich eintr.
            INC     HL
            LD      (HL),' '            ;Dateiattr. in PAR-Bereich eintr.
            LD      A,(S2.RBBR+1)       ;Abfrage, ob LOAD oder SAVE
            CP      3
            JP      Z,LO.SAV4

            CALL    LO.AL               ;posit. und laden der Datei

            JR      Z,LO.LO7
LO.LO13:    CP      2
            JR      Z,LO.LO5
            LD      HL,LO.TXT9
            JR      LO.LO6

LO.LO5:     LD      HL,LO.TXT10
LO.LO6:     LD      DE,(K2.FRADR)
            JP      S1.FEHR

LO.LO7:     PUSH    DE
            LD      A,D                 ;Startadresse vorhanden ?
            OR      E
            JP      Z,S1.SYSTB

LO.LO14:    CALL    S1.ANZEI            ;Anzeige: Programm starten ?
            DB      S0.SYSZ+2           ;ZPOS=SYSZ+3
            DB      0                   ;SPOS=1
            DB      21+80H
            DW      LO.TXT2
            DB      0

            CALL    TA.LOE              ;Tastaturaktivierung
            POP     HL                  ;POS QUIT
            LD      (TS.TAB4),HL
            LD      HL,S1.SYSTB         ;NEG QUIT
            LD      (TS.TAB3+4),HL
            LD      A,10000000B
            LD      (TS.SPMER),A
            RET

            PAGE
;****************************************************************
;*               Eintrittspunkt Relativloader                   *
;****************************************************************
            DW      $
            DB      'RLD1'
            LD      A,1
LO.LO12:    LD      (S2.RBBR),A
            LD      A,2
            LD      (S2.RBBR+1),A
            JP      LO.LO1-3

            DW      $
            DB      'RLD2'
            LD      A,2
            JR      LO.LO12

LO.LO8:     INC     HL                  ;Dateiattr. in PAR-Bereich eintragen
            LD      (HL),' '
            CALL    S1.ANZEI            ;Anzeige: MRES - Dateityp
            DB      S0.SYSZ+3           ;ZPOS=SYSZ+4
            DB      0                   ;SPOS=1
            DB      21+80H
            DW      LO.TXT7
            DB      1
            DB      10100000B
            DW      0
            DW      LO.LO15
            DW      LO.EIN2

LO.EIN2:    CP      'O'
            JR      Z,LO.EIN3
            CP      'R'
            RET     NZ
LO.EIN3:    JP      S1.AEIN

            PAGE
LO.LO15:    PUSH    BC
            PUSH    HL
            LD      A,(S2.RBBR)         ;Dateityp   in PAR-Bereich eintragen
            CP      2
            JR      Z,LO.LO18
            LD      HL,S3.KSK1-S3.SEAT
            JR      LO.LO19
LO.LO18:    LD      HL,S3.KSK2-S3.SEAT
LO.LO19:    LD      DE,S0.DEAT+10
            ADD     HL,DE
            EX      DE,HL
            POP     HL
            POP     BC
            LDIR
            LD      HL,LO.TXT3          ;Anzeige: Ladeanfangs-Adresse: 0000H
            LD      DE,LO.LO9
            LD      B,S0.SYSZ+4
            CALL    LO.TXT
            RET
LO.LO9:     LD      B,S0.SYSZ+4         ;Ladeanfangsadresse umwandeln
            CALL    LO.TR1
            LD      (S2.PRGN),DE
            LD      HL,LO.TXT5          ;Anzeige: Start      -Adresse: 0000H
            LD      DE,LO.LO10
            LD      B,S0.SYSZ+6
            CALL    LO.TXT
            RET
LO.LO10:    LD      B,S0.SYSZ+6         ;Startadresse umwandeln
            CALL    LO.TR1
            LD      (S2.PRGN+2),DE
            CALL    LO.RGL
            CALL    LO.RL               ;posit. und laden der Datei
            JP      NZ,LO.LO13          ;Sprung zur Fehlerbehandlung
            PUSH    HL
            LD      A,2
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      H,0                 ;Anzeige: Ladeende   -Adresse: 0000H
            LD      L,S0.SYSZ+5
            LD      (MS.ZPOS),HL
            LD      A,24
            LD      (MS.CMD),A
            LD      B,11
            LD      HL,LO.TXT4
            CALL    MO.MONI
            LD      B,15
            LD      HL,LO.TXT6
            CALL    MO.MONI
            LD      HL,S2.DM1           ;Ladeendeadresse umwandeln
            POP     DE
            LD      A,D
            CALL    S1.BHKON
            LD      A,E
            CALL    S1.BHKON
            LD      A,21                ;Ladeendeadresse anzeigen
            LD      (MS.SPOS),A
            LD      B,4
            LD      HL,S2.DM1
            CALL    MO.MONI
            LD      HL,(S2.PRGN+2)
            PUSH    HL
            JP      LO.LO14

            TITLE   'S A V E'
;****************************************************************
;*                  Eintrittspunkt  S A V E                     *
;****************************************************************
            DW      $
            DB      'SAVE'
            LD      A,3                 ;Merker SAVE
            LD      (S2.RBBR+1),A
            LD      H,7                 ;ZPOS=SYSZ , SPOS= 8
            LD      L,S0.SYSZ-1
            LD      (MS.ZPOS),HL
            LD      A,11                ;HL:=ZPOS,SPOS
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      A,(HL)              ;Geraetenummer
            AND     00FH
            LD      (S2.RBBR),A         ;Geraeteadresse
LO.SAV3:    CALL    LO.LOAUS
            JP      LO.LO1

LO.SAV4:    LD      B,6                 ;Kommentar eintragen
            INC     HL
            LD      (HL),' '
            DJNZ    $-3
            CALL    LO.RGL
            CALL    K1.MRAPO
            JR      Z,LO.SAV7
            CALL    K1.FL
            JP      S1.SYSTB

LO.SAV7:    LD      HL,LO.TXT12         ;Anzeige: SAVEanfangs-Adresse: 0000H
            LD      DE,LO.SAV8
            LD      B,S0.SYSZ+4
            CALL    LO.TXT
            RET

LO.SAV8:    LD      B,S0.SYSZ+4         ;SAVEanfangsadresse umwandeln
            CALL    LO.TR1
            LD      (S2.PRGN),DE
            LD      HL,LO.TXT13         ;Anzeige: SAVEende   -Adresse: 0000H
            LD      DE,LO.SAV9
            LD      B,S0.SYSZ+5
            CALL    LO.TXT
            RET

LO.SAV9:    LD      B,S0.SYSZ+5         ;SAVEendeadresse umwandeln
            CALL    LO.TR1
            LD      (S2.PRGN+2),DE
            CALL    LO.RGL
            CALL    LO.SAVE
            CALL    S1.ANZEI
            DB      S0.SYSZ+6
            DB      0
            DB      24+80H
            DW      LO.TXT14
            DB      1
            DB      10000000B
            DW      LO.SAV13
            DW      LO.SAV12
            DW      0

LO.SAV12:   LD      H,0                 ;weitere Bloecke
            LD      L,S0.SYSZ+1
            LD      (MS.ZMIN),HL
            LD      H,80
            LD      L,S0.SYSZ+6
            LD      (MS.ZMAX),HL
            LD      A,5
            LD      (MS.CMD),A
            CALL    MO.MONI
            JR      LO.SAV7

LO.SAV13:   LD      HL,LO.TXT5          ;keine weiteren Bloecke
            LD      DE,LO.SAV14
            LD      B,S0.SYSZ+7
            CALL    LO.TXT
            RET

LO.SAV14:   CALL    LO.RGL
            LD      B,S0.SYSZ+7         ;Startadress-Block ausgeben
            CALL    LO.TR1
            XOR     A
            CALL    K1.SCHR
            LD      A,D
            CALL    K1.SCHR
            LD      A,E
            CALL    K1.SCHR
            CALL    K1.MRCLS
            JP      S1.SYSTB

            TITLE   'Unterprogramme'
            PAGE
;****************************************************************
;*               Unterprogramm: absoluter LOAD                  *
;*               -----------------------------------------------*
;*               Eingabeparameter: K2.MRPAR ... Dateiname       *
;*                                          ... Dateityp    P   *
;*                                          ... Dateiattribut   *
;*               Ausgabeparameter: DE       ... Startadresse    *
;*                                 Z-FF = 1 ... normales Ende   *
;*                                 Z-FF = 0 ... abnorm.  Ende   *
;*                                 A    = 1 ... Datei nicht da  *
;*                                 A    = 2 ... Datei nicht pos.*
;****************************************************************
LO.AL:      CALL    K1.MREPO
            RET     NZ

LO.UW:      CALL    K1.LESV
            LD      B,A
            OR      A
            JR      Z,LO.UWEND
            CALL    K1.LESV
            LD      D,A
            CALL    K1.LESV
            LD      E,A
LO.UW1:     CALL    K1.LESV
            LD      (DE),A
            INC     DE
            DJNZ    LO.UW1
            JR      LO.UW

LO.UWEND:   CALL    K1.LESV
            LD      D,A
            CALL    K1.LESV
            LD      E,A
            PUSH    DE
            CALL    K1.GNRW
            CALL    K1.GNRA
            CALL    K1.GNSTS
            POP     DE
            XOR     A
            RET

            PAGE
;****************************************************************
;*               Unterprogramm: relativer LOAD                  *
;*               -----------------------------------------------*
;*               Eingabeparameter: K2.MRPAR ... Dateiname       *
;*                                          ... Dateityp  R / O *
;*                                          ... Dateiattribut   *
;*                                 S2.PRGN  ... Ladeanfangsadr. *
;*               Ausgabeparameter: HL       ... Ladeendeadresse *
;*                                 Z-FF = 1 ... normales Ende   *
;*                                 Z-FF = 0 ... abnorm.  Ende   *
;*                                 A    = 1 ... Datei nicht da  *
;*                                 A    = 2 ... Datei nicht pos.*
;****************************************************************
LO.RL:      CALL    K1.MREPO
            RET     NZ

LO.RL1:     LD      HL,(S2.PRGN)
            LD      C,1
            CALL    LO.RLUP

LO.RL2:     BIT     3,A
            JR      NZ,LO.DF
            BIT     4,A
            JR      NZ,LO.RL8
            AND     7
            JR      Z,LO.RL9
            LD      B,A
LO.RL3:     CALL    LO.RLUP
            LD      (HL),A
            INC     HL
            DJNZ    LO.RL3
            CALL    LO.RLUP
            BIT     7,A
            JR      NZ,LO.RL2
            BIT     5,A
            JR      Z,LO.DF
            BIT     6,A
            JR      NZ,LO.DF
            BIT     2,A
            JR      NZ,LO.DF
LO.RL4:     AND     3
            PUSH    AF
            PUSH    HL
            CALL    LO.RLUP
            LD      H,A
            CALL    LO.RLUP
            LD      L,A
            PUSH    BC
            LD      A,(S2.PRGN)         ;Anfangslade-adresse ==> BC
            LD      C,A
            LD      A,(S2.PRGN+1)
            LD      B,A
            ADD     HL,BC
            EX      DE,HL
            POP     BC
            POP     HL
            POP     AF
            JR      Z,LO.RL5
            BIT     0,A
            JR      Z,LO.RL6
LO.RL5:     LD      (HL),E
            INC     HL
            CP      3
            JR      Z,LO.RL6
            OR      A
            JR      NZ,LO.RL7
LO.RL6:     LD      (HL),D
            INC     HL
LO.RL7:     CALL    LO.RLUP
            BIT     7,A
            JR      NZ,LO.RL2
            JR      LO.DF
LO.RL8:     CALL    LO.RLUP
            PUSH    AF
            CALL    LO.RLUP
            POP     DE
            LD      E,A
            ADD     HL,DE
            CALL    LO.RLUP
            JR      LO.RL2
LO.RL9:     CALL    LO.RLUP
            JR      LO.RL4

LO.DF:      LD      HL,LO.TXT8
            JP      S1.FEH

LO.RLUP:    CALL    K1.LESV
            DEC     C
            RET     NZ
            AND     A
            JR      Z,LO.RL10
            LD      C,A
            INC     C
            JR      LO.RLUP
LO.RL10:    POP     DE
            DEC     HL
            PUSH    HL
            CALL    K1.GNRW
            CALL    K1.GNRA
            CALL    K1.GNSTS
            POP     HL
            XOR     A
            RET

            PAGE
;****************************************************************
;*               Unterprogramm: SAVE                            *
;*               -----------------------------------------------*
;*               Eingabeparameter: S2.PRGN  ... SAVEanfangsadr. *
;*                                 S2.PRGN+2... SAVEendeadresse *
;****************************************************************
LO.SAVE:    CALL    LO.SV4              ;einen Bereich ausgeben
            INC     HL
            LD      A,H
            OR      L
            JR      Z,LO.SAV2
            LD      BC,7DH              ;Blocklaenge
            OR      A
            SBC     HL,BC
            JR      C,LO.SAV1
            CALL    LO.SV1
            JR      LO.SAVE
LO.SAV1:    CALL    LO.SV4
            INC     HL
            LD      A,L
            CALL    LO.SV2
LO.SAV2:    RET

LO.SV1:     LD      A,7DH               ;einen Block ausgeben
LO.SV2:     PUSH    AF
            CALL    K1.SCHR             ;Blocklaenge  ausgeben
            LD      DE,(S2.PRGN)        ;Blockadresse ausgeben
            LD      A,D
            CALL    K1.SCHR
            LD      A,E
            CALL    K1.SCHR
            POP     BC
LO.SV3:     LD      A,(DE)
            CALL    K1.SCHR             ;Datenbytes ausgeben
            INC     DE
            DJNZ    LO.SV3
            LD      (S2.PRGN),DE
            RET

LO.SV4:     LD      HL,(S2.PRGN+2)
            LD      DE,(S2.PRGN)
            OR      A
            SBC     HL,DE
            RET

            PAGE
LO.TXT:     PUSH    DE
            PUSH    HL
            LD      A,2                 ;Bildfenster vergroessern
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      H,0                 ;ZPOS = SYSZ+  , SPOS = 0
            LD      L,B
            LD      (MS.ZPOS),HL
            LD      A,24
            LD      (MS.CMD),A
            LD      B,11
            POP     HL
            CALL    MO.MONI
            LD      B,15                ;Anzeige: -Adresse: 0000H
            LD      HL,LO.TXT6
            CALL    MO.MONI
            LD      HL,(MS.ZPOS)        ;ZPOS = SYSZ+  , SPOS = 21
            LD      H,21
            LD      (MS.ZPOS),HL
            INC     H                   ;ZMIN = SYSZ+  , SMIN = 22
            INC     L
            LD      (MS.ZMIN),HL
            INC     H                   ;ZMAX = SYSZ+  , SMAX = 25
            INC     H
            INC     H
            LD      (MS.ZMAX),HL

            CALL    TA.LOE
            LD      HL,S1.SYSTB
            LD      (TS.TAB3+6),HL
            LD      HL,LO.EIN1
            LD      (TS.EINA),HL
            LD      HL,S1.CNLS
            LD      (TS.TAB2+14),HL
            LD      HL,S1.CNRS
            LD      (TS.TAB2+18),HL
            POP     HL
            LD      (TS.TAB4),HL
            LD      A,10101000B
            LD      (TS.SPMER),A
            RET

LO.EIN1:    CP      '@'
            RET     Z
            CP      '#'
            RET     Z
            CP      '$'
            RET     Z
            CP      'G'
            RET     NC
            JP      S1.AEIN

            PAGE
LO.TR1:     LD      H,21                ;ZPOS=SYSZ+   , SPOS=22
            LD      L,B
            LD      (MS.ZPOS),HL
            LD      A,11                ;HL:=ZPOS,SPOS
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      DE,S2.DM1
            LD      BC,4
            LDIR
            LD      HL,S2.DM1
            CALL    S1.HBKON
            LD      D,A
            CALL    S1.HBKON
            LD      E,A
            RET

LO.RGL:     LD      A,(S2.RBBR)         ;laden IX,IY entspr. Geraet 1/2
            CP      2
            JR      Z,LO.RGL1
            CALL    K1.RGL1
            RET
LO.RGL1:    CALL    K1.RGL2
            RET

            TITLE   'Zeichenketten-Konstanten'
            PAGE
LO.TXT1:    DB      'MRES - Eingabedatei: '
LO.TXT2:    DB      'Programm starten ?   '
LO.TXT3:    DB      'Ladeanfangs'
LO.TXT4:    DB      'Ladeende   '
LO.TXT5:    DB      'Start      '
LO.TXT12:   DB      'SAVEanfangs'
LO.TXT13:   DB      'SAVEende   '
LO.TXT6:    DB      '-Adresse: 0000H'
LO.TXT7:    DB      'MRES - Dateityp    : '
LO.TXT14:   DB      'weitere Bloecke ausgeben'
LO.TXT15:   DB      'Aus'

LO.TXT8:    DB      'Datenfehler in R bzw. O - MRES-Datei  '
LO.TXT9:    DB      'Datei ist nicht im Verzeichnis        '
LO.TXT10:   DB      'Datei kann nicht positioniert werden  '
LO.TXT11:   DB      'kann die Datei ueberschrieben werden ?'


;           END
;           PN      S975
            TITLE   'Anschlussroutinen fuer  B A S I C'
            PAGE
;****************************************************************
;*               Anschlussroutinen fuer  B A S I C              *
;*  Version      -----------------------------------------------*
;*               Programmierer: M. Herbote --- K EAW  ZFT (WFT) *
;*  V 2 . 1      -----------------------------------------------*
;*               Stand        : 14.Maerz 1985                   *
;****************************************************************

            DB      'V2.1/140385'

;****************************************************************
;*            B A S I C   -   N e u s t a r t                   *
;****************************************************************
            DW      $
            DB      'BSCN'
S9.BASC:    CALL    S0.BASCL
            LD      HL,00100H           ;BASIC - CRC-Summe kontrollieren
            LD      BC,03000H
            CALL    S1.CHK
            LD      HL,0B783H           ;CRC-Summe 100-30FF   (06D97H alt)
            OR      A
            SBC     HL,DE
            JR      Z,S9.BASC1
            LD      HL,S9.FT1
            LD      DE,S9.BASC1
            CALL    S1.FEHR
S9.BASC1:   LD      HL,S1.RES           ;RESET-Adresse eintragen
            LD      (BC.RECOV1+1),HL
            LD      HL,S9.ANFPG         ;Anfangsprogramm laden
            LD      (BC.ANF+1),HL
            LD      HL,S9.OUT
            LD      DE,00070H
            LD      BC,S9.OUTLG-S9.OUT
            LDIR
            CALL    S9.BSC
            JP      BC.INIT
;****************************************************************
;*            B A S I C   -   R e s t a r t                     *
;****************************************************************
            DW      $
            DB      'BSCR'
S9.BSCR:    LD      HL,BC.PAR
            LD      BC,BC.D131-BC.PAR   ;02C90H
            CALL    S1.CHK
            LD      HL,0B7F8H           ;CRC-Summe 327-2FB7
            OR      A
            SBC     HL,DE
            JR      Z,S9.BASC2
            LD      HL,S9.FT2
            LD      DE,S9.BASC2
            CALL    S1.FEHR
S9.BASC2:   CALL    S9.BSC
            JP      BC.RECOV

S9.FT1:     DB      'CRC - Fehler in  B A S I C - P R O M  '
S9.FT2:     DB      'CRC - Fehler in  B A S I C, ==> BSCN !'

            PAGE
S9.BSC:     LD      HL,S9.ATAB1         ;Anschl.rout.adr. in BASIC-Workspace eintragen
            LD      DE,00306H
            LD      BC,S9.ATAB2-S9.ATAB1
            LDIR
            LD      HL,S9.ATAB2         ;Adressen in zusaetzl. Verst.bereich eintragen
            LD      DE,0B400H
            LD      BC,S9.HOME1-S9.ATAB2
            LDIR
            LD      HL,00070H           ;Erweiterung OUT-Befehl aktivieren
            LD      (01714H),HL
            LD      HL,00082H           ;SVC-Befehl aktivieren
            LD      (BC.SVC1),HL
            LD      HL,05620H           ;" V"
            LD      (BC.SVC2+1),HL
            LD      HL,0C320H           ;" C"
            LD      (BC.SVC2+3),HL

            ; LD      HL,0009BH           ;GRF-Befehl aktivieren
            ; LD      (BC.GRF1),HL
            ; LD      HL,02047H           ;"G "
            ; LD      (BC.GRF2),HL
            ; LD      HL,05220H           ;" R"
            ; LD      (BC.GRF2+2),HL
            ; LD      HL,0C620H           ;" F"
            ; LD      (BC.GRF2+4),HL

            LD      HL,S0.LRECL         ;Satzlaenge fuer Kassette eintr.
            LD      (K2.LRECL),HL
            LD      HL,0
            LD      (MS.ZPOS),HL        ;ZPOS= 1 , SPOS= 1
            LD      A,5                 ;Bildfenster loeschen
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      HL,MS.DIRES         ;Bildrollen einschalten
            SET     5,(HL)              ;rollen allgemein
            RES     4,(HL)              ;rollen Fensterinhalt
            LD      HL,MO.ROLL
            LD      (MS.RADR),HL
            LD      HL,S9.BSCR
            LD      (K2.FRADR),HL
            CALL    S9.TALOE            ;Tastatur aktivieren
            XOR     A
            LD      (S2.CST),A          ;Statusanzeige "gedrueckte Taste"
            LD      HL,S2.IM
            LD      (HL),A              ;S2.IM    loeschen
            INC     HL
            LD      (HL),A              ;S2.OM    loeschen
            INC     HL
            LD      (HL),A              ;S2.VZM   loeschen
            RET
S9.TALOE:   CALL    TA.LOE
            LD      HL,S9.BCTB1
            LD      DE,TS.TAB1
            LD      BC,S9.BCTB2-S9.BCTB1
            LDIR
            LD      HL,S9.BCTB2
            LD      DE,TS.TAB2
            LD      BC,S9.TAS-S9.BCTB2
            LDIR
            LD      A,11111110B
            LD      (TS.SPMER),A
            CALL    0B415H              ;HOME-Taste aktivieren JA/NEIN
            RET
            PAGE
;****************************************************************
;*               Sprungtabelle , die in den Workspace von       *
;*               B A S I C  eingetragen wird                    *
;****************************************************************
S9.ATAB1:   JP      S9.USER             ;USR     -Routine
            JP      S9.CIN              ;Konsolen-Inputroutine
            JP      S9.RIV              ;Leser   -Inputroutine
            JP      S9.CON              ;Konsolen-Outputroutine
            JP      S9.WRTV             ;Stanzer -Outputroutine
            JP      S9.LISTX            ;Drucker -Outputroutine
            JP      S9.CSTSX            ;Konsolen-Statusroutine
            XOR     A                   ;Konfigurationstest     IOCHK
            RET
            NOP
            JP      S9.IOSTX            ;SWITCH  -Routine
            JP      S9.MEMCK            ;uebergibt Standardspeichergroesse
            JP      S1.SYSTB            ;Rueckkehr zum Betriebssystem



;****************************************************************
;*               zusaetzlicher Verstaendigungsbereich           *
;****************************************************************
S9.ATAB2:   JP      S9.ABAUP            ;B400
            JP      S9.RBAUP            ;B403
            JP      S9.OPEN             ;B406
            JP      S9.CLOSE            ;B409
            JP      S9.READ             ;B40C
            JP      S9.WRITE            ;B40F
            JP      S9.IOX              ;B412
            RET                         ;B415
            DW      S9.HOME1            ;B416
            JP      0                   ;B418
            JP      S9.BLD1             ;B41B
            DB      0                   ;B41E ... Eingabekonv.(RS),wenn FFH
            DB      01EH                ;B41F ... Eingabe-Zeilenendezeichen
            DB      0                   ;B420 ... Ausgabekonv.(RS),wenn FFH
            DB      01EH                ;B421 ... Ausgabe-Zeilenendezeichen
            RET                         ;B422 ... Eingabe-Kodetransformation
            DW      S9.IOX
            RET                         ;B425 ... Ausgabe-Kodetransformation
            DW      S9.IOX

S9.HOME1:   LD      HL,0
            LD      (TS.TAB2+16),HL
            RET

            TITLE   'Anfangsprogramm'
            PAGE
S9.ANFP:    DW      02FDEH              ;Adresse naechster Befehl
            DW      1                   ;BASIC-Zeilennummer 1
            DB      99H                 ;CLEAR
            DB      ' 500:'
            DB      0D4H                ;SVC
            DB      '0,7,1,22,1,80:'
            DB      0D4H                ;SVC
            DB      '0,2:'
            DB      0D4H                ;SVC
            DB      '0,5,1,1'
            DB      0

            DW      03048H              ;Adresse naechster Befehl
            DW      2                   ;BASIC-Zeilennummer 2
            DB      'SY$'
            DB      0ADH                ;=
            DB      '"name__tacomm__date__sig":ER$'
            DB      0ADH                ;=
            DB      '"11...G lpoispoi":'
            DB      0D4H                ;SVC
            DB      '0,19:'
            DB      08AH                ;IF
            DB      0C6H                ;MID$
            DB      '(ER$,7,1)'
            DB      0ADH                ;=
            DB      '"1"'
            DB      0A2H                ;THEN
            DB      097H                ;?
            DB      '"E n t l a d e n":'
            DB      0D4H                ;SVC
            DB      '0,29,73'
            DB      0

            DW      0                   ;Endekennzeichen BASIC-Programm


S9.ANFG:    LD      HL,S9.ANFP
            LD      DE,02FB7H
            LD      BC,S9.ANFG-S9.ANFP
            LDIR
            LD      HL,03049H
            LD      (BC.D017),HL
            INC     HL
            LD      (BC.D024),HL
            LD      (BC.D025),HL
            LD      (BC.D026),HL
            RET

S9.ANFPG:   CALL    S9.ANFG
            JP      004A0H

            TITLE   'Tastenroutinenadressen'
            PAGE
;****************************************************************
;*               Tastenroutinenadressen                         *
;****************************************************************
S9.BCTB1:   DW      S9.CST4             ;CNTRL-S --- P1
            DW      S9.TAS              ;        --- P2
            DW      S9.CST5             ;CNTRL-Q --- P3
            DW      0
            DW      S9.CST6             ;CNTRL-R --- P5
            DW      0
            DW      S9.CST7             ;CNTRL-C --- P7
            DW      S9.CST8             ;CNTRL-O --- P8
            DW      S9.CST9             ;CNTRL-T --- P9
            DW      S9.FBE1             ;        --- P10
            DW      S9.FBE2             ;        --- P11
            DW      S9.FBE3             ;        --- P12

S9.BCTB2:   DW      0
            DW      0
            DW      0
            DW      S9.CST3             ;CNTRL-U --- DEL LINE
            DW      0
            DW      0
            DW      0
            DW      S9.CST1             ;rubout  --- <==
            DW      S9.HOME
            DW      0
            DW      S9.CST11            ;escape  --- CNZA
            DW      0
            DW      S1.NN
            DW      S1.NNN
            DW      0
            DW      S9.CST2             ;CNTRL-X --- SYS
            DW      S1.HCOPY
            DW      0
            DW      S9.CST10            ;        --- POS QUIT
            DW      0
            DW      0
            DW      0
            DW      0
            DW      S9.CSTS3            ;        --- EINA
            DW      0
            DW      S9.CST10            ;        --- ET1


S9.TAS:     LD      A,(TS.KGMER)
            OR      A
            JR      Z,S9.TAS1
            XOR     A
            JR      S9.TAS2
S9.TAS1:    INC     A
S9.TAS2:    LD      (TS.KGMER),A
            CALL    S1.STAT
            RET

            TITLE   'Konsoleninput'
            PAGE
;****************************************************************
;*               Eingabe eines Zeichens von Konsole             *
;****************************************************************
S9.CIN:     CALL    S9.SAVE
            LD      A,(BC.D058)          ;AUTO aktiv ?
            OR      A
            JR      Z,S9.CIN2
            LD      A,(TS.BFOL1+1)      ;FBE  aktiv ?
            OR      A
            JR      Z,S9.CIN2
            PUSH    HL
            PUSH    HL
            PUSH    HL
            JP      S9.FBE1

S9.CIN2:    LD      A,(S2.CST)
            OR      A
            JR      NZ,S9.CIN1
            CALL    S9.CSTS1
            JR      $-3

S9.CIN1:    XOR     A
            LD      (S2.CST),A
            CALL    S9.LOAD
            LD      A,(MS.TK)
            RET

S9.CSTS1:   CALL    TA.ABFR
            LD      A,-1
            LD      (S2.CST),A
            RET
;****************************************************************
;*               Konsolstatus                                   *
;****************************************************************
S9.CSTSX:   CALL    S9.SAVE
            CALL    TA.TA1
            JR      NZ,S9.CSTS4
            CALL    S9.CSTS1
            JR      S9.CSTS4
            JR      S9.CSTS5


S9.CSTS4:   XOR     A
            LD      (S2.CST),A

S9.CSTS5:   CALL    S9.LOAD
            LD      A,(S2.CST)
            OR      A
            RET

            TITLE   'Konsolenoutput'
            PAGE
;****************************************************************
;*               Ausgabe eines Zeichens auf Konsole             *
;****************************************************************
S9.CON:     CALL    S9.SAVE
            LD      A,7                 ;Cursor loeschen
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      A,20                ;Zeichen auf BWS
            LD      (MS.CMD),A
            LD      A,C
            CP      00DH
            JR      Z,S9.CON9
            CP      00AH
            JR      Z,S9.CON1
            LD      (MS.TK),A
            CALL    MO.MONI
            JR      S9.CON9
S9.CON1:    LD      A,23                ;naechste Bildschirmzeile Anfang
            LD      (MS.CMD),A
            CALL    MO.MONI
S9.CON9:    LD      A,6                 ;Cursor setzen
            LD      (MS.CMD),A
            CALL    MO.MONI
            JR      S9.CON09



S9.CONOC:   CALL    S9.SAVE             ;Konsolenausgabe ohne Cursorberuecks.
            LD      A,20                ;Zeichen auf BWS
            LD      (MS.CMD),A
            LD      A,C
            CP      00DH
            JR      Z,S9.CON09
            CP      00AH
            JR      Z,S9.CON01
            LD      (MS.TK),A
            CALL    MO.MONI
            JR      S9.CON09
S9.CON01:   LD      A,7
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      A,23                ;naechste Bildschirmzeile Anfang
            LD      (MS.CMD),A
            CALL    MO.MONI
S9.CON09:   JP      S9.IOXE

            TITLE   'Tastenroutinen'
            PAGE
;****************************************************************
;*            Kodeersetzungsroutinen                            *
;****************************************************************
S9.CST1:    LD      A,07FH              ; <==
            JR      S9.CSTS2

S9.CST2:    LD      A,018H              ; SYS
            JR      S9.CSTS2

S9.CST3:    LD      A,015H              ; DEL LINE
            JR      S9.CSTS2

S9.CST4:    LD      A,013H              ; P01
            JR      S9.CSTS2

S9.CST5:    LD      A,011H              ; P03
            JR      S9.CSTS2

S9.CST6:    LD      A,012H              ; P05
            JR      S9.CSTS2

S9.CST7:    LD      A,003H              ; P07
            JR      S9.CSTS2

S9.CST8:    LD      A,00FH              ; P08
            JR      S9.CSTS2

S9.CST9:    LD      A,014H              ; P09
            JR      S9.CSTS2

S9.CST10:   LD      A,00DH              ; new line
            JR      S9.CSTS2

S9.CST11:   LD      A,01BH              ; naechste Zeile Anfang

S9.CSTS2:   LD      (MS.TK),A
            POP     DE
            POP     BC
            POP     HL
            INC     HL
            INC     HL
            PUSH    HL
            PUSH    BC
            PUSH    DE
            RET

S9.CSTS3:   LD      (MS.TK),A           ;Routine  E I N A  mit Schnellschreiben
            LD      A,1
            LD      (TS.ZSMER),A
            JR      S9.CSTS2+3

S9.HOME:    LD      A,2                 ;Bildfenster def. ZANZ-2 , SPANZ
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      A,5                 ;Bildfenster loeschen
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      HL,0                ;ZPOS= 1 , SPOS= 1
            LD      (MS.ZPOS),HL
            RET
            TITLE   'Freie Bildschirmeingabe'
            PAGE
;****************************************************************
;*               freie Bildschirmeingabe                        *
;****************************************************************
S9.FBE1:    LD      A,(BC.D058)         ;P-Taste   P10
            OR      A                   ;AUTO aktiv ?
            JR      Z,S9.FB1

            LD      A,7                 ;ja ... Cursor loeschen
            LD      (MS.CMD),A
            CALL    S1.MO
            LD      HL,TS.BFOL1+1
            LD      A,1
            CP      (HL)                ;FBE schon aktiv ?
            JR      Z,S9.FB1

            LD      (HL),A              ;nein, aktivieren
            LD      HL,00105H           ;ZMIN = 5 , SMIN = 1
            LD      (MS.ZMIN),HL
            DEC     H                   ;ZPOS = 5 , SPOS = 1
            DEC     L
            LD      (MS.ZPOS),HL
            LD      A,5                 ;Bildfenster loeschen
            LD      (MS.CMD),A
            CALL    S1.MO


S9.FB1:     CALL    S9.FBE
            CALL    S9.DEL              ;Eingabebereich auf blank loeschen
            LD      A,6                 ;Cursor setzen
            LD      (MS.CMD),A
            CALL    S1.MO
            JR      S9.FBE13

S9.FBE2:    CALL    S9.FBE              ;P-Taste   P11
            LD      DE,S9.POSQ1         ;Bereitstellen anderer BWS-Zeilen
            LD      HL,00115H
S9.FBE12:   LD      (MS.ZMAX),HL
            EX      DE,HL               ;POS_QUIT
            LD      (TS.TAB4),HL

            CALL    S1.TA+15            ;TA.TFE
            CALL    S1.TA+12            ;Tastatur - Abfrageschleife
            JR      $-3

S9.FBE3:    CALL    S9.FBE              ;P-Taste   P12
S9.FBE13:   CALL    S9.PQ2TL
            LD      DE,S9.POSQ2
            LD      HL,05004H
            JR      S9.FBE12

            PAGE
S9.FBE:     CALL    S0.BWSZU            ;BWS zuschalten
            LD      HL,0                ;Routine BWSAB := Routine BWSZU
            LD      (S2.STACK),HL
            LD      HL,MS.ZPOL          ;Monitorsteuervektor retten
            LD      DE,S0.BWS+1920
            LD      BC,TS.TAB1-MS.ZPOL
            LDIR
S9.FBE0:    LD      HL,0                ;Monitorsteuervektor neu belegen
            LD      (MS.ZPOS),HL
            INC     H
            INC     L
            LD      (MS.ZMIN),HL
            LD      A,11001000B
            LD      (MS.DIRES),A
            LD      HL,S0.BWS
            LD      (MS.BWSA),HL
            CALL    S1.TA+9             ;Tastaturaktivierung
            LD      HL,0                ;SYS-Taste loeschen
            LD      (TS.TAB3+6),HL
            LD      HL,S9.NEGQ          ;NEG_QUIT
            LD      (TS.TAB3+4),HL
            LD      A,-1
            LD      (TS.SPMER),A
            LD      A,6                 ;Cursor setzen
            LD      (MS.CMD),A
            CALL    S1.MO
            RET

            PAGE
S9.POSQ1:   CALL    S9.UP1              ;zu korrigierende Zeilen im
            EX      DE,HL               ;Eingabebereich bereitstellen
            LD      DE,S0.BWS
            LD      BC,320
            LDIR
            LD      HL,05004H
            LD      (MS.ZMAX),HL
            CALL    S9.FBE0

S9.PQ2TL:   LD      HL,S9.TPF1
            LD      DE,TS.TAB1
            LD      BC,S9.TX1-S9.TPF1
            LDIR
            LD      HL,S9.POSQ2
            LD      (TS.TAB4),HL
            LD      HL,S9.INSM
            LD      (TS.TAB2),HL
            LD      HL,S9.DEL
            LD      (TS.TAB2+2),HL
            LD      HL,S9.SCHL
            LD      (TS.TAB2+8),HL
            LD      HL,S9.SCHR
            LD      (TS.TAB2+12),HL
            LD      HL,S1.AEIN
            LD      (TS.NEWL),HL
S9.INSM:    LD      A,(TS.UMERK)
            OR      A
            JR      NZ,S9.TL1
            LD      HL,S9.EIN1
            JR      S9.TL2
S9.TL1:     LD      HL,S9.EIN2
S9.TL2:     LD      (TS.EINA),HL
            RET

S9.EIN1:    CALL    S1.AEIN
S9.ZS:      LD      A,1
            LD      (TS.ZSMER),A
            RET

S9.EIN2:    PUSH    AF
            CALL    S9.SCHR
            POP     AF
            JR      S9.EIN1

            PAGE
S9.DEL:     LD      HL,S0.BWS
            LD      DE,S0.BWS+1
            LD      BC,254
            LD      (HL),' '
            LDIR
            EX      DE,HL
            LD      (HL),'|'
            INC     HL
            LD      (HL),'='
            PUSH    HL
            POP     DE
            INC     DE
            LD      BC,63
            LDIR
            RET

S9.SCHL:    CALL    S9.UP1
            LD      HL,S0.BWS+253
            OR      A
            SBC     HL,DE
            RET     Z
            PUSH    HL
            POP     BC
            CALL    S9.UP1
            PUSH    DE
            POP     HL
            INC     HL
            LDIR
            LD      A,' '
            LD      (S0.BWS+254),A
S9.ZS1:     JR      S9.ZS

S9.SCHR:    CALL    S9.UP1
            LD      HL,S0.BWS+254
            OR      A
            SBC     HL,DE
            RET     Z
            PUSH    HL
            POP     BC
            LD      HL,S0.BWS+253
            LD      DE,S0.BWS+254
            LDDR
            CALL    S9.UP1
            EX      DE,HL
            LD      (HL),' '
            JR      S9.ZS1

            PAGE
S9.PF1:     CALL    S9.UP1              ;SY$="...":ER$="..."
            LD      HL,S9.TX1
            LD      BC,S9.TX2-S9.TX1
            LDIR
S9.PF101:   EX      DE,HL
            LD      A,10
            LD      (MS.CMD),A
            CALL    S1.MO
            RET

S9.PF2:     CALL    S9.UP1              ;NEW.1_
            LD      HL,S9.TXT16
            LD      BC,S9.TXT17-S9.TXT16
            LDIR
S9.PF102:   JR      S9.PF101

S9.PF3:     CALL    S9.UP1              ;RUN
            LD      HL,S9.TXT15
            LD      BC,S9.TXT16-S9.TXT15
            LDIR
S9.PF103:   JR      S9.PF102

S9.PF4:     CALL    S9.UP1              ;OPEN MRES INPUT
            LD      HL,S9.TX2
            LD      BC,S9.TXT3-S9.TX2
            LDIR
            LD      HL,S9.TXT4
            LD      BC,S9.TXT5-S9.TXT4
            LDIR
            LD      HL,S9.TXT5
            LD      BC,S9.TXT6-S9.TXT5
            LDIR
S9.PF104:   JR      S9.PF103

S9.PF5:     CALL    S9.UP1              ;OPEN MRES OUTPUT
            LD      HL,S9.TX2
            LD      BC,S9.TXT3-S9.TX2
            LDIR
            LD      HL,S9.TXT4
            LD      BC,S9.TXT5-S9.TXT4
            LDIR
            LD      HL,S9.TXT6
            LD      BC,S9.TXT7-S9.TXT6
            LDIR
S9.PF105:   JR      S9.PF104

S9.PF6:     CALL    S9.UP1              ;CLOSE MRES OUTPUT
            LD      HL,S9.TXT4
            LD      BC,S9.TXT5-S9.TXT4
            LDIR
            LD      HL,S9.TXT7
            LD      BC,S9.TXT8-S9.TXT7
            LDIR
S9.PF106:   JR      S9.PF105

S9.PF7:     CALL    S9.UP1              ;OPEN INPUT
            LD      HL,S9.TX2
            LD      BC,S9.TXT5-S9.TX2
            LDIR
            LD      HL,S9.TXT8
            LD      BC,S9.TXT10-S9.TXT8
            LDIR
S9.PF107:   JR      S9.PF106

S9.PF8:     CALL    S9.UP1              ;OPEN OUTPUT
            LD      HL,S9.TX2
            LD      BC,S9.TXT5-S9.TX2
            LDIR
            LD      HL,S9.TXT8
            LD      BC,S9.TXT9-S9.TXT8
            LDIR
            LD      HL,S9.TXT10
            LD      BC,S9.TXT11-S9.TXT10
            LDIR
S9.PF108:   JR      S9.PF107

S9.PF9:     CALL    S9.UP1              ;.SVC0,2:SVC0,5,1,1:LIST
            LD      HL,S9.TXT17
            LD      BC,S9.TXT18-S9.TXT17
            LDIR
S9.PF109:   JR      S9.PF108

S9.PF10:    CALL    S9.UP1              ;LOADA
            LD      HL,S9.TXT12
            LD      BC,S9.TXT13-S9.TXT12
            LDIR
S9.PF110:   JR      S9.PF109

S9.PF11:    CALL    S9.UP1              ;LOADGOA
            LD      HL,S9.TXT13
            LD      BC,S9.TXT14-S9.TXT13
            LDIR
S9.PF111:   JR      S9.PF110

S9.PF12:    CALL    S9.UP1              ;SAVEA
            LD      HL,S9.TXT14
            LD      BC,S9.TXT15-S9.TXT14
            LDIR
S9.PF112:   JR      S9.PF111

            PAGE
S9.UP1:     LD      A,11
            LD      (MS.CMD),A
            CALL    S1.MO
            EX      DE,HL
            RET

S9.TPF1:    DW      S9.PF1
            DW      S9.PF2
            DW      S9.PF3
            DW      S9.PF4
            DW      S9.PF5
            DW      S9.PF6
            DW      S9.PF7
            DW      S9.PF8
            DW      S9.PF9
            DW      S9.PF10
            DW      S9.PF11
            DW      S9.PF12

S9.TX1:     DB      'SY$="INHALTBL               ":ER$="11   G C010C010":'
S9.TX2:     DB      'INPUT"Geraet";G:'
S9.TXT3:    DB      'INPUT"Label ";L:'
S9.TXT4:    DB      'SVC0,'
S9.TXT5:    DB      '22,G:'
S9.TXT6:    DB      '23,G:'
S9.TXT7:    DB      '31:'
S9.TXT8:    DB      '20,G,7'
S9.TXT9:    DB      '3,L:'
S9.TXT10:   DB      '9,L:'
S9.TXT11:   DB      '29,7'
S9.TXT12:   DB      'LOADA:'
S9.TXT13:   DB      'LOADGOA:'
S9.TXT14:   DB      'SAVEA:'
S9.TXT15:   DB      01EH
            DB      'RUN'
S9.TXT16:   DB      'NEW'
            DB      01EH
            DB      '1 '
S9.TXT17:   DB      01EH
            DB      'SVC0,7,1,22,1,80:SVC0,2:SVC0,5,1,1:LIST'
S9.TXT18    EQU     $

            PAGE
;****************************************************************
;*               Tastenroutine      P O S _ Q U I T             *
;****************************************************************
S9.POSQ2:   LD      HL,S0.BWSA          ;BWSA  <===>  BWS   4 Zeilen
            LD      DE,S0.BWS
            LD      BC,320
S9.POS1:    PUSH    BC
            LD      B,(HL)
            EX      DE,HL
            LD      C,(HL)
            LD      (HL),B
            EX      DE,HL
            LD      (HL),C
            INC     HL
            INC     DE
            POP     BC
            DEC     BC
            LD      A,B
            OR      C
            JR      NZ,S9.POS1

            CALL    S0.BWSAB
            XOR     A                   ;CSTSX - Routine ausschalten
            LD      HL,0C9AFH           ;???
            LD      (BC.CSTSX),A
            LD      (BC.CSTSX+1),HL
            DEC     A
            LD      (TS.MIO),A
            LD      HL,S9.CCIN          ;CIN   - Routine umschalten
            LD      (BC.CIN+1),HL
            LD      A,(BC.D058)         ;AUTO aktiv ?
            OR      A
            JR      Z,S9.POS4
            LD      A,(TS.BFOL1+1)      ;FBE bei AUTO aktiv ?
            OR      A
            JR      NZ,S9.POS5
S9.POS4:    LD      HL,S9.IOX           ;CON   - Routine ausschalten
            LD      (BC.CON+1),HL
S9.POS5:    LD      HL,S0.BWSA          ;MIO             einschalten
            LD      (TS.BFOL2),HL
            LD      BC,254
            ADD     HL,BC
            LD      A,' '
            INC     C
S9.POS2:    CP      (HL)
            JR      NZ,S9.POS3
            DEC     HL
            DEC     C
            JR      NZ,S9.POS2
            XOR     A                   ;FBE bei AUTO entaktivieren
            LD      (TS.BFOL1+1),A
S9.POS3:    LD      A,C
            INC     A
            LD      (TS.BFOL1),A
            CALL    S0.BWSZU
            JR      S9.NEG1

            PAGE
;****************************************************************
;*               Tastenroutine      N E G _ Q U I T             *
;****************************************************************
S9.NEGQ:    LD      HL,S0.BWSA          ;BWS  wiederherstellen
            LD      DE,S0.BWS
            LD      BC,320
            LDIR
S9.NEG1:    LD      HL,S0.BWS+1920      ;Monitorsteuervektor wiederherstellen
            LD      DE,MS.ZPOL
            LD      BC,TS.TAB1-MS.ZPOL
            LDIR
            LD      HL,(S0.BWSB)        ;Routine BWSAB aktivieren
            LD      (S2.STACK),HL
            CALL    S2.STACK
            CALL    S9.TALOE
            POP     HL
            POP     HL

            POP     HL
            POP     HL
            POP     HL
            LD      A,-1
            JP      S9.CSTS4
;****************************************************************
;*               C I N       - Routine                          *
;****************************************************************
S9.CCIN:    CALL    S9.SAVE

            CALL    S9.CSTS1
            JR      $-3

S9.CCIN1:   LD      HL,TS.BFOL1
            DEC     (HL)
            JR      NZ,S9.CCIN2

            CALL    S0.BWSU1
            LD      A,0C3H              ;CSTSX - Routine einschalten
            LD      HL,S9.CSTSX
            LD      (BC.CSTSX),A
            LD      (BC.CSTSX+1),HL
            LD      HL,S9.CIN           ;CIN   - Routine umschalten
            LD      (BC.CIN+1),HL
            LD      HL,S9.CON           ;CON   - Routine einschalten
            LD      (BC.CON+1),HL
            XOR     A                   ;MIO             ausschalten
            LD      (TS.MIO),A
            LD      A,00DH
            LD      (MS.TK),A

S9.CCIN2:   JP      S9.CIN1

            TITLE   'Eingabe eines Zeichens'
            PAGE
;****************************************************************
;*               Eingabe eines Zeichens                         *
;****************************************************************
S9.RIV:     CALL    S9.SAVE
            LD      A,(S2.IM)
            OR      A
            JR      NZ,S9.RIV2
S9.RIVF:    LD      HL,S9.TXT1          ;Fehleranzeige
S9.RIV1:    LD      DE,S9.BSCR
            JP      S1.FEHR

S9.RIV2:    CALL    S9.RGLI
S9.RIV4:    CALL    S9.LESV
            CALL    0B422H              ;Eingabe-Kodetransformation
            LD      C,A
            LD      HL,0B41EH
            LD      A,(HL)
            OR      A
            LD      A,C
            JR      Z,S9.RIV6
            INC     HL
            CP      (HL)
            JR      NZ,S9.RIV5
            LD      A,00DH
            JR      S9.RIV6
S9.RIV5:    CP      ' '
            JR      C,S9.RIV4
            CP      07FH
            JR      NC,S9.RIV4
S9.RIV6:    LD      (TS.TK),A
S9.RIV9:    CALL    S9.LOAD
            LD      A,(TS.TK)
            RET

            PAGE
S9.LESV:    CALL    K1.BM
            JR      Z,S9.BM2
S9.BM1:     CALL    K1.LESV
            RET

S9.BM2:     LD      HL,S0.PFFI+400H-1
            LD      DE,(S2.POIE)
            OR      A
            SBC     HL,DE
            JR      Z,S9.BM3
            JP      P,S9.BM1
            LD      A,00DH              ;Pufferende ueberschritten
            RET

S9.BM3:     CALL    K1.GNRM             ;letztes Byte der Datei erreicht
            CALL    K1.GNSTS
            LD      A,'2'               ;Byte 7 der Variablen ER$  =  2
            CALL    S9.ERS
S9.BM4:     LD      HL,S0.PFFI+401H     ;Pointer hinter Puffer setzen
            LD      (S2.POIE),HL
            XOR     A                   ;Satzlaenge in E/A-Tabelle := 0
            LD      (IX+9),A
            LD      (IX+10),A
            LD      A,(S0.PFFI+3FFH)    ;letztes Byte aus der Datei
            RET

S9.TXT1:    DB      'Es wurde keine Eingabedatei eroeffnet '

            TITLE   'Ausgabe eines Zeichens'
            PAGE
;*               Ausgabe eines Zeichens                         *
;****************************************************************
S9.WRTV:    CALL    S9.SAVE
            LD      A,(S2.OM)
            OR      A
            JR      NZ,S9.WRTV2
S9.WRTVF:   LD      HL,S9.TXT2          ;Fehleranzeige
            JP      S9.RIV1

S9.WRTV2:   CALL    S9.RGLO
            LD      HL,0B420H
            LD      A,(HL)
            OR      A
            LD      A,C
            JR      Z,S9.WRTV6
            INC     HL
            CP      00AH
            JR      Z,S9.WRTV9
            CP      00DH
            JR      NZ,S9.WRTV6
S9.WRTV5:   LD      A,(HL)
S9.WRTV6:   CALL    0B425H              ;Ausgabe-Kodetransformation
            CALL    K1.SCHR

S9.WRTV9:   JR      S9.STX9

S9.TXT2:    DB      'Es wurde keine Ausgabedatei eroeffnet '

;****************************************************************
;*                Druckroutine                                  *
;****************************************************************
S9.LISTX:   CALL    S9.SAVE
            LD      A,C
            CP      00DH
            JR      Z,S9.STX9
            CP      00AH
            JR      NZ,S9.STX2
            LD      C,01EH              ;Ausgabe Zeilenendezeichen
S9.STX2:    CALL    SM.PRIO             ;Zeichen auf Drucker ausgeben
S9.STX9:    JR      S9.IOXE

S9.LISTY:   CALL    S9.SAVE
            LD      A,C
            CP      00DH
            JR      Z,S9.STX9
            CP      00AH
            JR      Z,S9.STX9
            JR      S9.STX2

            TITLE   'SWITCH - Routine'
            PAGE
;****************************************************************
;*               S W I T C H   -   Routine                      *
;****************************************************************
S9.IOSTX:   CALL    S9.SAVE
            PUSH    AF
            LD      A,(S2.IOC)
            CP      1
            JR      Z,S9.IOX10
            POP     AF
            CP      1                   ;Eingabe von Kassette
            JR      Z,S9.IOX1
            CP      2                   ;Ausgabe auf Kassette
            JR      Z,S9.IOX2
            CP      3                   ;Ausgabe auf Drucker
            JR      Z,S9.IOX3
S9.IOX0:    LD      HL,S9.CIN           ;Eingabe Tastatur / Ausgabe Bildschirm
            LD      BC,S9.CON
            JR      S9.IOX8
S9.IOX1:    LD      HL,S9.RIV
            LD      BC,S9.IOX
            JR      S9.IOX8
S9.IOX2:    LD      HL,S9.IOX
            LD      BC,S9.WRTV
            JR      S9.IOX8
S9.IOX3:    LD      BC,S9.LISTX
            JR      S9.IOX9
S9.IOX8:    LD      (BC.CIN+1),HL
S9.IOX9:    LD      (BC.CON+1),BC
S9.IOX90:   JR      S9.IOXE

S9.IOX10:   POP     AF
            CP      1                   ;Eingabe/Ausgabe ueber IOCS
            JR      Z,S9.IOX11
            CP      2                   ;Eingabe/Ausgabe auf   HS-Erweiterung
            JR      Z,S9.IOX12
            CP      3                   ;Ausgabe auf Drucker
            JR      Z,S9.IOX13
            LD      HL,S9.CIN           ;Eingabe Tastatur / Ausgabe Bildschirm
            LD      BC,S9.CON
            JR      S9.IOX8
S9.IOX11:   LD      HL,S9.IOX
            LD      BC,S9.IOX
            JR      S9.IOX8
S9.IOX12:   LD      HL,S9.IOX
            LD      BC,S9.IOX
            JR      S9.IOX8
S9.IOX13:   LD      BC,S9.LISTY
            JR      S9.IOX9

S9.IOXE:    CALL    S9.LOAD
S9.IOX:     RET

            TITLE   'U S R - Routine  ONKEY'
            PAGE
;****************************************************************
;*               U S R  -  Routine als   ONKEY - Funktion       *
;****************************************************************
S9.USER:    CALL    S9.SAVE
            CALL    TA.LOE
            CALL    BC.PAR              ;Parameter uebernehmen
            INC     E
            LD      IX,TS.TAB1+24       ;Tasten PF13 bis PF48 aktivieren
            LD      HL,S9.USR3
            LD      B,36
S9.USR1:    LD      (IX+0),L
            LD      (IX+1),H
            INC     IX
            INC     IX
            DJNZ    S9.USR1
            LD      A,10000000B
            LD      (TS.SPMER),A
            LD      A,7                 ;Cursor loeschen
            LD      (MS.CMD),A
            CALL    MO.MONI

S9.USR2:    PUSH    DE                  ;warten bis eine P-Taste gedrueckt
            LD      A,1
            LD      (TS.ZSMER),A
            CALL    TA.ABFR
            JR      $-3

S9.USR3:    LD      A,(TS.PTK)          ;P-Tastennummer an BASIC uebergeben
            SUB     12
            POP     DE
            POP     DE
            POP     DE
            CP      E
            JR      NC,S9.USR2

            CALL    S9.USR7             ;Warteschleife

            LD      B,A                 ;Tastennummer zurueckgeben
            XOR     A
            CALL    BC.RUCK
S9.USR4:    JR      S9.IOXE

            TITLE   'U S R - Routine  INKEY 1'
            PAGE
;****************************************************************
;*               U S R  -  Routine als   INKEY  1 - Funktion    *
;****************************************************************
S9.USER2:   CALL    S9.SAVE
            CALL    TA.LOE
            CALL    BC.PAR              ;Parameter uebernehmen
            INC     E
            LD      IX,TS.TAB1+24       ;Tasten PF13 bis PF48 aktivieren
            LD      HL,S9.USR23
            LD      B,36
            CALL    S9.USR8
            LD      A,10000000B
            LD      (TS.SPMER),A
            LD      A,7                 ;Cursor loeschen
            LD      (MS.CMD),A
            CALL    MO.MONI

S9.USR22:   PUSH    DE                  ;eine P-Taste gedrueckt ?
            LD      A,1
            LD      (TS.ZSMER),A
            CALL    TA.TA1
            JR      NZ,S9.USR24
            CALL    TA.TA2
            CALL    TA.ABFR2
            JR      S9.USR24

S9.USR23:   LD      A,(TS.PTK)          ;P-Tastennummer an BASIC uebergeben
            SUB     12
            POP     DE
            POP     DE
            POP     DE
            CP      E
            PUSH    AF

            CALL    S9.USR7                ;Warteschleife

            POP     AF
            JR      NC,S9.USR24
S9.USR40:   LD      B,A                 ;Tastennummer zurueckgeben
S9.USR25:   XOR     A
            CALL    BC.RUCK
            JR      S9.USR4
S9.USR24:   LD      B,0
            JR      S9.USR25

            TITLE   'U S R - Routine  INKEY 2'
            PAGE
;****************************************************************
;*               U S R  -  Routine als   INKEY 2 - Funktion     *
;****************************************************************
S9.USER3:   CALL    S9.SAVE
            CALL    TA.LOE
            CALL    BC.PAR              ;Parameter uebernehmen
            LD      A,E                 ;TS.SPMER
            LD      (TS.SPMER),A
            LD      HL,S9.USR33
            LD      A,D                 ;Erweiterung TS.SPMER
            CP      1
            JR      Z,S9.USR36
            CP      2
            JR      Z,S9.USR37
            CP      3
            JR      Z,S9.USR41
            LD      IX,TS.TAB2          ;D=0  ...  TS.TAB2
            LD      B,12
            CALL    S9.USR9
            JR      S9.USR39
S9.USR36:   LD      (TS.TAB3+4),HL      ;D=1  ...  POS_QUIT/NEG_QUIT
            LD      (TS.TAB4),HL
            JR      S9.USR39
S9.USR37:   LD      IX,TS.TAB2          ;D=2  ...  TS.TAB2,TS.TAB3,TS.TAB4
            LD      B,23
            CALL    S9.USR9
            JR      S9.USR39
S9.USR41:   LD      IX,TS.TAB2          ;D=3  ...  TS.TAB2 --- TS.NEWL
            LD      B,26
            CALL    S9.USR9
S9.USR39:   LD      A,7                 ;Cursor loeschen
            LD      (MS.CMD),A
            CALL    MO.MONI

S9.USR32:   LD      A,1                 ;eine P-Taste gedrueckt ?
            LD      (TS.ZSMER),A
            CALL    TA.TA1
            JR      NZ,S9.USR24
            CALL    TA.TA2
            CALL    TA.ABFR2
            JR      S9.USR24

S9.USR33:   LD      A,(TS.TK)           ;Tastennummer an BASIC uebergeben
            POP     DE
            POP     DE
            PUSH    AF

            CALL    S9.USR7

            POP     AF
            JR      S9.USR40

S9.USR7:    LD      B,80H               ;Warteschleife
            PUSH    BC
            LD      B,-1
            DJNZ    $-0
            POP     BC
            DJNZ    $-6
            RET

S9.USR8:    LD      B,36
S9.USR9:    LD      (IX+0),L
            LD      (IX+1),H
            INC     IX
            INC     IX
            DJNZ    S9.USR9
            RET

            TITLE   'weitere Anschlussroutinen'
            PAGE
;****************************************************************
;*               Speicherende uebergeben                        *
;****************************************************************
S9.MEMCK:   LD      B,HIGH(S0.MEMCK)
            LD      A,LOW(S0.MEMCK)
            RET
;****************************************************************
;*               Veraenderte Routine fuer   O U T               *
;****************************************************************
S9.OUT:     CALL    BC.C091
            LD      A,02CH
            CALL    BC.C006
            PUSH    DE
            CALL    BC.C091
            LD      C,E
            POP     DE
            LD      B,E
            POP     DE
            LD      A,E
            RET
;****************************************************************
;*               Routine fuer das  BASIC - Token   S V C        *
;****************************************************************
S9.SVC:     LD      (BC.D047),SP
            PUSH    HL
            LD      DE,BC.D101
            PUSH    DE
            LD      DE,S9.ABAUP         ;Standardzieladresse fuer  SVC
            LD      BC,0                ;Par.zaehler gleich 0
            PUSH    DE
            CALL    BC.C032
            JP      Z,BC.CALL2
            JP      BC.CALL1
;****************************************************************
;*               Routine fuer das  BASIC - Token   G R F        *
;****************************************************************
; S9.GRF:     LD      (BC.D047),SP
;             PUSH    HL
;             LD      DE,BC.D101
;             PUSH    DE
;             LD      DE,ABGUP            ;Standardzieladresse fuer  GRF
;             LD      BC,0                ;Par.zaehler gleich 0
;             PUSH    DE
;             CALL    BC.C032
;             JPZ     BC.CALL2
;             JP      BC.CALL1

S9.OUTLG    EQU     $

            PAGE
;****************************************************************
;*               suchen der  BASIC - Variable   n a $           *
;*               -----------------------------------------------*
;*               Eingang:   S2.RBBR+1      1. Namenszeichen     *
;*                          S2.RBBR        2. Namenszeichen     *
;*               Ausgang:   (HL)           Adresse der Variable *
;*                          (DE)           Laenge  der Variable *
;*                          (HL)=(DE)=0    na$ existiert nicht  *
;****************************************************************
S9.SUSY:    XOR     A                   ;CY=0
            LD      HL,(BC.D024)        ;1.Byte des Ber. f. einf. Var.
            LD      BC,(BC.D025)        ;1.Byte des Ber. f. Dim.  Var.
            LD      DE,7                ;D = 0 , E = 7
S9.SUCHE:   SBC     HL,BC
            JR      NC,S9.ENDEV         ;wenn Ber. einf. Var. zu Ende
            ADD     HL,BC               ;HL wieder herstellen
            LD      A,(S2.RBBR)         ;"Y" + 80H  fuer Y$
            CP      (HL)
            INC     HL
            JR      NZ,S9.NISY          ;wenn nicht  SY$
            LD      A,(S2.RBBR+1)
            CP      (HL)
            JR      NZ,S9.NISY          ;wenn nicht  SY$
            INC     HL
            LD      E,(HL)              ;DE enthaelt Laenge der Zeichenkette
            INC     HL
            INC     HL
            LD      B,(HL)              ;L(Zeichenkettenadresse)
            INC     HL
            LD      H,(HL)              ;H(Zeichenkettenadresse)
            LD      L,B
            JR      S9.UEBGA

S9.NISY:    XOR     A                   ;CY=0
            ADD     HL,DE               ;zeigt auf naechste Variable
            JR      S9.SUCHE
S9.ENDEV:   LD      E,0                 ;Laenge=0 wenn SY$ nicht gefunden

S9.UEBGA:   RET

S9.ERSTR:   LD      H,'E'               ;ER$ suchen
            LD      L,52H+80H
S9.NSTR:    LD      (S2.RBBR),HL
            CALL    S9.SUSY
            LD      A,D
            OR      E
            RET

S9.ERS:     PUSH    AF
            CALL    S9.ERSTR
            JR      Z,S9.ERS1
            LD      DE,6
            ADD     HL,DE
            POP     AF
            LD      (HL),A
            RET
S9.ERS1:    POP     AF
            RET

            TITLE   'retten und laden der Register'
            PAGE
;****************************************************************
;*  S A V E  ---   retten der Register                          *
;****************************************************************
S9.SAVE:    LD      (S0.STACK-2),SP
            LD      SP,S0.STACK-2
            PUSH    AF
            PUSH    BC
            PUSH    DE
            PUSH    IX
            PUSH    IY
            PUSH    HL
            LD      SP,(S0.STACK-2)
            POP     HL                  ;Ruecksprungadresse
            LD      SP,S0.STACK-14
            PUSH    HL
            LD      (TS.STACK),SP
            LD      HL,(S0.STACK-14)
            RET

;****************************************************************
;*  L O A D  ---   laden der Register                           *
;****************************************************************
S9.LOAD:    CALL    S9.TALOE
            LD      HL,S0.STACK
            LD      (TS.STACK),HL
            POP     HL
            LD      SP,(S0.STACK-2)
            INC     SP
            INC     SP
            PUSH    HL
            LD      SP,S0.STACK-14
            POP     HL
            POP     IY
            POP     IX
            POP     DE
            POP     BC
            POP     AF
            LD      SP,(S0.STACK-2)
            RET

            TITLE   'OPEN- / CLOSE- Routine'
            PAGE
;****************************************************************
;*                OPEN - Routine                                *
;*                CALL &B406,geraet,{"I"|"O"|"M"},label         *
;****************************************************************
S9.ROP1:    LD      A,-1                ;Merker relatives OPEN
            OR      A
            JR      S9.ROP2
S9.ROP3:    LD      A,(S2.DNR)          ;Output
            BIT     7,A
            JR      Z,S9.ROP4
            RES     7,A
            INC     A
            JP      S9.OP4+3
S9.ROP4:    SET     7,A
            NEG
            LD      D,A
            CALL    K1.GNLMN
            JR      S9.OP5
S9.ROP7:    LD      A,(S2.DNR)          ;Input
            BIT     7,A
            JR      Z,S9.ROP8
            RES     7,A
            INC     A
            JP      S9.OP21+3
S9.ROP8:    SET     7,A
            NEG
            LD      D,A
            CALL    K1.GNLMN
            JP      S9.OP22

S9.OPEN:    INC     SP
            INC     SP
            CALL    S9.SAVE
S9.OPEN1:   CALL    S9.AUP
            XOR     A                   ;Merker absolutes OPEN
S9.ROP2:    PUSH    AF
            LD      HL,S2.IM
            LD      B,0
S9.OP1:     LD      A,(IX+4)            ;Geraeteadresse
            CP      1
            JR      Z,S9.OP2
            SET     1,B                 ;Geraet 2
            JR      S9.OP7
S9.OP2:     SET     0,B                 ;Geraet 1
S9.OP7:     LD      A,(IX+0)            ;label
            LD      (S2.DNR),A
            LD      A,(IX+2)            ;(I)nput oder (O)utput ?
            CP      'I'
            JR      Z,S9.OP20
            CP      'M'
            JR      NZ,S9.OP3
            SET     4,B                 ;MOD Verarbeitung
S9.OP3:     INC     HL                  ;Output
            LD      A,B
            LD      (HL),A
            CALL    S9.RGLO
            CALL    K1.GNRE
            POP     AF
            JP      NZ,S9.ROP3
            CALL    K1.GNRW
S9.OP4:     LD      A,(S2.DNR)          ;Datei positionieren
            DEC     A
            LD      D,A
            CALL    K1.GNLPN
S9.OP5:     LD      A,(S2.OM)           ;MOD - Verarbeitung
            BIT     4,A
            JR      Z,S9.OP13
            CALL    K1.GNLP
            CALL    K1.GNRM
            CALL    K1.GNRM
            LD      (IX+4),2
            CALL    K1.ARMB
            CALL    K1.F17
            CALL    K1.ARBT
            CALL    K1.LHLBC
            LD      DE,S0.PFFA
            LDIR
            CALL    K1.RCZP
            PUSH    DE
            CALL    K1.GNRM
            POP     HL
            JR      S9.OP14
S9.OP13:    LD      HL,S0.PFFA
S9.OP14:    LD      (S2.POIA),HL
            CALL    K1.GNSTS
            JR      S9.OPR

S9.OP20:    LD      A,B                 ;Input
            LD      (HL),A
            CALL    S9.RGLI
            CALL    K1.GNRE
            POP     AF
            JP      NZ,S9.ROP7
            CALL    K1.GNRW
S9.OP21:    LD      A,(S2.DNR)          ;Datei positionieren
            DEC     A
            LD      D,A
            CALL    K1.GNLPN
S9.OP22:    LD      BC,00400H           ;Eingabepuffer fuellen
            CALL    K1.EIN

S9.OPR:     JP      S9.RBAUP
;****************************************************************
;*                 CLOSE - Routine                              *
;*                 CALL &B409,{"I"|"O"}                         *
;****************************************************************
S9.CLOSE:   INC     SP
            INC     SP
            CALL    S9.SAVE
S9.CLOS1:   CALL    S9.AUP
            XOR     A
S9.RCL2:    PUSH    AF
            LD      A,(IX+0)
            CP      'O'
            JR      Z,S9.CLO1

            POP     AF                  ;CLOSE Input
            EX      AF,AF'              ;'
            LD      A,(S2.IM)
            OR      A
S9.CLO2:    JP      Z,S9.RIVF
            CALL    S9.RGLI
            EX      AF,AF'              ;'
            JR      NZ,S9.RCL3
            CALL    K1.GNRW
            CALL    K1.GNRA
S9.RCL4:    CALL    S9.MIR
S9.CLR:     JR      S9.OPR

S9.CLO1:    POP     AF                  ;CLOSE Output
            EX      AF,AF'              ;'
            LD      A,(S2.OM)
            OR      A
S9.CLO3:    JP      Z,S9.WRTVF
            BIT     7,A
            JR      Z,S9.CLO4
            XOR     A
            JR      S9.CLO3
S9.CLO4:    CALL    S9.RGLO
            CALL    K1.AUS
            CALL    K1.GNCLS
            EX      AF,AF'              ;'
            JR      NZ,S9.RCL5
            CALL    K1.GNRW
            CALL    K1.GNRA
S9.RCL5:    CALL    S9.MOR
            JR      S9.CLR

S9.RCL1:    LD      A,-1
            OR      A
            JR      S9.RCL2
S9.RCL3:    CALL    K1.GNLP
            JR      S9.RCL4

S9.MIR:     XOR     A
            LD      (S2.IM),A
            LD      (0B41EH),A
            LD      A,0C9H
            LD      (0B422H),A
            RET

S9.MOR:     XOR     A
            LD      (S2.OM),A
            LD      (0B420H),A
            LD      A,0C9H
            LD      (0B425H),A
            RET

            TITLE   'READ / WRITE - Routinen'
            PAGE
;****************************************************************
;*                 READ - Routine                               *
;*                 CALL &B40C                                   *
;****************************************************************
S9.READ:    INC     SP
            INC     SP
            CALL    S9.SAVE
S9.READ1:   LD      A,(S2.IM)
            OR      A
            JR      Z,S9.CLO2
            CALL    S9.RGLI
            LD      BC,400H             ;Eingabepuffer fuellen
            CALL    K1.EIN
S9.RE9:     JR      S9.CLR
S9.READ2:   LD      A,(S2.IM)
            OR      A
            JR      Z,S9.CLO2
            CALL    S9.RGLI
            CALL    K1.EINP
            CALL    K1.BM
            CALL    Z,S9.BM3
            JR      S9.RE9
;****************************************************************
;*                 WRITE - Routine                              *
;*                 CALL &B40F                                   *
;****************************************************************
S9.WRITE:   INC     SP
            INC     SP
            CALL    S9.SAVE
S9.WRIT1:   LD      A,(S2.OM)
            OR      A
            JR      Z,S9.CLO3
            CALL    S9.RGLO
            CALL    K1.AUS              ;Ausgabepuffer leeren
S9.WR9:     JR      S9.RE9
;****************************************************************
;*               IX und IY  fuer Eingabekassette laden          *
;****************************************************************
S9.RGLI:    LD      A,(S2.IM)
            BIT     1,A
            JR      NZ,S9.RGLI1
            CALL    K1.RGL1
            JR      S9.RGLI2
S9.RGLI1:   CALL    K1.RGL2
S9.RGLI2:   RET
;****************************************************************
;*               IX und IY  fuer Ausgabekassette laden          *
;****************************************************************
S9.RGLO:    LD      A,(S2.OM)
            BIT     1,A
            JR      NZ,S9.RGLO1
            CALL    K1.RGL1
            JR      S9.RGLO2
S9.RGLO1:   CALL    K1.RGL2
S9.RGLO2:   RET

            TITLE   'Eingabedatei ==> Ausgabedatei'
            PAGE
;****************************************************************
;*               Kopieren der Eingabedatei in die Ausgabedatei  *
;****************************************************************
S9.COPY:    LD      A,(S2.IM)           ;Eingabe eroeffnet
            OR      A
            JP      Z,S9.RIVF
            LD      A,(S2.OM)           ;Ausgabe eroeffnet
            OR      A
            JP      Z,S9.WRTVF

S9.COP1:    LD      HL,(K2.TXEND)       ;BC <== Laenge des belegten Puffers
            LD      BC,S0.PFFI
            OR      A
            SBC     HL,BC
            PUSH    HL
            POP     BC
            LD      HL,S0.PFFI          ;HL <== Eingabepufferadresse
            LD      A,B
            OR      C
            JR      Z,S9.COP3

S9.COP5:    PUSH    HL                  ;Ausgabepuffer voll ?
            PUSH    BC
            LD      HL,(S2.POIA)
            LD      BC,S0.PFFA+400H
            OR      A
            SBC     HL,BC
            JR      NZ,S9.COP8
            CALL    S9.RGLO             ;Ja / Ausgabe des Pufferinhaltes
S9.COP7:    CALL    K1.AUS
S9.COP8:    POP     BC
            POP     HL
            LD      A,(HL)              ;A  <== naechstes Zeichen
            PUSH    HL
            LD      HL,(S2.POIA)        ;A  ==> Ausgabepuffer
            LD      (HL),A
            INC     HL
            LD      (S2.POIA),HL
            POP     HL
            INC     HL
            DEC     BC
            LD      A,B
            OR      C
            JR      NZ,S9.COP5          ;weiter mit naechstem Eingabezeichen

S9.COP3:    CALL    S9.RGLI             ;IX , IY  entspr. Eingabegeraet
            CALL    K1.BM               ;Bandmarke erreicht ?
            JR      Z,S9.COP2           ;Ja

            LD      BC,400H             ;naechste Datenbloecke einlesen
            CALL    K1.EIN
            JR      S9.COP1

S9.COP2:    CALL    K1.GNRM
            CALL    K1.GNSTS
S9.COP9:    JP      0B403H

            TITLE   'Anfang von Grafikerw.'
            PAGE
;****************************************************************
;*               Anfang von Grafikerweiterungs-UPs              *
;****************************************************************
;ABGUP: INC  SP
;      INC  SP
;      CALL SAVE
;      CALL AUP
;      PUSH IX
;      POP  IY
;GB1:   LD   A,B
;      OR   C
;      JRZ  GB2-#
;      INC  IY
;      INC  IY
;      DEC  BC
;      JR   GB1-#
;GB2:   LD   A,(IY-2)
;      CMP  0
;      JRZ  RBAUP-#
;      JMP  RBAUP              ;Adresse im ersten 100H-Bereich

            TITLE   'Anfang und Ende von Assemblererw.'
            PAGE
;****************************************************************
;*               Anfang von Assemblererweiterungs-UPs           *
;****************************************************************
S9.ABAUP:   INC     SP
            INC     SP
            CALL    S9.SAVE
            CALL    S9.AUP
            PUSH    IX
            POP     IY
S9.AB1:     LD      A,B
            OR      C
            JR      Z,S9.AB2
            INC     IY
            INC     IY
            DEC     BC
            JR      S9.AB1
S9.AB2:     LD      A,(IY-2)
            CP      0
            JP      NZ,S4.UM16          ;SVC &1i,...
            LD      HL,S9.ADRTB
S9.AB3:     LD      A,(HL)
            LD      B,A
            INC     HL
            LD      A,(IY-4)
S9.AB0:     CP      (HL)
            INC     HL
            LD      E,(HL)
            INC     HL
            LD      D,(HL)
            INC     HL
            JR      Z,S9.AB01
            DJNZ    S9.AB0
            JR      S9.RBAUP
S9.AB01:    PUSH    DE
            RET

S9.AUP:     LD      IX,(S0.STACK-2)
            INC     IX
            INC     IX
            RET
;****************************************************************
;*               Ende der Assemblererweiterungs-UPs             *
;****************************************************************
S9.RBAUP:   CALL    S4.UM6+6
            CALL    S9.RUP
            CALL    S9.LOAD
            RET

S9.RUP:     LD      HL,(S0.STACK-2)
            LD      BC,(S0.STACK-6)
S9.RBP1:    LD      A,B
            OR      C
            JR      Z,S9.RBP2
            INC     HL
            INC     HL
            DEC     BC
            JR      S9.RBP1
S9.RBP2:    LD      (S0.STACK-2),HL
            RET

            TITLE   'Adresstabelle der Systemanschlussroutinen'
            PAGE
;****************************************************************
;*               Adresstabelle der B A S I C -Anschlussroutinen *
;****************************************************************
S9.ADRTB:   DB      60                  ;Anzahl der Routinen

            DB      0
            DW      S9.ALLUP

            DB      1
            DW      S9.MEMO

            DB      2
            DW      S9.BLD

            DB      3
            DW      S9.BC1

            DB      4
            DW      S9.AP

            DB      5
            DW      S9.NPOS

            DB      6
            DW      S9.APOS

            DB      7
            DW      S9.NFENS

            DB      8
            DW      S9.SFENS

            DB      9
            DW      S9.CPOS

            DB      10
            DW      S4.SVC10

            DB      11
            DW      S9.RBAUP

            DB      12
            DW      S9.CONO

            DB      13
            DW      S9.SVC13

            DB      14
            DW      S9.SVC14

            DB      15
            DW      S9.ICON

            DB      16
            DW      S9.OCON

            DB      17
            DW      S9.SVC17

            DB      18
            DW      S9.SVC18

            DB      19
            DW      S9.SVC19

            DB      20
            DW      S9.OPEN1

            DB      21
            DW      S9.ROP1

            DB      22
            DW      S9.MRIO

            DB      23
            DW      S9.MRAO

            DB      24
            DW      S9.READ1

            DB      25
            DW      S9.READ2

            DB      26
            DW      S9.WRIT1

            DB      27
            DW      S9.SVC27

            DB      28
            DW      S9.COPY

            DB      29
            DW      S9.CLOS1

            DB      30
            DW      S9.RCL1

            DB      31
            DW      S9.MRAC

            DB      32
            DW      S9.SVC32

            DB      33
            DW      S9.SVC33

            DB      39
            DW      S9.SVC39

            DB      40
            DW      S9.SPAUS

            DB      41
            DW      S9.SPI

            DB      42
            DW      S9.SPO

            DB      43
            DW      S9.SVC43

            DB      44
            DW      S9.SVC44

            DB      45
            DW      S9.IOC

            DB      46
            DW      S9.TAS0

            DB      47
            DW      S9.HCP

            DB      50
            DW      S9.AL

            DB      51
            DW      S9.RL

            DB      52
            DW      S4.SVC52

            DB      60
            DW      S4.SVC60

            DB      61
            DW      S4.SVC61

            DB      62
            DW      S4.SVC62

            DB      63
            DW      S4.SVC63

            DB      64
            DW      S4.SVC64

            DB      65
            DW      S4.SVC65

            DB      66
            DW      S4.SVC66

            DB      70
            DW      S4.SC700

            DB      71
            DW      S4.SC710

            DB      72
            DW      S4.SC720

            DB      73
            DW      S4.SC730

            DB      74
            DW      S4.SC740

            DB      75
            DW      S4.SC750

            DB      76
            DW      S4.SC760


            TITLE   'Anschlussroutinen'
            PAGE
S9.HCP:     LD      A,(IX+0)            ;Ausgabe eines HARDCOPY auf LIST-Device
            LD      (MS.TK),A           ;Parameterwert zwischenspeichern
            CALL    S4.UM6+6            ;entspr.  "RBAUP"
            CALL    S9.RUP              ;  "         "
            CALL    S9.LOAD             ;  "         "
            PUSH    AF
            PUSH    BC
            PUSH    DE
            PUSH    HL
            LD      A,(MS.TK)
            CP      2                   ;aktuelles Bildfenster
            JR      Z,S9.HCP2
            CP      1                   ;Zeile 1 bis 24
            JR      Z,S9.HCP1
            CP      0                   ;Zeile 1 bis 22
            JR      NZ,S9.HCPE
            LD      B,22
            JR      S9.HCP11

S9.HCP1:    LD      B,24
S9.HCP11:   LD      HL,(MS.BWSA)
S9.HCP12:   PUSH    BC
            LD      B,80
S9.HCP13:   LD      A,(HL)
            LD      C,A
            INC     HL
            CALL    BC.LISTX
            DJNZ    S9.HCP13
            CALL    S9.CR
            POP     BC
            DJNZ    S9.HCP12
            JR      S9.HCP3

S9.HCP2:    LD      HL,(MS.ZMAX)
            LD      BC,(MS.ZMIN)
            OR      A
            SBC     HL,BC
            LD      B,L
            INC     B
            PUSH    BC                  ;Anzahl Fensterzeilen
            LD      A,H
            INC     A
            LD      (MS.TK),A           ;Anzahl Fensterspalten
            CALL    MO.BWSAF
            POP     BC
S9.HCP21:   PUSH    BC
            PUSH    HL
            LD      A,(MS.TK)
            LD      B,A
S9.HCP22:   LD      A,(HL)
            LD      C,A
            INC     HL
            CALL    BC.LISTX
            DJNZ    S9.HCP22
            POP     HL
            LD      BC,80
            ADD     HL,BC
            CALL    S9.CR
            POP     BC
            DJNZ    S9.HCP21
S9.HCP3:    CALL    S9.CR
            CALL    S9.CR
S9.HCPE:    POP     HL
            POP     DE
            POP     BC
            POP     AF
            RET

S9.CR:      LD      C,00DH
            CALL    BC.LISTX
            LD      C,00AH
            CALL    BC.LISTX
            RET

            PAGE
S9.ALLUP:   LD      A,(IX+2)            ;Aufruf eines allg. Assembler-UP
            LD      H,(IX+1)
            LD      L,(IX+0)
            CP      0
            CALL    NZ,S4.UM15          ;SVC 0,0, [... ,] &1i,adresse
            CALL    TA.MM               ;SVC 0,0, [... ,] 0  ,adresse
S9.ALUP1:   JP      0B403H

S9.MEMO:    LD      H,(IX+1)            ;Speicheranzeige  16*16  Byte
            LD      L,(IX+0)
            LD      A,(IX+2)
            LD      (S2.DMANF),HL
            CP      0
            CALL    NZ,S4.UM15
            CALL    S1.MEA
            JR      S9.ALUP1

S9.BLD1:    INC     SP                  ;gesamtes Bild loeschen
            INC     SP
            CALL    S9.SAVE
            CALL    MO.BILO
            JR      S9.ALUP1

S9.BLD:     CALL    MO.FSLO             ;Bildfenster loeschen
            JR      S9.ALUP1

S9.BC1:     CALL    S0.BWSUS            ;Copy  BWSA ==> BWS
            JR      S9.ALUP1

S9.AP:      CALL    S9.ANFG             ;BASIC-Anfangsprogramm laden
S9.SC52E    EQU     $
S9.AP1:     JR      S9.ALUP1

            PAGE
S9.AL:      LD      A,(IX+2)            ;Segment            absoluter Loader
            PUSH    AF
            LD      A,(IX+0)            ;Geraet
            CALL    S9.RGLI+3
            CALL    S9.MRPAR
            POP     AF
            CP      0
            JR      Z,S9.AL3
            CALL    S4.UM15
            CALL    S4.BWS
S9.AL3:     CALL    LO.AL
S9.AL2:     PUSH    AF
            LD      HL,S0.BWSB
            LD      DE,S2.STACK
            LD      BC,S0.BASCL-S0.BWSB
            LDIR
            POP     AF
            JP      NZ,LO.LO13
S9.AL1:     JR      S9.SC52E

S9.RL:      LD      L,(IX+0)            ;Ladeanfangsadresse relativer Loader
            LD      H,(IX+1)
            LD      (S2.PRGN),HL
            LD      A,(IX+4)            ;Segment
            PUSH    AF
            LD      A,(IX+2)            ;Geraet
            CALL    S9.RGLI+3
            CALL    S9.MRPAR
            POP     AF
            CP      0
            JR      Z,S9.RL1
            CALL    S4.UM15
            CALL    S4.BWS
S9.RL1:     CALL    LO.RL
            JR      S9.AL2

S9.MRIO:    LD      A,(IX+0)            ;MRES Eingabe-Eroeffnung
            LD      (S2.IM),A
            CALL    S9.RGLI+3
            CALL    S9.MRPAR
            CALL    K1.MREPO
            JR      S9.AL2

S9.MRAO:    LD      A,(IX+0)            ;MRES Ausgabe-Eroeffnung
            LD      (S2.OM),A
            CALL    S9.RGLO+3
            CALL    S9.MRPAR
            CALL    K1.MRAPO
            JR      S9.AL2

S9.MRAC:    CALL    S9.RGLO             ;MRES Ausgabe-Abschluss
            CALL    K1.MRCLS
            JR      S9.AL1


S9.MRPAR:   PUSH    IX                  ;MRES-Parameter uebernehmen
            PUSH    IY
            PUSH    IY
            LD      H,'S'
            LD      L,59H+80H
            CALL    S9.NSTR
            JR      Z,S9.MR1
S9.MR1:     POP     DE
            LD      BC,14
            LDIR
            POP     IY
            POP     IX
            RET

            PAGE
S9.SPAUS:   CALL    S0.BWSU1            ;B W S  ===>  B W S A
            LD      HL,S9.CIN
            LD      BC,S9.CON
S9.SPA:     LD      (BC.CIN+1),HL
            LD      (BC.CON+1),BC
            JR      S9.CONOO

S9.SPI:     LD      HL,(MS.BWSA)
            LD      (S2.DMANF),HL
            LD      HL,S9.SPIN
            LD      BC,S9.IOX
            JR      S9.SPA

S9.SPO:     LD      HL,(MS.BWSA)
            LD      (S2.DMANF),HL
            LD      HL,S9.IOX
            LD      BC,S9.SPOUT
            JR      S9.SPA

S9.SPIN:    PUSH    HL
            LD      HL,(S2.DMANF)
            LD      A,(HL)
            INC     HL
            LD      (S2.DMANF),HL
            POP     HL
            RET

S9.SPOUT:   PUSH    HL
            LD      HL,(S2.DMANF)
            LD      (HL),C
            INC     HL
            LD      (S2.DMANF),HL
            POP     HL
            RET

S9.ICON:    LD      HL,0B41EH
            JR      $+5
S9.OCON:    LD      HL,0B420H
            LD      (HL),-1
            LD      A,(IX+0)
            INC     HL
            LD      (HL),A
            JR      S9.CONOO

            PAGE
S9.CONO:    LD      HL,S9.CONOC
            LD      (BC.CON+1),HL
S9.CONOO:   JP      0B403H

S9.APOS:    LD      HL,(MS.MCZ)         ;alte Position rueckspeichern
S9.APOS1:   LD      (MS.ZPOS),HL
            LD      A,6                 ;Cursor setzen
            LD      (MS.CMD),A
            CALL    MO.MONI
            JR      S9.CONOO

S9.NPOS:    LD      A,7                 ;Cursor loeschen
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      HL,(MS.ZPOS)        ;alte Position retten
            LD      (MS.MCZ),HL
            LD      H,(IX+0)            ;neue Position uebernehmen
            LD      L,(IX+2)
            DEC     H
            DEC     L
            LD      (MS.ZPOS),HL
            JR      S9.CONOO

S9.CPOS:    LD      H,(IX+0)            ;neue Position uebernehmen
            LD      L,(IX+2)
            DEC     H
            DEC     L
            JR      S9.APOS1

S9.NFENS:   LD      H,(IX+2)            ;zmin , zmax , smin , smax
            LD      L,(IX+6)            ;7 6    5 4    3 2    1 0
            LD      (MS.ZMIN),HL
            LD      H,(IX+0)
            LD      L,(IX+4)
            LD      (MS.ZMAX),HL
            JR      S9.CONOO

S9.SFENS:   CALL    MO.VB2
            JR      S9.CONOO

S9.IOC:     LD      A,(IX+0)            ;Umschalter  I O C
            LD      (S2.IOC),A
S9.IOC1:    CALL    S1.STAT
S9.TAS01:   JR      S9.CONOO

S9.TAS0:    LD      A,(IX+0)            ;Umschalter  P/S - T A S
            LD      (TS.KGMER),A
            JR      S9.IOC1

S9.SVC13:   LD      A,(IX+0)            ;setzen von  MS.DIRES
            LD      (MS.DIRES),A
            JR      S9.TAS01

            PAGE
S9.SVC17:   LD      HL,S9.WRTV          ;L-Device als Kassettenausgabe
            LD      (00316H),HL
            JR      S9.TAS01

S9.SVC18:   LD      A,(IX+0)            ;MRES-Verzeichniseintr. uebermitteln
            PUSH    AF
            LD      A,(IX+2)
            LD      (S2.IM),A
            CALL    S9.RGLI+3
            POP     AF
            CP      2
            JR      Z,S9.SC181
            CP      1
            JR      NZ,S9.TAS01
            CALL    K1.GNRE             ;Par=1  OPEN
            CALL    K1.GNRW
            LD      D,2
            CALL    K1.GNLPN
            CALL    K1.GNRD
            CALL    K1.GNRD
            LD      A,(KS.PUFFS+4)
            DEC     A
            LD      (S2.VZM),A
S9.SC181:   LD      A,(S2.VZM)          ;Par=2  READ
            DEC     A
            LD      (S2.VZM),A
            CP      0FFH
            JR      Z,S9.SC183
            CALL    K1.GNRD
S9.SC184:   LD      H,'S'
            LD      L,59H+80H
            CALL    S9.NSTR
            JR      Z,S9.TAS01
            EX      DE,HL
            LD      HL,KS.PUFFS+1
            LD      BC,23
            LDIR
S9.SC182:   JR      S9.TAS01
S9.SC183:   INC     A
            LD      (S2.VZM),A
            LD      HL,KS.PUFFS+1
            LD      DE,KS.PUFFS+2
            LD      BC,13
            LD      (HL),' '
            LDIR
            JR      S9.SC184

            PAGE
S9.SVC43:   LD      A,(S2.IM)           ;Eingabedatei an Anfang pos.
            OR      A
            JP      Z,S9.RIVF
            CALL    S9.RGLI+3
            LD      D,0
            CALL    K1.BM
            JR      NZ,$+3
            INC     D
            CALL    K1.GNLMN
            JR      S9.SC182

S9.SVC44:   LD      A,(IX+0)            ;Umschalter ON-/IN- KEY
            CP      1
            JR      Z,S9.SC441
            CP      2
            JR      Z,S9.SC442
            LD      HL,S9.USER
            LD      A,0C3H
            LD      DE,S9.CSTSX
            JR      S9.SC444
S9.SC441:   LD      HL,S9.USER2
            JR      S9.SC443
S9.SC442:   LD      HL,S9.USER3
S9.SC443:   LD      A,0AFH
            LD      DE,000C9H
S9.SC444:   LD      (BC.USR+1),HL
            LD      (BC.CSTSX),A
            LD      (BC.CSTSX+1),DE
S9.SC449:   JR      S9.SC182

S9.SVC14:   LD      A,(IX+0)            ;HOME-Taste ein-/aus- schalten
            OR      A
            JR      NZ,$+6
            LD      A,0C9H
            JR      $+4
            LD      A,0C3H
            LD      (0B415H),A
            JR      S9.SC449

            PAGE
S9.SVC19:   LD      A,(S2.IM)           ;Eingabegeraet aktiv JA/NEIN ?
            OR      A
            JR      NZ,$+6
            LD      A,'0'
            JR      $+4
            LD      A,'1'
            CALL    S9.ERS
S9.SC191:   JR      S9.SC449

S9.SVC32:   LD      IY,0B422H           ;Eingabe-Kodetransformation ein
            JR      S9.SC331

S9.SVC33:   LD      IY,0B425H           ;Ausgabe-Kodetransformation ein
S9.SC331:   LD      H,(IX+1)
            LD      L,(IX+0)
            LD      (IY+0),0C3H
            LD      (IY+1),L
            LD      (IY+2),H
S9.SC333:   JR      S9.SC191

S9.SVC27:   LD      A,(IX+0)
            CP      2
            PUSH    AF
            LD      H,'K'
            LD      L,53H+80H
            CALL    S9.NSTR
            JR      Z,S9.SC271
            POP     AF
            PUSH    HL
            PUSH    DE
            JR      Z,S9.SC272
            LD      A,(S2.IM)           ;wert = 1  ...   Eingabe
            OR      A
            JP      Z,S9.CLO2
            POP     BC                  ;KS$="   "
            DEC     BC
            POP     DE
            PUSH    DE
            INC     DE
            LD      (HL),' '
            LDIR
            CALL    S9.RGLI             ;Datenblock einlesen
            CALL    K1.EINP
            CALL    K1.BM
            JR      NZ,S9.SC273
            CALL    S9.BM3
            POP     HL
            JR      S9.SC333
S9.SC273:   CALL    K1.LHLBC            ;KS$= Datenblock
            POP     DE
            LDIR
            JR      S9.SC279
S9.SC272:   LD      A,(S2.IM)           ;wert = 2  ...   Ausgabe
            OR      A
            JP      Z,S9.CLO2
            CALL    S9.RGLI
            POP     DE
            CALL    K1.LHLBC
            PUSH    BC
            CALL    K1.GNRM
            POP     BC
            POP     HL
            CALL    K1.GNRWR
S9.SC279:   CALL    K1.GNSTS
            JR      S9.SC333
S9.SC271:   POP     AF
S9.SC278:   JR      S9.SC333

S9.SVC39:   LD      A,(IX+2)            ;Richtung
            LD      B,52
            ADD     A,B
            LD      (MS.CMD),A
            LD      B,(IX+0)            ;Anzahl Verschiebungen
S9.SC391:   CALL    MO.MONI
            DJNZ    S9.SC391
S9.SC399:   JR      S9.SC278



;           END
;           PN      S424
            TITLE   'BASIC- SVC - Routinen fuer Speichererweiterung'
            PAGE
;****************************************************************
;*               BASIC- SVC - Routinen fuer Speichererweiterung *
;*  Version      -----------------------------------------------*
;*               Programmierer: M. Herbote --- K EAW  ZFT (WFT) *
;*  V 2 . 1      -----------------------------------------------*
;*               Stand        : 14.Maerz 1985                   *
;****************************************************************

S4.V1       EQU     '1'                 ;  1 ... ohne   Erweiterung
                                        ;  8 ... mit    Erweiterung

S4.V2       EQU     '1'                 ;  1 ... DEG 2.i von Kassette
                                        ;  2 ... DEG 2.i von EPROM

S4.SBST     EQU     0C0H                ;Adresse der Speicherblockst.

S4.U1       EQU     000C0H              ;Adresse der Umschalt-UP
S4.U2       EQU     00040H              ;Adresse der Einzel  -UP


            IF      S4.V1 AND 1
S4.UM6:     DW      0
            DW      0
            DW      0
S4.BWS      EQU     $
S4.BWS1     EQU     $
S4.UM15     EQU     $
S4.BSCN:    RET

S4.SVC10    EQU     $
S4.SVC52    EQU     $
S4.SVC60    EQU     $
S4.SVC61    EQU     $
S4.SVC62    EQU     $
S4.SVC63    EQU     $
S4.SVC64    EQU     $
S4.SVC65    EQU     $
S4.SVC66    EQU     $
S4.SVC67    EQU     $
S4.SVC68    EQU     $
S4.SVC69    EQU     $
S4.SC700    EQU     $
S4.SC710    EQU     $
S4.SC720    EQU     $
S4.SC730    EQU     $
S4.SC740    EQU     $
S4.SC750    EQU     $
S4.SC760    EQU     $
S4.UM16:    JP      0B403H

S4.RES:     LD      HL,S0.BWSB
            LD      DE,S2.STACK
            LD      BC,S0.BASCL-S0.BWSB
            LDIR
            JP      S1.RES1
            ENDIF

            PAGE
            IF      S4.V1 AND 8
;****************************************************************
;*               T I M E R  -  Routine                          *
;****************************************************************
S4.SVC10:   CALL    S4.TIM01
            JP      0B403H

S4.TIM01:   PUSH    HL
            PUSH    BC
            PUSH    AF
            LD      A,S0.CTC0
            OUT     (C),080H
            LD      A,0A7H
            OUT     (C),080H
            LD      A,060H
            OUT     (C),080H
            LD      HL,S4.TIM1
            LD      B,4
            LD      (HL),0
            INC     HL
            DJNZ    $-3
            POP     AF
            POP     BC
            POP     HL
            RET

S4.IRTIM:   PUSH    HL
            PUSH    AF
            LD      HL,S4.TIM4
            INC     (HL)
            LD      A,(HL)
            CP      064H
            JR      NZ,S4.TIM02
            LD      (HL),0
            DEC     HL
            INC     (HL)
            LD      A,(HL)
            CP      03CH
S4.TIM02:   JR      NZ,S4.TIM03
            LD      (HL),0
            DEC     HL
            INC     (HL)
            LD      A,(HL)
            CP      03CH
S4.TIM03:   JR      NZ,S4.TIM04
            LD      (HL),0
            DEC     HL
            INC     (HL)
S4.TIM04:   POP     AF
            POP     HL
            EI
            RETI

S4.TIM1     EQU     0B2FCH
S4.TIM4     EQU     S4.TIM1+3

            PAGE
;****************************************************************
;*               S V C 5 2   Ausgabe von Speicherbereichen      *
;*                           als  MRES-P-Dateien                *
;****************************************************************
S4.SVC52:   LD      A,(S2.OM)
            OR      A
            JP      Z,S9.WRTVF
            LD      L,(IX+4)            ;Anfangs- bzw. Start- Adresse
            LD      H,(IX+5)
            LD      C,(IX+2)            ;Anzahl Byte  bzw.  0
            LD      B,(IX+3)
            LD      (S2.PRGN),HL        ;Anfangsadresse
            ADD     HL,BC
            DEC     HL
            LD      (S2.PRGN+2),HL      ;Endadresse
            LD      A,(IX+0)            ;operation 1 bzw. 2
            CP      2
            JR      Z,S4.SC523
            CP      1
            JR      Z,S4.SC521
S4.SC52E:   JP      0B403H              ;Rueckkehr zu  BASIC

S4.SC521:   LD      A,(IX+6)            ;Segment
            OR      A
            JR      Z,S4.SC522
            CALL    S4.UM15
            CALL    S4.BWS
S4.SC522:   CALL    S9.RGLO
            CALL    LO.SAVE
            JR      S4.SC52E

S4.SC523:   CALL    S9.RGLO
            LD      DE,(S2.PRGN)
            XOR     A
            CALL    K1.SCHR
            LD      A,D
            CALL    K1.SCHR
            LD      A,E
            CALL    K1.SCHR
            CALL    K1.MRCLS
            JR      S4.SC52E

            PAGE
;****************************************************************
;*               Zusaetze zur Systeminitialisierung             *
;****************************************************************
S4.BSCN:    LD      HL,S4.UUM4          ;Umschalt - Unterprogramme laden
            LD      DE,S4.U1
            LD      BC,S4.UM7-S4.UUM4
            LDIR
            RET


S4.RES:     LD      SP,S0.STACK
            CALL    S4.BSCN
            LD      HL,S0.BWSB          ;BWS-Umschalt-UP's umladen
            LD      DE,S2.STACK
            LD      BC,S0.BASCL-S0.BWSB
            LDIR
            OUT     (C),S4.SBST+4       ;RESET-Sperre aus

            IF      S4.V2 AND 1         ;OPS (0000H,4000H) wegschalten
            LD      A,00000000B
            ENDIF
            IF      S4.V2 AND 2
            LD      A,00000001B
            ENDIF
            OUT     (C),S4.SBST+1

            IF      S4.V2 AND 1         ;OFS (1000H) zuschalten
            LD      A,10100101B
            ENDIF
            IF      S4.V2 AND 2
            LD      A,10110101B
            ENDIF
            OUT     (C),S4.SBST+0

            LD      SP,02900H
            LD      HL,02B00H           ;16K Byte-Merker (ZSM) loeschen
            LD      DE,02B01H
            LD      BC,8
            LD      (HL),0
            LDIR

            IF      S4.V2 AND 1
            XOR     A
            ENDIF
            IF      S4.V2 AND 2
            LD      A,00010011B         ;16K Byte-RAM Platte aus SYS0
            ENDIF
            LD      (S2.S1),A

            LD      HL,S4.UP            ;nachf. Progr.teil laden
            LD      DE,02A00H
            LD      BC,S4.UP1E-S4.UP
            LDIR
            JP      02A00H              ;entspricht  "UP"

            PAGE
;****************************************************************
;*               Start eines Programms von einer Platte  1iH    *
;****************************************************************
            DW      $                   ;STRT 1i,prog .... ....
            DB      'STRT'
            LD      H,7                 ;ZPOL=SYSZ , SPOL= 8
            LD      L,S0.SYSZ-1
            LD      (MS.ZPOL),HL
            LD      A,31
            LD      (MS.CMD),A
            CALL    MO.MONI
            CALL    S1.HBKON
            INC     HL
            EXX
            LD      E,10H
            CALL    S4.SC64
            OR      A
            JP      NZ,S1.SYSTB
            LD      (S2.SMHL),HL
            CALL    S4.UU4
            EXX
            PUSH    HL
            LD      DE,8
            OR      A
            SBC     HL,DE
            POP     DE
            EX      DE,HL
            LD      BC,22
            LDIR
            CALL    S4.BWS
            CALL    S0.BWSUS
            JP      S1.START

            PAGE
;****************************************************************
;*               Routinen  S0.BWSZU und S0.BWSAB  modifizieren  *
;****************************************************************
S4.BWS:     EXX
S4.BWS1     EQU     $

            IF      S4.V2 AND 1         ;SYS 1 - BWSZU
            LD      A,00000000B
            ENDIF
            IF      S4.V2 AND 2
            LD      A,00000001B
            ENDIF
            LD      (S2.STACK+5),A

            IF      S4.V2 AND 1         ;SYS 1 - BWSAB
            LD      A,10000000B
            ENDIF
            IF      S4.V2 AND 2
            LD      A,10000001B
            ENDIF
            LD      (S2.STACK+26),A

            LD      A,(HL)              ;SYS 2
            AND     00011100B
            RRCA
            RRCA
            INC     A
            LD      B,A
            LD      A,10000000B
            RLCA
            DJNZ    $-1
            LD      (S2.STACK+13),A     ;SYS 2 - BWSZU
            LD      (S2.STACK+30),A     ;SYS 2 - BWSAB
            RET

            PAGE
;****************************************************************
;*               Eingabe vom Zusatzspeicher aktivieren          *
;****************************************************************
S4.SVC61:   CALL    S4.SC63
            CALL    S4.SC600
            LD      HL,S4.EIN-2
            CALL    S4.LDIR
            LD      HL,S4.U2            ;"EIN"
            LD      BC,S9.IOX
S4.SC611:   JP      S9.SPA
;****************************************************************
;*               Ausgabe auf Zusatzspeicher aktivieren          *
;****************************************************************
S4.SVC62:   CALL    S4.SC63
            CALL    S4.SC600
            LD      HL,S4.AUS-2
            CALL    S4.LDIR
            LD      HL,S9.IOX
            LD      BC,S4.U2            ;"AUS"
            JR      S4.SC611
;****************************************************************
;*               Leserkanal   auf Erweiterung schalten          *
;****************************************************************
S4.SVC63:   CALL    S4.SC63
            CALL    S4.SC600
            LD      HL,S4.EIN-2
            CALL    S4.LDIR
            LD      HL,S4.U2            ;"EIN"
            LD      (BC.RIV+1),HL
            JP      0B403H
;****************************************************************
;*               Stanzerkanal auf Erweiterung schalten          *
;****************************************************************
S4.SVC64:   CALL    S4.SC63
            CALL    S4.SC600
            LD      HL,S4.AUS-2
            CALL    S4.LDIR
            LD      HL,S4.U2            ;"AUS"
            LD      (BC.WRTV+1),HL
            JP      0B403H
;****************************************************************
;*               Leser- und Stanzerkanal zuruecksetzen          *
;****************************************************************
S4.SVC65:   LD      HL,S9.RIV
            LD      (BC.RIV+1),HL
            LD      HL,S9.WRTV
            LD      (BC.WRTV+1),HL
            JP      0B403H
;****************************************************************
;*               Lese- und Schreib- pointer setzen              *
;****************************************************************
S4.SVC66:   INC     IX
            INC     IX
            CALL    S4.SC60
            CALL    S4.SC600
            LD      H,(IX+1)
            LD      L,(IX+0)
            PUSH    HL
            LD      H,(IX-1)
            LD      L,(IX-2)
            PUSH    HL
            LD      HL,S4.UM14-2
            JR      S4.SC699


;****************************************************************
;*               allgemeine Organisation des Zusatzspeichers    *
;****************************************************************
S4.SC600:   OR      A
            JR      NZ,S4.SC698
            LD      (S2.SMHL),HL
            RET
S4.SC698:   POP     HL
            JP      0B403H

S4.SVC60:   LD      HL,S4.UUM4
            LD      DE,S4.U1
            LD      BC,S4.UM7-S4.UUM4
            LDIR
            LD      A,(IX+0)            ;Parameter
            CP      1
            JR      Z,S4.SC601
            CP      2
            JR      Z,S4.SC602
            CP      3
            JR      Z,S4.SC603
            CP      4
            JR      Z,S4.SC604
            CP      5
            JR      Z,S4.SC605
            CP      6
            JR      Z,S4.SC606
            CP      7
            JR      Z,S4.SC607
            LD      A,3
            JR      S4.SC600

S4.SC601:   CALL    S4.SC60             ;par=1   16K initialisieren
            CALL    S4.SC600
            LD      HL,S4.UM1-2
S4.SC699:   CALL    S4.LDIR
            JP      S4.U2

S4.SC602:   CALL    S4.SC60             ;par=2   Schreib- = Lese- Pointer
            CALL    S4.SC600
            LD      HL,S4.UM8-2
            JR      S4.SC699

S4.SC603:   CALL    S4.SC60             ;par=3   setzen ersten freien Platz
            CALL    S4.SC600
            LD      HL,S4.UM9-2
            JR      S4.SC699

S4.SC604:   CALL    S4.SC60             ;par=4   Schreib- pointer = 1. fr. Platz
            CALL    S4.SC600
            LD      HL,S4.UM10-2
            JR      S4.SC699

S4.SC605:   CALL    S4.SC60             ;par=5   Lese-    pointer = Anfang
            CALL    S4.SC600
            LD      HL,S4.UM11-2
            JR      S4.SC699

S4.SC606:   CALL    S4.SC60             ;par=6   Schreib- pointer = Anfang
            CALL    S4.SC600
            LD      HL,S4.UM12-2
            JR      S4.SC699
S4.SC607:   CALL    S4.SC60             ;par=7   Lese-/Schreib- pointer lesen
            CALL    S4.SC600
            LD      HL,S4.UM13-2
            JR      S4.SC699

S4.SC617:   CALL    S9.ERSTR
            JP      Z,0B403H
            LD      DE,7
            ADD     HL,DE
            POP     DE
            LD      A,D
            CALL    S1.BHKON
            LD      A,E
            CALL    S1.BHKON
            POP     DE
            LD      A,D
            CALL    S1.BHKON
            LD      A,E
            CALL    S1.BHKON
            JP      0B403H

            PAGE
;****************************************************************
;*               Ueberpruefen der Angaben   blknr  und stufe    *
;****************************************************************
S4.SC63:    DEC     IX
            DEC     IX
S4.SC60:    LD      A,(IX+2)            ;blknr
            LD      E,30H
S4.SC64:    PUSH    AF
            EX      AF,AF'              ;'
            POP     AF
            AND     0F0H
            XOR     E
            JR      NZ,S4.SC61
            RRC     E
            RRC     E
            RRC     E
            RRC     E
            EX      AF,AF'              ;'stufe
            AND     00FH
S4.UP3:     LD      HL,S2.S1-1
            INC     A
            LD      C,A
            LD      B,9
S4.UP4:     INC     HL
            LD      A,(HL)
            AND     03H
            XOR     E
            JR      Z,S4.UP5
            DJNZ    S4.UP4
            SCF
            JR      S4.UP6
S4.UP5:     DEC     C
            JR      NZ,S4.UP4
            SCF
            CCF
S4.UP6:     JR      C,S4.SC62
            XOR     A
S4.SC6:     RET

S4.SC61:    LD      A,1
            RET

S4.SC62:    LD      A,2
            RET

S4.LDIR:    LD      C,(HL)
            INC     HL
            LD      B,(HL)
            INC     HL
            LD      DE,S4.U2
            LDIR
            RET

            PAGE
;****************************************************************
;*               Unterprogramme, die umgespeichert werden       *
;****************************************************************
S4.UP:      XOR     A                   ;nur gemischte aktiv lassen
            OUT     (C),S4.SBST+1
            LD      A,10111101B
            OUT     (C),S4.SBST+0

            LD      HL,04000H           ;Zusatzspeicher initialisieren
            LD      B,3
            LD      D,01000001B
S4.M2:      PUSH    BC
            LD      IX,02B00H
            LD      B,8
S4.UP1:     LD      A,D
            AND     00011100B
            RRCA
            RRCA
            INC     A
            PUSH    BC
            LD      B,A
            LD      A,10000000B
            RLCA
            DJNZ    $-1
            POP     BC
            OUT     (C),S4.SBST+2       ;Erweiterungsplatte zuschalten
            LD      A,D
            LD      (HL),A
            CP      (HL)
            JR      NZ,S4.UP2
            LD      (IX+0),A
S4.UP2:     ADD     A,4
            LD      D,A
            XOR     A
            OUT     (C),S4.SBST+2       ;Erweiterungsplatte wegschalten
            INC     IX
            DJNZ    S4.UP1
            LD      BC,04000H
            ADD     HL,BC
            LD      A,D
            AND     01000011B
            INC     A
            LD      D,A
            POP     BC
            DJNZ    S4.M2

            PAGE
            IF      S4.V2 AND 1
            LD      A,10100101B
            ENDIF
            IF      S4.V2 AND 2
            LD      A,10110101B
            ENDIF
            OUT     (C),S4.SBST

            IF      S4.V2 AND 1
            LD      A,00000000B
            ENDIF
            IF      S4.V2 AND 2
            LD      A,00000001B
            ENDIF
            OUT     (C),S4.SBST+1
            JP      S4.UP1E

S4.UP1E:    LD      HL,02B00H
            LD      DE,S2.S2
            LD      BC,8
            LDIR

            IF      S4.V2 AND 1
            LD      A,10100111B
            ENDIF
            IF      S4.V2 AND 2
            LD      A,10110111B
            ENDIF
            OUT     (C),S4.SBST

            IF      S4.V2 AND 1
            LD      A,10000100B
            ENDIF
            IF      S4.V2 AND 2
            LD      A,10000101B
            ENDIF
            OUT     (C),S4.SBST+1
            OUT     (C),S4.SBST+3       ;RESET-Sperre ein

            JP      S1.RES1

            PAGE
;****************************************************************
;*               Routine fuer  SVC 0,0, [... ,] &1i ,adresse    *
;****************************************************************
S4.UM15:    EXX
            LD      E,10H
            CALL    S4.SC64
            CALL    S4.SC600
            CALL    S4.UU4
            EXX
            RET
;****************************************************************
;*               Routine fuer  SVC &1i , ...                    *
;****************************************************************
S4.UM16:    LD      E,10H
            CALL    S4.SC64
            CALL    S4.SC600
            CALL    S4.UU4
            LD      HL,04007H
            LD      A,(HL)
            INC     HL
            LD      H,(HL)
            LD      L,A
            JP      S9.AB3
;****************************************************************
;*               Zuschalten einer "4000"-Erweiterungsplatte     *
;****************************************************************
S4.UU4:     LD      HL,(S2.SMHL)
            OUT     (C),S4.SBST+4       ;RESET-Sperre aus

            IF      S4.V2 AND 1
            LD      A,10000000B
            ENDIF
            IF      S4.V2 AND 2
            LD      A,10000001B
            ENDIF
            OUT     (C),S4.SBST+1

            LD      A,(HL)
            AND     00011100B
            RRCA
            RRCA
            INC     A
            LD      B,A
            LD      A,10000000B
            RLCA
            DJNZ    $-1
            OUT     (C),S4.SBST+2
            RET

            PAGE
            DW      S4.UM8-S4.UM1-2
S4.UM1:     CALL    S4.UM4              ;16K initialisieren
            LD      HL,0C010H
            LD      (0C001H),HL         ;erster freier Platz
            LD      (0C003H),HL         ;LP ... Lesepointer
            LD      (0C005H),HL         ;SP ... Schreibpointer
            LD      DE,0C011H
            LD      BC,04000H-11H
            LD      (HL),00DH
            LDIR
            JP      S4.UM6

            DW      S4.UM9-S4.UM8-2
S4.UM8:     CALL    S4.UM4              ;Schreib- = Lese- Pointer
            LD      HL,(0C003H)
            LD      (0C005H),HL
            JP      S4.UM6

            DW      S4.UM10-S4.UM9-2
S4.UM9:     CALL    S4.UM4              ;setzen ersten freien Platz
            LD      HL,(0C005H)
            LD      (0C001H),HL
            JP      S4.UM6

            DW      S4.UM11-S4.UM10-2
S4.UM10:    CALL    S4.UM4              ;Schreib- pointer = 1. fr. Platz
            LD      HL,(0C001H)
            LD      (0C005H),HL
            JP      S4.UM6

            DW      S4.UM12-S4.UM11-2
S4.UM11:    CALL    S4.UM4              ;Lese-    pointer = Anfang
            LD      HL,0C010H
            LD      (0C003H),HL
            JP      S4.UM6

            DW      S4.UM13-S4.UM12-2
S4.UM12:    CALL    S4.UM4              ;Schreib- pointer = Anfang
            LD      HL,0C010H
            LD      (0C005H),HL
            JP      S4.UM6

            DW      S4.UM14-S4.UM13-2
S4.UM13:    CALL    S4.UM4              ;Lese-/Schreib- pointer lesen
            LD      HL,(0C005H)
            PUSH    HL
            LD      HL,(0C003H)
            PUSH    HL
            CALL    S4.UM6+6
            JP      S4.SC617

            DW      S4.EIN-S4.UM14-2
S4.UM14:    CALL    S4.UM4              ;Lese-/Schreib- pointer setzen
            POP     HL
            LD      (0C005H),HL
            POP     HL
            LD      (0C003H),HL
            JP      S4.UM6

            PAGE
            DW      S4.AUS-S4.EIN-2
S4.EIN:     CALL    S9.SAVE             ;Eingabe vom Zusatzspeicher
            CALL    S4.UM4
            LD      HL,(0C003H)
            LD      A,(HL)
            LD      (TS.TK),A
            INC     HL
            LD      A,H
            OR      L
            JR      NZ,S4.EIN1
            DEC     HL
                                        ;Fehlermeldung
S4.EIN1:    LD      (0C003H),HL
            CALL    S4.UM6+6
            JP      S9.RIV9

            DW      S4.AUS2-S4.AUS
S4.AUS:     CALL    S9.SAVE             ;Ausgabe auf Zusatzspeicher
            LD      A,C
            LD      (MS.TK),A
            CALL    S4.UM4
            LD      HL,(0C005H)
            LD      A,(MS.TK)
            LD      (HL),A
            INC     HL
            LD      A,H
            OR      L
            JR      NZ,S4.AUS1
            DEC     HL
                                        ;Fehlermeldung
S4.AUS1:    LD      (0C005H),HL
            CALL    S4.UM6+6
            JP      S9.IOXE
S4.AUS2     EQU     $

            PAGE
S4.UUM4:    LD      HL,(S2.SMHL)
            OUT     (C),S4.SBST+4       ;RESET-Sperre aus

            IF      S4.V2 AND 1         ;RAM C000 wegschalten
            LD      A,10110111B
            OUT     (C),S4.SBST
            ENDIF

            LD      A,10000000B      ;RAM 4000 (ROM C000) wegschalten
            OUT     (C),S4.SBST+1

            IF      S4.V2 AND 2
            LD      A,(HL)
            XOR     00010011B
            JR      NZ,S4.UM5
            LD      A,10100111B         ;RAM C000 aus V1 aktivieren
            OUT     (C),S4.SBST
            RET
            ENDIF

S4.UM5:     LD      A,(HL)
            AND     00011100B
            RRCA
            RRCA
            INC     A
            LD      B,A
            LD      A,10000000B
S4.UM2:     RLCA
            DJNZ    S4.UM2
            OUT     (C),S4.SBST+2
            RET

S4.UUM6:    CALL    S4.UM6+6
            JP      0B403H

            XOR     A
            OUT     (C),S4.SBST+2

            IF      S4.V2 AND 1
            LD      A,10100111B
            ENDIF
            IF      S4.V2 AND 2
            LD      A,10110111B
            ENDIF
            OUT     (C),S4.SBST

            IF      S4.V2 AND 1
            LD      A,10000100B
            ENDIF
            IF      S4.V2 AND 2
            LD      A,10000101B
            ENDIF
            OUT     (C),S4.SBST+1

            OUT     (C),S4.SBST+3       ;RESET-Sperre ein
            RET
S4.UM7      EQU     $

S4.UM4      EQU     S4.U1+S4.UUM4-S4.UUM4
S4.UM6      EQU     S4.U1+S4.UUM6-S4.UUM4

            PAGE
;****************************************************************
;*               Arbeit mit der Ein- / Ausgabetabelle  L B      *
;****************************************************************
S4.SC700:   LD      A,(IX+2)            ;richtung
            CP      'I'
            JR      Z,S4.SC702
            CP      'O'
            JR      NZ,S4.SC701
            CALL    S4.LIYO
            JR      S4.SC703

S4.SC702:   CALL    S4.LIYI
            LD      C,7FH
S4.SC703:   LD      A,(IX)              ;operation
            CP      4
            JP      Z,S4.SC704
            CP      3
            JR      Z,S4.SC705
            CP      2
            JR      Z,S4.SC706
            CP      1
            JR      Z,S4.SC707
            CP      0
            JR      Z,S4.SC708
S4.SC701:   JP      0B403H
                                        ;op = 1
S4.SC707:   LD      A,(IX+4)            ;wert
            LD      B,0
            LD      C,(IX+6)            ;rel. tabellenadresse
            ADD     IY,BC
            LD      (IY+0),A
            JR      S4.SC701
                                        ;op = 3  ...  ASCII
S4.SC705:   LD      A,(IX+2)            ;richtung
            CP      'O'
            JR      Z,$+6
            LD      B,11100110B
            JR      SC716
            LD      B,11000100B
            JR      S4.SC716
                                        ;op = 2  ...  binaer
S4.SC706:   LD      A,(IX+2)            ;richtung
            CP      'O'
            JR      Z,$+6
            LD      B,2
            JR      SC716
            LD      B,0
S4.SC716:   LD      DE,01E0DH           ;EOR - Zeichen
            LD      A,019H              ;EOF - Zeichen
            LD      HL,0
            PUSH    HL
            JR      S4.SC709
                                        ;op = 0
S4.SC708:   LD      D,(IX+16)
            LD      E,(IX+14)
            LD      B,(IX+12)
            LD      C,(IX+8)
            LD      A,(IX+6)
            LD      H,(IX+5)
            LD      L,(IX+4)
            PUSH    HL
            LD      H,(IX+11)
            LD      L,(IX+10)

S4.SC709:   LD      (IY+0),D
            LD      (IY+1),E
            LD      (IY+4),B
            LD      (IY+11),C
            LD      (IY+12),A
            LD      (IY+5),L
            LD      (IY+6),H
            POP     HL
            LD      (IY+19),L
            LD      (IY+20),H
            JR      SC701
                                        ;op = 4  ...  Standard-Anwender-Kode
S4.SC704:   LD      HL,LR.KONV
            PUSH    HL
            LD      A,(IX+2)
            CP      'O'
            JR      Z,$+9               ;---!
            LD      C,0EFH              ;   !
            LD      HL,LR.SKTBI         ;   !
            JR      $+7                 ;------!
            LD      C,010H              ;<--!  !
            LD      HL,LR.SKTBO         ;      !
            LD      D,080H              ;<-----!
            LD      E,00DH
            LD      B,10101110B
            LD      A,019H
            JR      S4.SC709

            PAGE
;****************************************************************
;*                  Modifizierung der Workspace-Adressen        *
;****************************************************************
S4.SC710:   LD      HL,S4.SC712
            LD      BC,S9.IOX
S4.SC711:   LD      (BC.CIN+1),HL
            LD      (BC.CON+1),BC
S4.SC713:   JP      0B403H

S4.SC720:   LD      HL,S9.IOX
            LD      BC,S4.SC722
            JR      S4.SC711

S4.SC730:   LD      HL,S4.SC712
            LD      (BC.RIV+1),HL
            JR      S4.SC713

S4.SC740:   LD      HL,S4.SC742
            LD      (BC.WRTV+1),HL
            JR      S4.SC713

S4.SC750:   LD      HL,S4.SC752
S4.SC751:   LD      (BC.USR+1),HL
            JR      S4.SC713

S4.SC760:   LD      HL,S4.SC762
            JR      S4.SC751


S4.LBL:     PUSH    AF
            CALL    S0.KRZU
            POP     AF
            CALL    LR.LBL
            PUSH    AF
            PUSH    BC
            PUSH    DE
            CALL    S2.STACK
            POP     DE
            POP     BC
            POP     AF
            RET

S4.LBS:     PUSH    AF
            CALL    S0.KRZU
            POP     AF
            CALL    LR.LBS
            PUSH    AF
            PUSH    BC
            PUSH    DE
            CALL    S2.STACK
            POP     DE
            POP     BC
            POP     AF
            RET

            PAGE
S4.LIYI:    LD      IY,S3.LBL-S3.SEAT
            LD      DE,S0.DEAT+3
            ADD     IY,DE
            RET

S4.LIXI:    PUSH    IY
            CALL    S4.LIYI
            PUSH    IY
            POP     IX
            POP     IY
            RET


S4.LIYO:    LD      IY,S3.LBS-S3.SEAT
            LD      DE,S0.DEAT+3
            ADD     IY,DE
            RET

S4.LIXO:    PUSH    IY
            CALL    S4.LIYO
            PUSH    IY
            POP     IX
            POP     IY
            RET

            PAGE
;****************************************************************
;*               Lochband- Ein-/Ausgaberoutinen                 *
;****************************************************************
S4.SC712:   CALL    S9.SAVE             ;Lochbandeingaberoutine
            CALL    S4.LIXI
            CALL    S4.LBL
            LD      (TS.TK),A
            LD      A,(IX+3)
            ADD     A,30H
            CALL    S9.ERS
            CALL    S9.LOAD
            LD      A,(TS.TK)
            RET

S4.SC722:   PUSH    AF                  ;Lochbandausgaberoutine  PRINT
            LD      A,C                 ;bei PRINT keine Ausgabe von 00AH
            CP      0AH
            JR      NZ,S4.SC723
            POP     AF
            RET
S4.SC723:   POP     AF
S4.SC742:   CALL    S9.SAVE             ;Lochbandausgaberoutine  PGM
            CALL    S4.LIXO
            CALL    S4.LBS
            JR      S4.SC763

S4.SC752:   CALL    S9.SAVE             ;Lochandeingaberoutine  USR
            CALL    S4.LIXI
            CALL    S4.LBL
            LD      B,A
            XOR     A
            CALL    BC.RUCK
            JR      S4.SC763

S4.SC762:   CALL    S9.SAVE             ;Lochbandausgaberoutine  USR
            CALL    BC.PAR
            LD      C,E
            CALL    S4.LIXO
            CALL    S4.LBS

S4.SC763:   LD      A,(IX+3)
            ADD     A,30H
            CALL    S9.ERS
            CALL    S9.LOAD
            RET

            PAGE
;****************************************************************
;*     PROGRAMMM F. CROSS-REFERENZLISTE (SPRUNGBEFEHLE)         *
;****************************************************************
S4.CALL:    DB      'CALL   '
S4.GOSUB:   DB      'GOSUB  '
S4.GOTO:    DB      'GOTO   '
S4.OGOS:    DB      'ONGOSUB'
S4.OGOTO:   DB      'ONGOTO '
            DW      $
            DB      'BANA'
            LD      A,5                 ;BILD LOESCHEN
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      A,22
            LD      (MS.CMD),A
            CALL    MO.MONI

            XOR     A                   ;ZAEHLER DER ANZAHL DER ZEILEN AUF BS AUF 0 SETZEN
            LD      (S2.DM2),A
            LD      HL,(02FB7H)         ;INI FUER HL MIT ANFANGSADRESSE DES BASIC-PGMS
            DEC     HL                  ;DAMIT ERSTES ZEICHEN NICHT VERLOREN GEHT
S4.PREN:    INC     HL                  ;SCHLEIFE PROGRAMMENDE / NAECHSTES ZEICHEN
            XOR     A                   ;INI FUER MERKER (0=KEIN ON,KEIN CALL,1.SPRUNG IN ZEILE)
            LD      (S2.DMH),A
            LD      A,(HL)              ;AKTUELLES ZEICHEN HOLEN
            CP      00H                 ;1. MAL 00
            JR      NZ,S4.END1B         ;NICHT 00, SO WEITER IN ZEILE
            INC     HL                  ;NAECHSTES ZEICHEN
            LD      A,(HL)
            CP      00H                 ;2. MAL 00
            JP      Z,S4.ENDE           ;WENN JA, SO PGM-ENDE
            DEC     HL                  ;ANSONSTEN WAR ZUFAELLIG L(NEX-STMT) = 00
S4.END1B:   CALL    S4.LEER             ;LOESCHEN AUSGABEZEILE
            INC     HL                  ;UEBERGEHEN ADRESSE DER FOLGEZEILE
            INC     HL
            PUSH    HL                  ;RETTEN BEI ZEIGEN AUF ZEILENNUMMER
            LD      E,(HL)              ;L(ZEILENNUMMER)
            INC     HL
            LD      D,(HL)              ;H(ZEILENNUMMER)
            EX      DE,HL               ;HL ENTHAELT HEXAZAHL
            LD      DE,S0.PFFI          ;ZIEL FUER ASCII-KETTE
            CALL    S4.DUDEZ            ;HEXADEZ. Z-->ASCII ZEICHEN
            INC     DE                  ;ZEIGT AUF BYTE HINTER LETZTER ZIFFER
            LD      A,':'
            LD      (DE),A              ;OHNE BLANK HINTER ANWEISUNGSNUMMER
            POP     HL                  ;HL ZEIGT WIEDER AUF UNTERSUCHTE ZEILE
            INC     HL                  ;UEBERGEHEN DER ANWEISUNGSNUMMER
S4.SONST:   INC     HL                  ;      "   , BZW. NAECHSTES ZEICHEN
            LD      A,(HL)
S4.SES:     CP      00H                 ;SCHLEIFE SATZENDE
            JP      Z,S4.SATZE          ;AUFTRETENDES 00 MUSS JETZT ZEILENENDE SEIN
            EXX                         ;INI FUER HINTERGRUND HL
            LD      HL,S2.DMH           ;MIT ADRESSE DES MERKERS
            EXX
            CP      91H                 ;ABFRAGE NACH TOKEN: ON
            JR      NZ,S4.NMEHR         ;SPRUNG, WENN KEINE DOPPELANWEISUNG
            EXX                         ;HINTERGRUND HL
                                        ;
            SET     7,(HL)              ;TOKEN: ON GEFUNDEN
            EXX
S4.NMEHR:   CP      8CH                 ;ABFRAGE NACH TOKEN: GOSUB
            JR      NZ,S4.GOT           ;WENN NICHT, SO WEITER SUCHE
            EXX                         ;HINTERGRUND
            BIT     7,(HL)              ;TEST, OB TOKEN: ON VORANGEGANGEN WAR
            EXX
            JR      NZ,S4.OVGOS         ;SPRUNG, WENN JA
            LD      BC,S4.GOSUB         ;SONST NUR TOKEN: GOSUB
            JR      S4.KOB              ;DANN ZUR SPRUNGZIELUEBERNAHME
S4.OVGOS:   LD      BC,S4.OGOS          ;ON GOSUB
            JR      S4.KOB              ;SPRUNG ZUR SPRUNGZIELUEBERNAHME
S4.GOT:     CP      88H                 ;ABFRAGE NACH TOKEN: GOTO
            JR      NZ,S4.CAL           ;WENN NICHT, SO WEITER SUCHE
            EXX                         ;HINTERGRUND
            BIT     7,(HL)              ;TEST, OB TOKEN: ON VORANGEGANGEN
            EXX
            JR      NZ,S4.OVGOT         ;SPRUNG, WENN JA
S4.AUSGO:   LD      BC,S4.GOTO          ;SONST NUR TOKEN: GOTO
            JR      S4.KOB              ;DANN ZUR SPRUNGZIELUEBERNAHME
S4.OVGOT:   LD      BC,S4.OGOTO         ;ON GOTO
            JR      S4.KOB              ;AUCH ZUR SPRUNGZIELUEBERNAHME
S4.CAL:     CP      0D7H                ;ABFRAGE NACH TOKEN: CALL
            JR      NZ,S4.TEOGT         ;NOCH TESTEN, OB EVTL. THEN ODER ELSE OHNE GOTO
            LD      BC,S4.CALL
            EXX                         ;HINTERGRUND
            SET     6,(HL)              ;TOKEN: CALL GEFUNDEN
            EXX
            JR      S4.KOB
S4.TEOGT:   CP      0A2H                ;TOKEN: THEN
            JR      NZ,S4.ELS           ;SPRUNG, WENN NICHT
S4.TEST:    PUSH    DE                  ;TEST AUF AUSGELASSENES GOTO
            INC     HL                  ;1. ZEICHEN HINTER THEN ODER ELSE
            LD      D,0FFH              ;MAX. ANZAHL BLANKS UEBERGEHEN
            CALL    S4.SUNBL
            POP     DE                  ;DE ZEIGT WIEDER AUF AUSGABEZEILE
            LD      A,(HL)              ;1. ZEICHEN VERSCHIEDEN VON BLANK
            DEC     HL                  ;FALLS GEFUNDENES ZEICHEN TOKEN
                                        ;IST BZW.DAMIT NUMMER NICHT VERLOREN GEHT
            CP      30H                 ;TEST, OB SPRUNGADRESSE BEGINNT
            JR      C,S4.SONST          ;SPRUNG, WENN KEINE ZIFFER
            CP      3AH
            JR      NC,S4.SONST         ;SPRUNG, WENN KEINE ZIFFER
            JR      S4.AUSGO            ;SPRUNGADRESSE WIE GOTO BEHANDELN
S4.ELS:     CP      0C9H                ;TOKEN: ELSE
            JR      Z,S4.TEST           ;SPRUNG, WENN JA UND TEST AUF AUSG. GOTO
            JR      S4.SONST            ;WEITER IM QUELLTEXT
S4.KOB:     EXX                         ;HINTERGRUND
            BIT     0,(HL)              ;TEST, WIEVIELTE SPRUNGANWEISUNG IN ZEILE
            EXX
            JR      Z,S4.LEZ            ;SPRUNG, WENN 1. SPRUNGANWEISUNG
            LD      A,2FH               ;SCHRAEGSTRICH
            JR      S4.AUSG
S4.LEZ:     LD      A,' '
S4.AUSG:    INC     DE
            LD      (DE),A              ;BLANK ODER / IN AUSGABEZEILE
            INC     DE
            PUSH    HL                  ;ZEIGT NOCH AUF TOKEN,EVTL. IMAGINAER
            LD      H,B                 ;AUSGABE DER SPRUNGNAMEN
            LD      L,C
            LD      BC,7H
            LDIR
            LD      A,'-'
            LD      (DE),A
            POP     HL                  ;HOLEN BEI ZEIGEN AUF TOKEN
            INC     HL                  ;SUCHEN SPRUNGZIEL(E)
            PUSH    DE                  ;RETTEN DER AKTUELLEN ABLAGEADRESSE
            LD      D,0FFH              ;UNTERTEILENDE BLANKS ERLAUBT
            CALL    S4.SUNBL            ;ABFRAGE NACH BLANK
            POP     DE                  ;ZEIGT WIEDER AUF ABLAGEZEILE
S4.SPADR:   LD      A,(HL)
            BIT     7,A                 ;LIEGT TOKEN VOR ?
            JR      NZ,S4.ENDSP         ;WENN JA, IST SPRUNGADRESSE ZU ENDE
            CP      ':'                 ;ANWEISUNGSENDE
            JR      Z,S4.ENDSP          ;WENN JA, IST SPRUNGADRESSE ZU ENDE
            CP      0                   ;ZEILENENDE ?
            JR      Z,S4.ENDSP          ;WENN JA, IST SPRUNGADRESSE ZU ENDE
            EXX                         ;HINTERGRUND
            BIT     6,(HL)              ;TEST, OB BEHANDELTER TOKEN CALL IST
            EXX
            JR      Z,S4.UEBER          ;WENN NICHT, SPRUNGZIEL-ZIFFER UEBERNEHMEN
            CP      2CH                 ;SPRUNGZIEL VON CALL KANN BEREITS BEI KOMMA ENDEN
            JR      Z,S4.ENDSP          ;SPRUNG, WENN KOMMA
S4.UEBER:   INC     DE                  ;NAECHSTER PLATZ IN AUSGABEZEILE
            LD      (DE),A              ;ZEICHEN DES SPRUNGZIELS ABLEGEN
            INC     HL                  ;NAECHSTES ZEICHEN IN ZEILE
            JR      S4.SPADR            ;SPRUNG ZUR UNTERSUCHUNG DES NAECHSTEN ZEICHENS
S4.ENDSP:   EXX                         ;HINTERGRUND
            SET     0,(HL)              ;EINE SPRUNGANWEISUNG IST SCHON AUFGETRETEN
            EXX
            JP      S4.SES              ;WEITER ODER SATZENDE
S4.SATZE:   LD      (S2.TE),HL          ;AKTUELLEN ZEIGER AUF BASIC-PGM RETTEN
            LD      HL,S0.PFFI+9        ;ADRESSE DES ZWEITEN BYTES DES EVTL. 1. SPRUNGBF
            LD      A,20H               ;TEST, OB SPRUNG VORHANDEN
            CP      (HL)
            LD      HL,(S2.TE)          ;HL ZEIGT WIEDER AUF AKTUELLE ZEILE
            JP      Z,S4.PREN           ;SPRUNG, WENN IN UNTERSUCHTER ZEILE KEIN SPRUNG
            LD      HL,S0.PFFI          ;ADRESSE DER AUSGABEZEILE
S4.WEGFN:   LD      A,'0'               ;FUEHRENDE NULLEN ?
            CP      (HL)
            JR      NZ,S4.LACHT         ;SPRUNG BEI FUENFSTELLIGER ZEILENNUMMER
            LD      A,' '
            LD      (HL),A              ;FUEHRENDE NULL UEBERSCHREIBEN
            INC     HL                  ;NAECHSTE ZIFFER
            JR      S4.WEGFN
S4.LACHT:   LD      HL,S0.PFFI+80       ;81. BYTE
            LD      D,5                 ;DANN FOLGT UNBEDINGT NICHTS MEHR
            CALL    S4.SUNBL
            CP      ' '                 ;NUR BLANKS, SO REICHT EINE 80-BYTE-ZEILE
            JR      Z,S4.EINZE          ;FOLGENDES FUER DIESEN FALL UEBERFLUESSIG
            LD      HL,S0.PFFI+79       ;LETZTES BYTE DER 1. AUSGABEZEILE
            LD      A,2FH               ;SCHRAEGSTRICH
            LD      BC,0                ;DAMIT IN C DIE KOMPLEMENTAERE ANZAHL IST
            CPDR                        ;SUCHEN LETZTEN / DER 1. AUSGABEZEILE
            INC     HL                  ;ZEIGT AUF 1. ZEICHEN HINTER /
            LD      (S0.PFFI+253),HL    ;ADRESSE DIESES ZEICHENS RETTEN
            OR      A                   ;CY=0
            LD      DE,S0.PFFI+89       ;1. FREIES BYTE DER 2. AUSGABEZEILE
            EX      DE,HL               ;TAUSCH WEGEN SUBTRAKTION
            SBC     HL,DE               ;WIEVIEL IST ZU VERSCHIEBEN
            LD      B,H                 ;DIFFERENZ NACH BC
            LD      C,L
            LD      (S0.PFFI+251),BC    ;DIFFERENZ RETTEN
            EX      DE,HL               ;HL ZEIGT WIEDER AUF 1. ZEICHEN HINTER /
            LD      DE,(S0.PFFI+89)     ;DE WIEDER AUF 1. BYTE 2. ZEILE
            LDIR                        ;VERSCHIEBUNG NACH HINTEN
            LD      HL,(S0.PFFI+253)    ;ZEIGT AUF BYTE HINTER /
            LD      A,' '
            LD      (HL),A              ;LOESCHEN DES URBILDES DES VERSCHOBENEN BEREICHS
            LD      BC,(S0.PFFI+251)    ;WIEVIELE BYTES UEBERSCHREIBEN
            DEC     BC                  ;EINS IST JA SCHON
            LD      D,H                 ;HL NACH DE UEBERNEHMEN
            LD      E,L
            INC     DE                  ;ZEIGT EIN BYTE WEITER
            LDIR
;****************************************************************
;*               erste Ausgabezeile ausgeben                    *
;****************************************************************
S4.EINZE:   LD      A,24                ;VEKTORSCHREIBEN
            LD      (MS.CMD),A
            LD      HL,S0.PFFI          ;ADRESSE DES 1.BYTE
            LD      B,80                ;WIEVIEL BYTE
            CALL    MO.MONI
S4.TEVOL:   LD      A,(S2.DM2)          ;WIEVIELE ZEILEN SCHON AUF BS ?
            CP      21                  ;BS VOLL MIT 22 ZEILEN
            JR      NZ,S4.NIVOL         ;SPRUNG, WENN NOCH NICHT SO VIEL
            LD      HL,S4.WEIT          ;WEITERARBEITSADRESSE NACH TASTENBETAETIGUNG
            LD      (TS.TAB4),HL        ;FUNKTIONSTASTE: ABS
            RET                         ;WARTEN AUF BETAETIGUNG DIESER TASTE
S4.WEIT:    LD      A,5                 ;BILD LOESCHEN
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      A,22                ;CURSOR HOME
            LD      (MS.CMD),A
            CALL    MO.MONI
            LD      A,0FFH              ;INI FUER ZEILENZAEHLER
S4.NIVOL:   INC     A                   ;EINE ZEILE MEHR
            LD      (S2.DM2),A          ;ABLEGEN DES ZEILENZAEHLERS
            LD      HL,S0.PFFI+89       ;1. BYTE DER 2. AUSGABEZEILE
            LD      A,' '
            CP      (HL)                ;NOCH SPRUNGBEFEHL IN 2. AUSGABEZEILE ?
            JR      Z,S4.WIREE          ;SPRUNG, WENN WIRKLICH EINE ZEILE REICHT
            LD      A,24                ;VEKTOR SCHREIBEN
            LD      (MS.CMD),A
            LD      HL,S0.PFFI+80       ;1. BYTE DER ZWEITEN AUSGABEZEILE
            LD      B,80                ;LAENGE 80 BYTES
            CALL    MO.MONI
            LD      A,' '
            LD      (S0.PFFI+89),A      ;DAMIT BEI OBIGEM TEST DURCHRUTSCHEN MOEGLICH
            JR      S4.TEVOL            ;SPRUNG ZUM TEST OB BS VOLL
S4.WIREE:   LD      HL,(S2.TE)
            JP      S4.PREN
S4.ENDE:    RET
;****************************************************************
;*         UMWANDLUNG EINER ZAHL KLEINER 65535 IN ASCII-ZEICHEN *
;****************************************************************
S4.DUDEZ:   XOR     A
            LD      BC,10000
S4.SCL10:   SBC     HL,BC
            JR      C,S4.NEGZT
            INC     A
            JR      S4.SCL10
S4.NEGZT:   ADD     HL,BC
            ADD     A,30H
            LD      (DE),A
            INC     DE
            XOR     A
            LD      BC,1000
S4.SCL11:   SBC     HL,BC
            JR      C,S4.NEGT
            INC     A
            JR      S4.SCL11
S4.NEGT:    ADD     HL,BC
            ADD     A,30H
            LD      (DE),A
            INC     DE
            XOR     A
            LD      BC,100
S4.SCL12:   SBC     HL,BC
            JR      C,S4.NEGH
            INC     A
            JR      S4.SCL12
S4.NEGH:    ADD     HL,BC
            ADD     A,30H
            LD      (DE),A
            INC     DE
            XOR     A
            LD      BC,10
S4.SCL13:   SBC     HL,BC
            JR      C,S4.NEGZ
            INC     A
            JR      S4.SCL13
S4.NEGZ:    ADD     HL,BC
            ADD     A,30H
            LD      (DE),A
            INC     DE
            LD      A,L
            ADD     A,30H
            LD      (DE),A
            RET
;INPUTS:  HL- 2BYTE HEXADEZIMAL
;         DE- ADRESSE ZUR ABLAGE DER 5 ASCII-ELEMENTE
;OUTPUTS: (DE)...(DE+4) 5 ASCII-ZEICHEN
;***************************************************************
;AUSGABEZEILE LOESCHEN
;***************************************************************
S4.LEER:    EXX
            LD      HL,S0.PFFI
            LD      DE,S0.PFFI+1
            LD      BC,09FH
            LD      (HL),' '
            LDIR
            EXX
            RET
;***************************************************************
;SUCHEN UNGLEICH BLANK
;***************************************************************
S4.SUNBL:   LD      A,' '
S4.SUCH:    CP      (HL)
            JR      NZ,S4.ZUNBL
            INC     HL
            DEC     D
            JR      NZ,S4.SUCH
            JR      S4.SUEND
S4.ZUNBL:   LD      A,(HL)
;
;INPUTS:   HL-ANFANGSADRESSE
;          D -WIE OFT SUCHEN
;OUTPUTS:  HL-ADRESSE DER Z. UNGLEICH BLANK
;          ODER ZEIGT AUF Z. HINTER D. UNTERSUCHTEM Z.
;          A -WAS GEFUNDEN WURDE
;
S4.SUEND:   RET


            ENDIF

;           END
;           PN      SM01
            TITLE   'Drucker-Verbindungsmodul fuer Version 2.1'
            PAGE
;****************************************************************
;*                  Drucker-Verbindungsmodul fuer Version 2.1   *
;*  Version         --------------------------------------------*
;*                  Programmierer: M. Herbote  K EAW  ZFT (WFT) *
;*  V 2 . 1         --------------------------------------------*
;*                  Stand        : 17.August 1984               *
;****************************************************************

SM.DRU      MACRO   UP
            PUSH    IX
            PUSH    DE
            LD      IX,S3.PRIN-S3.SEAT
            LD      DE,S0.DEAT+3
            ADD     IX,DE
            CALL    S0.KRZU
            CALL    UP
            ENDM

SM.MRES:    SM.DRU  S0.MRES
            JR      SM.M1

SM.PRIO:    SM.DRU  S0.PRIO
SM.M1:      CALL    S2.STACK
            POP     DE
            POP     IX
            RET

;           END
;           PN      S052
            TITLE   'Adresskonstanten fuer das System 2.1'
            PAGE    87
;****************************************************************
;*              Peripherie- und Speicher-adresskonstanten fuer  *
;*              das Betriebssystem         D  E  G  2  0  0  0  *
;****************************************************************
S0.V1       EQU     '2'                 ;Version des Systems
S0.V2       EQU     '1'
S0.V3       EQU     '3'                 ;Release
S0.V5       EQU     '1'                 ; "1" ---  DEG2.i von Kassette
                                        ; "2" ---  DEG2.i auf E PROM
S0.V6       EQU     '1'                 ; "1" ---  BASIC  von Kassette
                                        ; "2" ---  BASIC  auf E PROM
S0.V7       EQU     'E'

S0.D1       EQU     03232H              ;Ausgabedatum des Systems
S0.D2       EQU     03330H
S0.D3       EQU     03538H
S0.ZANZ     EQU     24                  ;Zeilenanzahl  ABS
S0.SPANZ    EQU     80                  ;Spaltenanzahl ABS
S0.SYSZ     EQU     11                  ;Systemeingabezeile
S0.ZEIT1    EQU     2                   ;Zeitkonstante 1 Tastatur
S0.ZEIT2    EQU     16                  ;Zeitkonstante 2 Tastatur
S0.LRECL    EQU     256                 ;Standardblocklaenge Kassette

S0.FKADR    EQU     02917H              ;Zeile 23 , Spalte 41
S0.SKADR    EQU     02918H              ;Zeile 24 , Spalte 41

S0.ADA      EQU     000H                ;Peripherieadresse A D A
S0.TRAM     EQU     0C0H                ;Peripherieadresse T R A M
S0.AKB      EQU     030H                ;Peripherieadresse A K B
S0.DRU      EQU     040H                ;Peripherieadresse Drucker
S0.V24      EQU     050H                ;Peripherieadresse V 2 4
S0.PTAST    EQU     0A0H                ;Peripherieadresse Tastatur
S0.PROM     EQU     0E0H                ;Peripherieadresse P P E
S0.SBST     EQU     0C0H                ;Peripherieadresse S B S T

S0.RAM      EQU     00000H              ;Anfangsadresse    Arbeits-RAM
S0.STACK    EQU     0B000H-2            ;Stackanfang
S0.BWS      EQU     03000H
S0.BWSA     EQU     0A000H              ;Anfangsadresse    Bildwiederholspeicher
S0.DEAT     EQU     0A800H              ;Dynamische     E/A-Tabelle
S0.VPI      EQU     0BFFFH-00830H+1     ;Vorbereich     Eingabepuffer
S0.PFFI     EQU     S0.VPI+00010H       ;               Eingabepuffer
S0.NPI      EQU     S0.VPI+00410H       ;Nachbereich    Eingabepuffer
S0.PFFA     EQU     S0.VPI+00420H       ;               Ausgabepuffer
S0.NPA      EQU     S0.VPI+00820H       ;Nachbereich    Ausgabepuffer
S0.TPA      EQU     S0.RAM+00100H       ;Anfangsadresse Textpuffer (EDITOR-Raum)
S0.TPE      EQU     080FFH
S0.MEMCK    EQU     09FFFH

S0.IV:      DW      S1.IO               ;Interruptroutine: EI,RETI
S0.IVSYS    EQU     0058H               ;LOW(IV)

            TITLE   'Systemkommando  S Y S 1'
            PAGE
;****************************************************************
;*                 Systemkommando :  S Y S 1                    *
;****************************************************************
            DW      $
            DB      'S1  '

S0.DEG1:    CALL    S0.EM12
            JP      0                   ;Sprung zum ZRE-EPROM

            TITLE   'Systemkommando  S Y S 2'
            PAGE
;****************************************************************
;*                 Systemkommando :  S Y S 2                    *
;****************************************************************
S0.DEG2:    LD      SP,S0.STACK+2
            CALL    S0.EM11
            JP      S1.RES1

            TITLE   'Umschalten  fuer Emulator'
            PAGE
;****************************************************************
;*            Umschalten Speicherbereiche Emulator              *
;****************************************************************
S0.EM11:    PUSH    BC                  ;komplett Speicherbereich 2
            PUSH    HL
            LD      BC,004C0H
            LD      HL,S0.EM111
            OTIR
            POP     HL
            POP     BC
            RET
S0.EM111:   DB      0F0H                ;Startbyte
            DB      003H                ;wahl
            DB      00BH                ;Sys_21
            DB      0FFH                ;Endbyte

S0.EM12:    PUSH    BC                  ;0000-7FFF Speicherbereich 1
                                        ;8000-FFFF Speicherbereich 2
            PUSH    HL
            LD      BC,004C0H
            LD      HL,S0.EM121
            OTIR
            POP     HL
            POP     BC
            RET
S0.EM121:   DB      0F0H                ;Startbyte
            DB      003H                ;wahl
            DB      00CH                ;Sys_22
            DB      0FFH                ;Endbyte

            TITLE   'Umschalten  B W S A <==> B W S'
            PAGE
;****************************************************************
;*            Umschalten Einzelzeichen                          *
;****************************************************************
S0.BWSUZ:   LD      A,(HL)              ;B W S A  ===>  B W S
            PUSH    BC
            PUSH    DE
            PUSH    HL
            PUSH    AF
            CALL    S2.STACK+2
S0.UZ90:    POP     AF
            POP     HL
            PUSH    HL
            PUSH    AF
            OR      A
            LD      DE,(MS.BWSA)
            SBC     HL,DE
            LD      DE,S0.BWS
            ADD     HL,DE
            POP     AF
            LD      (HL),A
            CALL    S2.STACK
            JR      S0.US98

;****************************************************************
;*             Umschalten des gesamten BWS                      *
;****************************************************************
S0.BWSUS:   PUSH    BC                  ;B W S A  ===>  B W S
            PUSH    DE
            PUSH    HL
            PUSH    AF
S0.US90:    CALL    S2.STACK+2
            LD      HL,(MS.BWSA)
            LD      DE,S0.BWS
S0.US99:    LD      BC,00780H           ;00800H nur 24*80
            LDIR
            CALL    S2.STACK
            POP     AF
S0.US98:    POP     HL
            POP     DE
            POP     BC
            RET

S0.BWSU1:   PUSH    BC                  ;B W S  ===>  B W S A
            PUSH    DE
            PUSH    HL
            PUSH    AF
            CALL    S2.STACK+2
            LD      HL,S0.BWS
            LD      DE,(MS.BWSA)
            JR      S0.US99

            TITLE   'B W S   zu-/ab-schalten'
            PAGE
S0.BWSB:    JR      S0.BWSAB

S0.BWSZU    EQU     $                   ;B W S  zuschalten
            CALL    S0.EM12
            RET

            PAGE
S0.BWSAB    EQU     $                   ;B W S  abschalten
            CALL    S0.EM11
            RET

            TITLE   'BASIC-Laden'
            PAGE
;****************************************************************
;*                 Laden des BASIC - Interpreters               *
;****************************************************************
S0.BASCL    EQU     $

            IF      S0.V6 AND 1
            LD      HL,00A44H
            LD      (BC.USR+1),HL
            ENDIF

            LD      HL,0                ;ersten 100H-Byte loeschen
            LD      DE,1
            LD      BC,255
            LD      (HL),C
            LDIR
            JP      S4.BSCN

;****************************************************************
;*                 Tastatur- bzw. BAMOS-Kassettenroutinen aus   *
;*                 DEG 2000 Version 1.2 aktivieren              *
;****************************************************************
S0.TAZU:    CALL    S0.EM12
            RET

S0.KRZU:    CALL    S0.EM11
            RET

;           END
;           PN      S099
;****************************************************************
;*               C T C - Interruptadresse fuer Echtzeituhr      *
;*  Version      -----------------------------------------------*
;*               Programmierer: M. Herbote --- K EAW  ZFT (WFT) *
;*  V 2 . 1      -----------------------------------------------*
;*               Stand        : 14.August 1984                  *
;****************************************************************

            IF      S4.V1 AND 00001000B
S0.CTC0:    DW      S4.IRTIM
            ENDIF

;           END

