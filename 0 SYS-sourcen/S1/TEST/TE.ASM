	TITLE	'T e s t   C R C    von Programm im RAM'	PAGE	86;	PN	TE;**********************************************************************;*                                                                    *;*       T e s t   C R C    von Programm im RAM                       *;*       --------------------------------------                       *;*   Aufruf:                                                          *;*                                                                    *;*             ( PUSH  AF              ; Retten AF )                  *;*       *Test*  CALL  CRCT            ; Test CRC  (equ TEST1  )      *;*       *Set**  CALL  CRCS            ; Set  CRC  (equ SET1   )      *;*               DA    ANFNG           ; Anfang d.gesichert.Bereichs  *;*               DA    LAENG           ; Laenge ...                   *;*               DA    CRCKW           ; CRC-Kontroll-Wert ...        *;*                                     ; Fehler: ===> /Z-Flag         *;*               ...                   ; ...  Fortsetzung d.Programms *;*                                                                    *;**********************************************************************	ORG	07800H	;TEST1:	EX	(SP),HL	PUSH	BC	PUSH	DE			;	INC	HL	; skip CALL SET1	INC	HL	INC	HL			;	LD	E,(HL)	; DE := Adr.Anfang ...	INC	HL	LD	D,(HL)	INC	HL			;	LD	C,(HL)	; BC := Laenge ...	INC	HL	LD	B,(HL)	INC	HL			;	PUSH	HL	; Berechnung CRC	EX	DE,HL	CALL	CRC1	POP	HL			;	LD	C,(HL)	; Vergleich ...	INC	HL	LD	B,(HL)	INC	HL	EX	DE,HL	OR	A	SBC	HL,BC	EX	DE,HL			;	POP	DE	POP	BC	EX	(SP),HL	RET			;;**********************************************************************;	END		TITLE	'P R O M - T e s t'	PAGE;	PN	TE;**********************************************************************;*                                                                    *;*       P R O M - T e s t   laut Tabelle     RAM-frei,               *;*       ---------------------------------    Stack nur f.CALL PROMT  *;*                                                                    *;*       SP:  Tabellen-Adresse    <--->                               *;*       DE:  Adr.f.Fehler-Meldg. <--->                               *;*       del: HL' BC' DE' AF IX IY                                    *;*                                                                    *;*       Nutzbare Unterprogramme:                                     *;*             CRC1               CRC Bereich                         *;*             CRCA1              CRC = CRC # (A)                     *;*                                                                    *;**********************************************************************			;	EXX		; Return	RET			;PROMT:	EXX		; Test:   laden PROM-Adresse	LD	BC,0400H	;         Laenge Test-Bereich	DEC	SP	POP	HL	LD	L,C	;         0	LD	A,H	;         H(PROM-Adr.)	CP	0FFH	;         Ende PROM-Tabelle ?	JR	Z,PROMT-2	EX	AF,AF'		;         Retten PROM-Adr.	LD	IX,$+6	JR	CRC	;         Berechnung CRC			;	POP	HL	;         HL:= CRC lt. Tabelle	SBC	HL,DE	JR	Z,PROMT+1	;         ---> naechster PROM			;PROMF:	EXX		; Anzeige Fehler	EX	AF,AF'	LD	HL,PROMT	JP	CVABX-2	;         2 Space / 2 Hexa			;;        --------------------------------------------------------------			; CRC   Bereich:CRC:	LD	DE,-1	; --------------	LD	A,(HL)	; HL': Start-Adresse        --->	LD	IY,$+6	; BC': Bereichs-Laenge      --->	JR	CRCA	; DE': CRC                 <--- 	INC	HL	; IX : Return-Adr.         <--->	DEC	BC	; del: IY AF	LD	A,B	OR	C	JR	NZ,CRC+3	JP	(IX)			;;        --------------------------------------------------------------	PAGE	;        --------------------------------------------------------------			;CRCA:	XOR	D	; CRC := CRC # (A):	LD	D,A	; -----------------			; DE': CRC                 <--->	RRCA		; A:   Byte                 --->	RRCA		; IY:  Return-Adr.         <--->	RRCA		; del: AF	RRCA	AND	0FH	XOR	D	LD	D,A			;	RRCA	RRCA	RRCA	AND	1FH	XOR	E	LD	E,A			;	LD	A,D	RRCA	RRCA	RRCA	RRCA	AND	0F0H	XOR	E	LD	E,A			;	LD	A,D	RRCA	RRCA	RRCA	AND	0E0H	XOR	D			;	LD	D,E	LD	E,A			;	JP	(IY)			;;        --------------------------------------------------------------CRC1:	PUSH	IX	; CRC Bereich  (CALL/RET-faehig)	PUSH	IY	; ------------------------------	LD	IX,$+6	; HL:  Adr. Bereich         --->	JR	CRC	; BC:  Laenge Bereich       --->	POP	IY	; DE:  CRC                 <---	POP	IX	; del: AF	RET		; Stack: 1			;;        --------------------------------------------------------------CRCA1:	PUSH	IY	; CRC := CRC # (A)	LD	IY,+6	;              (CALL/RET-faehig)	JR	CRCA	; ------------------------------	POP	IY	; DE:  CRC                 <--->	RET		; A:   Byte                 --->			; del: AF			;;**********************************************************************;	END		TITLE	'R A M - T e s t'	PAGE;	PN	TE;**********************************************************************;*                                                                    *;*       R A M - T e s t                    RAM-frei,                 *;*       ---------------                    Stack nur fuer CALL RAMT  *;**********************************************************************;*                                                                    *;*       Folgende Tests werden ausgefuehrt:                           *;*       ----------------------------------                           *;*                                                                    *;*       Fuer jeden Bereich ...                                       *;*                                                                    *;*       - fuer jede der 9 zyklischen Bit-Positionen                  *;*         von rechts nach links ueber den Bereich                    *;*         mit dem Start-Byte 1000.0000 und Cy=0 bzw.                 *;*                            0111.1111 und Cy=1                      *;*         zyklisch links rotierend ueber Cy schreiben bzw.testen     *;*                                         (Test "a" bzw."b")         *;*                                                                    *;*       - fuer jede der zyklischen Byte-Positionen                   *;*         von links nach rechts zyklisch ueber den Bereich           *;*         16-mal 55H bzw.AAH und 1-mal das Komplement schreiben,     *;*         17-mal den RAM-Inhalt unter passendem Auffuellen links     *;*         nach rechts schieben und anschliessend testen, ob das      *;*         anfangs geschriebene wieder dasteht                        *;*                                         (Test "c" bzw."d")         *;*                                                                    *;*       - von rechts nach links ueber den Bereich                    *;*         das Byte 0100.0111 und Cy=0                                *;*         zyklisch links rotierend ueber Cy schreiben,               *;*         warten (11-mal ein Doppel-Register durchzaehlen) und       *;*         anschliessend testen, ob das geschriebene noch dasteht     *;*                                         ("REFRESH"-Test "r")       *;*                                                                    *;*       Dabei wird jeder RAM-Bereich nur soweit getestet, bis der    *;*       erste Fehler festgestellt wird und dann mit nachgestelltem   *;*       Test-Kennzeichen in der Fehler-Liste angezeigt.              *;*                                                                    *;*       Fuer jede RAM-Bereichs-Liste ...                             *;*                                                                    *;*         einmal von links und einmal von rechts die Liste hindurch  *;*         jeden RAM-Bereich in seinem ersten Byte mit dem hoeher-    *;*         wertigen Byte-Wert seiner Adresse kennzeichnen und an-     *;*         schliessend testen, ob jeder Bereich noch seine Kenn-      *;*         zeichnung hat                                              *;*                              (Test "s" auf STE-Adressierung)       *;*                                                                    *;*       Dabei ist zu beachten, dass STE mit fehlerhaftem STE-Adress- *;*       Dekoder im allgemeinen auch die Antwort anderer STE          *;*       verfaelschen. In jedem Falle ist aber unter den mit "s"      *;*       als fehlerhaft angegebenen STE eine fehlerhafte              *;*                                                                    *;*--------------------------------------------------------------------*;*                                                                    *;*       SP:  RAM-Tab.            <--->                               *;*       del: alle sonst.Reg.ausser DE (akt.BS-Adr.f.Fehler-Anzeige)  *;*                                                                    *;*       Nutzbare Unterprogramme:                                     *;*             ROTCY       "Rotation A ueber Cy" (-> "Spitzen-Test")  *;*             SHIFT       "Schiebe-o.WC-Test"                        *;*             RAMT+4      beide Tests, Fehler-Auswert.programmierbar *;*                                                                    *;**********************************************************************;	END		TITLE	''	PAGE;	PN	TE;**********************************************************************			;RAMT:	LD	IY,RAMRR	; Adr.d.Fehler-Anzeige-Routine	POP	AF	; skip Start-FF			;			; ----------------------------NXTR	EQU	$	; naechster Bereich	LD	HL,6100H	;       Anzeige H='a'/Refr.T.=0			;	EXX	POP	AF	PUSH	AF	OR	A	JP	Z,ADRT	; ====> Test auf STE-Adresierung			;			; ------------------------------PEAK:	XOR	A	; zykl.v.hinten ueber d.Bereich	SCF		;     +        +    ...	LD	IX,$+6	; ++++ ++++++++ ++++...	JR	ROTCY	;      schreiben und dann testen			; ------------------------------VALLY:	EXX			;	INC	H	; Anzeige = 'b'			;	EXX	XOR	A	; zykl.v.hinten ueber d.Bereich	DEC	A	; ++ ++++++++ ++++++...	DB	0DDH	;   +        +      ...	LD	L,LOW($+4)	;      schreiben und dann testen	JR	ROTCY	; ------------------------------			;         Anzeige = 'c'			;SHFT1	EQU	$	; AA.55.55...55.AA.55.55...55.AA			;       16 mal       ...	LD	DE,055AAH	;    +--------+    +--------+	DB	0DDH	;            zyklisch schreiben,	LD	L,LOW($+4)	;  17 mal zykl.ueber RAM-Bereich	JR	SHFT2+6	;       rotieren und dann testen			; ------------------------------SHFT2	EQU	$	;         Anzeige = 'd'	LD	DE,0AA55H	;	DB	0DDH	; analog mit ...	LD	L,LOW($+4)	; 55.AA.AA...AA.55.AA.AA...AA.55	JR	SHIFT	;			; ------------------------------RFRSH:	EXX		;         Anzeige = 'r' /...			;            Warten 11 Zyklen/..	LD	HL,720BH	;            Test nicht zyklisch			;	EXX	LD	A,8EH	; Rotieren ueb.Cy 8E, Warten u.	OR	A	;                         Testen	DB	0DDH	LD	L,LOW($+4)	JR	ROTCY	EXX			;	PAGE				;ADSET:	POP	HL	; Bereich mit H(Adr) markieren	LD	H,L	LD	L,0	LD	(HL),H	JR	NXTR			;RAMRR:	EXX		; RAMeRRor: dd', Byte-Adr.in HL			;                Bit-Pos. in A	POP	BC	PUSH	BC	LD	A,C	LD	C,H	LD	HL,$+6	; (primitiv-Anzeige nur f.TEST):	JP	CVABX-2	;         Adresse (hexa)	LD	A,C	;         Test-Code	LD	(DE),A	JR	ADSET			;;        --------------------------------------------------------------	PAGE;        --------------------------------------------------------------			; Start mit dd'			; L:      Warte-Zeit in dd-Zykl.			;         ungerade: nach 1.Rot.-			;                   Zykl.-> Ende			; A, Cy:  9 Test-Bits			; del:    BC AF			;         BC' HL' DE' AF'			; ------------------------------ROTCY:	LD	B,9	; fuer jed.Bit u.Cy je 1 Zyklus	EXX		; <====   Start-/aktueller Wert			;	LD	C,A	; ------------------------------	RLA		; Byte:   A     /    B	LD	B,A	; Cy:     Cy    /    C-Bit 7			;	EXX		; laden: Adr.(HL'), Laenge(DE')	EX	AF,AF'	POP	DE	PUSH	DE	LD	H,E	LD	L,0	LD	E,L	ADD	HL,DE	EX	AF,AF'		;<--+ schreib u.l.rotier.Byte/Cy			;   ! rueckw. ueb.d.RAM-Bereich	DEC	HL	;   !	LD	(HL),A	;   !	RLA		;   !			;   !	DEC	DE	;   !	EX	AF,AF'		;   !	LD	A,D	;   !	OR	E	;   !	JR	NZ,$-8	; $-$-+	EXX			;	LD	A,L	; Warten ??			;	EXX	OR	A	JR	Z,$+11	; ---+	LD	L,A			;    !	INC	DE			; <+ !	LD	A,D			;  ! !	OR	E				;  ! !	JR	NZ,$-3	; -+ !	DEC	L				;  ! !	JR	NZ,$-6	; -+ !	EXX					; <--+							;	PAGE								;	LD	A,C			; laden: A, Cy	RLA	LD	A,B							;	EXX					; laden: Adr./ Laenge	EX	AF,AF'	POP	DE	PUSH	DE	LD	H,E	LD	L,0	LD	E,L	ADD	HL,DE	EX	AF,AF'		; <---+ testen ueb.d.RAM-Bereich								;     !	DEC	HL				;     !	LD	C,A				;     !	RLA						;     !								;     !	EX	AF,AF'		;     !	LD	A,C				;     !	XOR	(HL)			;     !	JR	NZ,ROTCF	; ========> Auswertung Fehler								;     !ROTCR:	DEC	DE	; <===!==== Restart nach Fehler	LD	A,D				;     !	OR	E					;     !	JR	NZ,$-12		; ----+	EXX								;	LD	A,C				; laden: A, Cy	RLA	LD	A,B	BIT	0,L				;         Rot.-Zyklus ??								;	EXX						; Zyklus / Normal End	JR	NZ,$+4	DJNZ	ROTCY+2	;     ---> dd'	JP	(IX)								; Abnormal End: Fehler-Auswertg.ROTCF:	JP	(IY)	;     ---> dd'								;          Fehler-Ort: HL= Adr.								;                      A = Bit;        --------------------------------------------------------------	PAGE	;        --------------------------------------------------------------			; Start mit dd'			; DE':    definieren d.Testfolge			; del:    BC AF			;         BC' HL' AF'SHIFT:	EXX			; ------------------------------								;	INC	H					;         Anzeige-Code	LD	C,17			;         Zyklen-Laenge	LD	B,C								;	EXX	POP	BC				; laden: Adr.(HL'), Laenge(BC')	PUSH	BC	LD	H,C	LD	L,0	LD	C,L			;	LD	A,E				; <---+   zykl.schreiben:	EX	AF,AF'		;     !         1*(E')  (B)*(D')	LD	A,D				;     !	EXX						;     !	DJNZ	$+4			;     !	EX	AF,AF'		;     !	LD	B,C				;     !								;     !	EXX						;     !	LD	(HL),A		;     !	INC	HL				;     !	DEC	BC				;     !	LD	A,B				;     !	OR	C					;     !	JR	NZ,$-14		; ----+	EXX								;	LD	B,C				; (B) * ...								;	EXX						; <---------+	POP	BC				;       ... laden: Adr. / Laenge	PUSH	BC			;           !	LD	H,C				;           !	LD	L,0	LD	C,L	EXX								;	LD	A,B				;       ... um 1 Byte nach	CP	C					;             rechts schieben u.								;             passend auffuellen	EXX	LD	A,E	JR	Z,$+3	LD	A,D	EX	AF,AF'			;	LD	A,(HL)		; <--+	EX	AF,AF'		;    !	LD	(HL),A		;    !	INC	HL				;    !	DEC	BC				;    !	LD	A,B				;    !	OR	C					;    !	JR	NZ,$-7		; ---+	EXX								;           !	DJNZ	$-26		; ----------+	LD	B,C								;								;	EXX						; laden: Adr. / Laenge	POP	BC	PUSH	BC	LD	H,C	LD	L,0	LD	C,L			;	LD	A,E				; <---+ zykl.testen: ...	EX	AF,AF'		;     !	LD	A,D				;     !	EXX						;     !	DJNZ	$+4			;     !	EX	AF,AF'		;     !	LD	B,C				;     !								;     !	EXX						;     !	XOR	(HL)			;     !	JR	NZ,SHFTF	; ========> Auswertung   FehlerSHFTR:	INC	HL	; <===!==== Restart nach Fehler	DEC	BC				;     !	LD	A,B				;     !	OR	C					;     !	JR	NZ,$-16		; ----+								;	JP	(IX)			; Normal End: --->  dd'								;SHFTF:	JP	(IY)	; Abnormal End: Fehler-Auswertg.								; --->   dd'								;        Fehler-Ort: HL= Adr.								;                    A = Bit								;;        --------------------------------------------------------------	PAGE;        --------------------------------------------------------------			; Start mit dd'			;ADRT:	LD	H,A	; laden HL mit SP	LD	L,A	ADD	HL,SP	LD	E,A	; E := 0	SCF		; Setzen: 1.Durchlauf	EX	AF,AF'		; <============								;								; ruecksetzen "SP" (/schreiben 	DEC	HL				; <-----------+         Kennung)	LD	A,(HL)		;             !	OR	A					;             !	JR	Z,$+12		; -----+      !	DEC	HL				;      !      !	EX	AF,AF'		;      !      !	JR	C,$+5			; ---+ !      !	LD	D,(HL)		;    ! !      !	LD	A,D				;    ! !      !	LD	(DE),A		;    ! !      !	EX	AF,AF'		; <--+ !      !	JR	$-13			; -----!------+								;      !	INC	HL				; <----+ Testen Kennung	LD	D,(HL)		;      !	INC	HL				;      !	LD	A,(HL)		;      !	OR	A					;      !	JR	Z,$+20		; -----!--+	LD	A,D				;      !  !	EX	DE,HL			;      !  !	CP	(HL)			;      !  !	EX	DE,HL			;      !  !	JR	Z,$-11		; -----+  !								;      !  !	EXX						;      !  ! Fehler-Anzeige	LD	HL,$+5		;      !  !	JR	CVABX-2		;      !  !	LD	A,'s'			;      !  !	LD	(DE),A		;      !  !	EXX						;      !  !	JR	$-23			; -----+  !								;         !	EX	AF,AF'		; <-------+ 2.Durchlauf ?	DEC	HL	JR	NC,$+5		; ---+	CCF						;    !	JR	ADRT+5		;  ==!====>	EXX						; <--+	POP	AF	RET			;;**********************************************************************;	END	TITLE	''	PAGE;	PN	TE;**********************************************************************			;CVHLX:	LD	A,H	; Binaerzahl in HL 	CALL	CVABX-11	;             als 4 Hexa ab (DE)	LD	A,L	; ------------------------------	CALL	CVABX-11	; del: AF	RET			;;        --------------------------------------------------------------			; CVABX (CALL-faehig)			; ------------------------------	PUSH	HL	;                 EQU  CVABX-11 	LD	HL,$+5	; del: AF, AF'	JR	CVABX	POP	HL	RET			;;        --------------------------------------------------------------	INC	DE	; 1 ... 3 Leerschritte	INC	DE	;              vor dem Schreiben	INC	DE			;CVABX:	EX	DE,HL	; Binaerzahl in A 	LD	(HL),A	;             als 2 Hexa ab (DE)	LD	A,33H	; ------------------------------	RRD		;         HL:  Return-Adresse			; --->    DE:  Adr.nach 2.Hexa	INC	HL	;         del: AF	CP	3AH	JR	C,$+4	ADD	A,07H	LD	(HL),A	DEC	HL			;	LD	A,(HL)	CP	3AH	JR	C,$+5	ADD	A,07H	LD	(HL),A			;	INC	HL	INC	HL	EX	DE,HL	JP	(HL)			;;**********************************************************************	PAGE	;**********************************************************************			;	EX	(SP),HL	; Anzeige Text ab Adr.nach CALL	JR	DISPL	; ...        (CALL-/RET-faehig)	EX	(SP),HL	; -----------------------------	RET				;DISPL:	LD	A,(HL)	; bis Bit 7 = 1       nach (DE)	RES	7,A	; ------------------------------			; Steuerzeichen:	CP	1EH	;    1E:    New-Line	JR	Z,NL	; ------------------------------			; DE:    aktuelle BS-Pos.  <--->			; del:   AF, nur bei RPT B 	LD	(DE),A	INC	DEDSPLE:	BIT	7,(HL)	; <------	INC	HL	JR	Z,DISPL	JP	(HL)	; =======>			;	INC	DENL:	LD	A,E	; neue Zeile	AND	0FH	JR	NZ,NL-1			;	LD	A,D	AND	0FH	ADD	A,E	RRCA	RRCA	RRCA	RRCA	SUB	5	JR	Z,DSPLE	JR	NC,$-4	JR	NL-1			;;**********************************************************************	PAGE	;**********************************************************************	EI		; PIO-Programmierung	RETI		; ------------------			;TASTP:	LD	A,0CFH	; Port A: Bit-Modus	OUT	(TAPIO+2),A	LD	A,1	;         Bit 0 Eingabe	OUT	(TAPIO+2),A	LD	A,03H	;         kein Interrupt	OUT	(TAPIO+2),A	OUT	(TAPIO+3),A	; Port B: ...	LD	A,0CFH	;         Bit-Modus	OUT	(TAPIO+3),A	LD	A,0FFH	;         alle Bits Eingabe	OUT	(TAPIO+3),A	RET			; ------------------------------			; --->    del:  A;        --------------------------------------------------------------			; Tastatur-Abfrage: Code in A			; ----------------- =========TASTE:	IN	A,(TAPIO+1)	;         lesen Tasten-Code,(C)	EX	AF,AF'	LD	A,0FEH	;         ruecksetzen Tastatur	OUT	(TAPIO),A	LD	A,0FCH	;         aktivieren Tastatur	OUT	(TAPIO),A	EX	AF,AF'	OR	A	JR	Z,TASTE	RET			;;**********************************************************************;	END		TITLE	'EPROM-, RAM- und Tastatur-Test  DEG 2000  / TAP2'	PAGE;	PN	TE;**********************************************************************ANFNG	EQU	TEST1	; Adresse EPROM fuer "TEST"			;SYS1	EQU	003AH	; System ohne BS-LoeschenBSANF	EQU	3000H	; Adresse Bildschirm-RAMBSLNG	EQU	800H	; Laenge Bildschirm-RAM			;VON	EQU	3000H	; Parameter f.BS-/RAM-VerschiebgNACH	EQU	8000H	;           fuer best.RAM-TestsUM	EQU	NACH-VON			;TAPIO	EQU	84H	; Adresse Tastatur-PIO			;;**********************************************************************;*                                                                    *;*       EPROM-, RAM- und Tastatur-Test  DEG 2000  / TAP2:            *;*       -------------------------------------------------            *;*       (die korrekte Funktion der Speicherblocksteuerung            *;*                                               wird vorausgesetzt)  *;*                                                                    *;*       Aufruf: TEST                                                 *;*                                                                    *;*       Aufgabe:                                                     *;*                                                                    *;*             - Kontrolle der Pruefsummen je STE                     *;*                                ----> Anzeige der fehlerhaften STE  *;*                                                                    *;*             - RAM-Test:      1- und 0-Spike-Test     --> "a", "b"  *;*                              ("WC")-Shift-Test       --> "c", "d"  *;*                              Test auf Refresh            --> "r"   *;*                              Test auf STE-Adressierung   --> "s"   *;*                                ----> Anzeige der fehlerhaften STE  *;*                                                                    *;*             - Tastaturtest                                         *;*                                ----> Anzeige Tasten-Code ISO-7 und *;*                                                        hexadezimal *;*                                                                    *;*                                                                    *;*       Zur Sicherung in den RAM geladener Programmteile:            *;*       -------------------------------------------------            *;*             - Kontrolle der Pruefsumme eines Programms             *;*                                                                    *;*             - Berechnung der Pruefsumme eines Programms            *;*                                                                    *;**********************************************************************	PAGE	;**********************************************************************			;	DW	$	DB	'TAST'			;	LD	SP,TAST+4			;TTEST:	LD	DE,BSANF+740	; Tastatur-Test und -Abfrage	LD	HL,$+5	; --------------------------	JR	DISPL	DB	'Taste:   '	DB	3FH OR 80H	EX	DE,HL	LD	DE,80	LD	(HL),14H	DEC	HL	SBC	HL,DE	LD	(HL),13H	ADD	HL,DE	ADD	HL,DE	LD	(HL),12H	SBC	HL,DE	EX	DE,HL	LD	C,E			;	JR	TASTE+2	; Tastatur ruecksetzen			;TZYK:	JR	TASTE	; Tasten-Code lesen	DEC	SP	DEC	SP	LD	E,C	LD	(DE),A	; anzeigen:  ISO-7-Bit-Code	LD	HL,TZYK	;            2 Hexa	JP	CVABX-3			;;**********************************************************************	PAGE	;**********************************************************************			;TEST:	DW	$	DB	'TEST'			;	LD	SP,STACK;        --------------------------------------------------------------			;BSCLR:	LD	HL,BSANF+BSLNG-1	; Bildschirm loeschen	LD	(HL),' '	LD	DE,BSANF+BSLNG-2	LD	BC,BSLNG-2	LDDR			;;        --------------------------------------------------------------			;PTEST:	LD	HL,$+5	; PROM-Test	JR	TTEST+6	; ---------        (DISPL)	DB	'?? PROM:'	DB	1EH OR 80H			;	OUT	(0C4H),A	; Reset- u.Umschalt-Sperre aus			;	LD	A,38H	; System 1:      (0 -> aktiv:..)	OUT	(0C0H),A	;            7:BS-Ram30  (7024)			;            6:BS-Video1 (7024)			;            2:PFS-E40 			;            1:OFS-R10/E28			;            0:ZRE-E00/R0C	LD	A,003H	; System 2:      (1 -> aktiv:..)	OUT	(0C1H),A	;            1:PFS-E80 (Basic)			;            0:PFS-EC0 (System)			;	JP	PROMT	; UP PROM-Test			;;        --------------------------------------------------------------	PAGE	;        --------------------------------------------------------------			;RTEST:	LD	HL,$+5	; RAM-Test	JR	PTEST+3	; --------         (DISPL)	DW	1E1EH	DB	'?? RAM:'	DB	1EH OR 80H	DEC	DE			;RTST1:	LD	A,00H	; System 2:...	OUT	(0C1H),A	;          ... nicht aktiv			;	LD	A,20H	; System 1:...	OUT	(0C0H),A	;          ... alles aktiv			;	JP	RAMT	; UP RAM-Test			;RTST2:	EXX		; Verschieb.BS-/Programm-Inhalt:	LD	DE,NACH	;         ... physisch	LD	HL,VON	LD	BC,5000H	;                      (Laenge)	LDIR			;	LD	HL,RAMT+5000H+3	;         ... logisch	LD	B,0	;             ... Programm			;	LD	A,(HL)	ADD	A,HIGH(UM)	LD	(HL),A	DEC	SP	POP	AF	LD	C,A	ADD	HL,BC	OR	A	JR	NZ,$-9	EXX			;	LD	HL,UM	;             ... BS-Position	ADD	HL,DE	EX	DE,HL			;	JR	RTST2-3				; Test BS-RAM      (UP RAM-Test)			;RTST3:	LD	A,0A7H	; System 1:      (0 -> aktiv:..)	OUT	(0C0H),A			;            6:BS-Video1 (7024)										;            4:OPS-RC0										;            3:OPS-R80	LD	A,84H					; System 2:      (1 -> aktiv:..)	OUT	(0C1H),A			;            7:OPS-R00										;            2:OPS-R40										;	LD	SP,RAM3-2+UM	; Korrektur SP	JP	RAMT+UM				; UP RAM-Test										;BSRST:	LD	A,00H		; System 2: ...	OUT	(0C1H),A			;           ... nicht aktiv										;	LD	A,20H					; System 1: ...	OUT	(0C0H),A			;           ... alles aktiv										;	LD	HL,NACH				; restore BS-Inhalt	LD	DE,VON	LD	BC,800H	LDIR			;;        --------------------------------------------------------------			;	JP	TASTP-3	; Prog.Tastatur-PIO incl.EI/RETI			;;**********************************************************************;	END		TITLE	'T a b e l l e n     T A P 2'	PAGE;	PN	TE;**********************************************************************;*                                                                    *;*       T a b e l l e n     T A P 2                                  *;*                                                                    *;**********************************************************************;*                                                                    *;*       EPROM - T a b e l l e      P R O M                           *;*       ==================================                           *;*                                                                    *;*       Jede Eintragung hat folgenden Aufbau:                        *;*                                                                    *;*       - 1 Byte High-Teil der EPROM-Adresse,                        *;*         (der niederwertige Teil wird als 0 angenommen)             *;*                                                                    *;*       - 2 Bytes Kontroll-Wert der Pruefsumme (L-Teil, H-Teil)      *;*                                                                    *;*                                                                    *;*       RAM - T a b e l l e n     R A M 1 - 3                        *;*       =====================================                        *;*                                                                    *;*       Jede Eintragung hat folgendes Format:                        *;*                                                                    *;*       - 1 Byte High-Teil der Adresse des RAM-Bereichs              *;*                                                                    *;*       - 1 Byte High-Teil der Bereichslaenge                        *;*                                                                    *;*       (der niederwertige Teil wird stets als 0 angenommen)         *;*                                                                    *;*                                                                    *;**********************************************************************;*                                                                    *;*       Zwischen den Tabellen befinden sich Steuer-Bytes (FF bzw.    *;*       FF00) und Pseudo-Stack fuer RET und anderes                  *;*                                                                    *;**********************************************************************			;STACK	EQU	$	; Pseudo-Stack			; ------------			;;**********************************************************************	PAGE	;**********************************************************************			;PROM:	DB	000H	; System 1	DW	0340EH			;	DB	004H	DW	0CFB6H			;	DB	008H	DW	083BAH			;	DB	010H	;         EDIT	DW	0FDAEH			;	DB	014H	DW	0F6F8H			;	DB	018H	DW	0D51FH			;	DB	01CH	DW	0A089H			;	DB	020H	DW	0C731H			;	DB	024H	DW	0B4C4H			;	DB	040H	DW	0BE83H			;	DB	044H	DW	08865H			;	DB	048H	DW	0B2E0H			;	DB	04CH	DW	05A7CH			;	DB	050H	DW	0D3F3H			;	DB	054H	DW	09CF4H			;	DB	058H	DW	0EE97H			;	DB	05CH	DW	0414EH			;	DB	060H	DW	09D20H			;	DB	064H	DW	0B412H			;	DB	068H	DW	0BF86H			;	DB	06CH	DW	006F8H			;	DB	070H	DW	0D1A8H			;PROM0:	DB	074H	; Programm-PROM "Test"	DW	0FFFFH			;	DB	078H	DW	09410H			;	DB	07CH	DW	0598EH			;;        --------------------------------------------------------------	DB	080H	; System 2:	DW	0B175H	;         BSC...			;	DB	084H	DW	003C8H			;	DB	088H	DW	033F9H			;	DB	08CH	DW	0FA89H			;	DB	090H	DW	01086H			;	DB	094H	DW	0F4CFH			;	DB	098H	DW	05CC6H			;	DB	09CH	DW	04075H			;	DB	0A0H	DW	05BF2H			;	DB	0A4H	DW	06360H			;	DB	0A8H	DW	08DA0H			;	DB	0ACH	DW	0D6CCH			;	DB	0B0H	DW	04A5EH			;	DB	0B4H	DW	077EBH			;	DB	0B8H	DW	077EBH			;	DB	0BCH	DW	077EBH			;;        --------------------------------------------------------------	DB	0C0H	;         System-Programme	DW	0A899H			;	DB	0C4H	DW	01D64H			;	DB	0C8H	DW	045F8H			;	DB	0CCH	DW	0EB13H			;	DB	0D0H	DW	0AFDCH			;	DB	0D4H	DW	0755DH			;	DB	0D8H	DW	0F8FBH			;	DB	0DCH	DW	08656H			;	DB	0E0H	DW	08230H			;	DB	0E4H	DW	09279H			;	DB	0E8H	DW	007B9H			;	DB	0ECH	DW	0FFB5H			;	DB	0F0H	DW	04DA1H			;	DB	0F4H	DW	0C7B5H			;	DB	0F8H	DW	077B8H			;	DB	0FCH	DW	0C6BDH			;;**********************************************************************	DB	0FFH	;         Ende-Kennzeichen PROM	DW	RTEST	;         Return-Adr. PROMT	DW	0FFH	;         Start-Kennzeichen RAM1;**********************************************************************			;RAM1:	DB	0CH	; RAM-Tabelle 1: System 1	DB	04H			;	DB	0C0H	DB	40H			;	DB	80H	DB	40H			;	DB	28H	DB	08H			;;**********************************************************************	PAGE	;**********************************************************************	DW	0FFH	;         Ende-Kennzeichen RAM1	DW	RTST2	;         Return-Adr. RAMT			;RLTAB:	DB	11	;         Tabelle der zu 	DB	6	;           verschieb.Adr.-Werte	DB	57	;           relativ zu RAMT+3	DB	3	DB	212			;	DB	0	;         Ende-Kennzeichen RLTAB	DW	0FFH	;         Start-Kennzeichen RAM2;**********************************************************************			;RAM2:	DB	30H	; RAM-Tabelle 2: BS-RAM 1	DB	08H			;;**********************************************************************	DW	0FFH	;         Ende-Kennzeichen RAM2	DW	RTST3+UM	;         Return-Adr.RAMT	DW	0FFH	;         Start-Kennzeichen RAM3;**********************************************************************			;RAM3:	DB	00H	; RAM-Tabelle 3: System 2	DB	40H			;	DB	40H	DB	40H			;;**********************************************************************	DW	0FFH	;         Ende-Kennzeichen RAM3	DW	BSRST+UM	;         Return-Adr.RAMT			;TAST	EQU	$	; Fuer "TAST"/TTEST...	DW	TASTP	;         ... EI / RETI	DW	TTEST	;         ... TASTP	DW	TZYK	;         ... TASTE+2	DW	TZYK+2	;         ... TASTE			;;**********************************************************************END	EQU	$	; Soll-Wert ANFNG+400H;**********************************************************************	END	