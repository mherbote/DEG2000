	.z80
	title	'monitor   MH-Computer   1184  2.2'
;*********************************************************
;*  monitor   MH - computer      Stand: 30.November 1984 *
;*                                                       *
;*  Version  2 . 2               by   Marcus Herbote     *
;*********************************************************

cr	equ	00dh
lf	equ	00ah
bell	equ	007h
rub	equ	0ffh
fil	equ	000h
max	equ	007h

rst7	equ	038h
;
;	csts	0ffh in A, falls Zeichen da
;	iochk	in A aktuelle IO-Konfiguration
;	ioset	veraendern IO in C-Register
;	memck	in B high in A low memory
;	trap	Breakpoint entry
;
	page	87
;
;	im  ROM  auf Adresse 0
;
beginn:
	ld	a,3
	out	(83h),a
anf:					;um Start von beliebiger Stelle
	ld	hl,hauptp
	ld	de,0f000h		;Transport aller Zellen
	ld	bc,0fffh		;4k Transfer
	ldir
	jp	0f000h
;
hauptp:
;
	.phase	0f000h			;Start des Monitors
;
; ---	Start des eigentlichen Monitors ---
;
;	Anfang verschiebbar
;
;
;	Vector Table
;

;
	jp	begin
	jp	ci
	jp	ri
	jp	co
	jp	poo
	jp	lo
	jp	csts
	jp	iobyte
	jp	ioset
	jp	memck
;
trap:
	jp	restart
;
	defw	tabstart		;Tabellen Start user Bereich
					;Sprungtabelle immer indirekt verwenden
	defw	lastmon			;Adresse letzte belegte Zelle
					;des Monitors danach patch frei
;
;
msg:
	defb	cr,lf,0,0,0,bell
	defm	'monitor_______MH_-_computer_____Version 2.2',cr,lf
	defm	'===========================================',cr,lf,lf
	defm	'(C) Nov 1984       by  Marcus Herbote',cr,lf,0
msgl	equ	$-msg
	page
;
;	init  Teil
;
begin:	xor	a
	ld	(iobyt),a
;
	ld	sp,ahead-4
	jp	memsiz+1
	defw	ahead
ahead:	ld	sp,hl
	ex	de,hl
	ld	bc,endx-exit
	ld	hl,exit
	ldir
	ex	de,hl
	ld	bc,-5fh
	add	hl,bc
	push	hl
	ld	hl,0
	ld	b,10			;Register
stkit:
	push	hl
	djnz	stkit
hello:
	ld	c,0ch
	call	co
	ld	b,msgl
	call	tom1
start:
	ld	de,start
	push	de
	call	crlf
	ld	c,'#'
	call	co
;
star0:	call	ti
	and	7fh
	jr	z,star0
	sub	'A'
	ret	m
	cp	'Z'-'A'+1
	ret	nc
	add	a,a
	ld	hl,tbl
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ld	c,2
	jp	(hl)			;exec
;
	page
tbl:
	defw	assign
	defw	bye
	defw	comp
	defw	disp
	defw	eof
	defw	fill
	defw	goto
	defw	hexn
	defw	boot1
	defw	test
	defw	kexec
	defw	load
	defw	move
	defw	null
	defw	oexec
	defw	puta
	defw	query
	defw	read
	defw	subs
	defw	type
	defw	unlo
	defw	verify
	defw	write
	defw	xam
	defw	where
	defw	size
;
	page
;
;	boot  eines beliebigen Betriebssystems
;
flpmsg:
	defb	cr,lf
	defm	'SOFTBOOT'
	defb	cr,lf,0
;
boot1:
	ld	hl,flpmsg		;falls da
	call	print
	call	ci
;
	ld	hl,80h			;booten
	ld	d,0			;trk	0
	ld	e,1			;sector	1
	ld	b,1			;lesen
	ld	c,0			;drive	0
	call	soft
	jp	c,error			;fehler
	jp	0			;und Starten   (80h)
;
;	print routine
;
print:
	ld	a,(hl)
	or	a
	ret	z
	ld	c,a
	call	co
	inc	hl
	jp	print
;
;	IOBYTE  assigne
;
;	000000xx	console
;	0000xx00	reader
;	00xx0000	punch
;	xx000000	lister
;
;	00 =		teletype cons
;
assign:						;zuweisung
	call	ti
	ld	hl,ltbl
	ld	bc,400h
	ld	de,5
arep0:	cp	(hl)
	jr	z,arep1
	add	hl,de
	inc	c
	djnz	arep0
	jr	lxerr
arep1:	ld	e,c
arep22:	call	ti
	cp	'='
	jr	nz,arep22
	call	ti
	ld	bc,400h
arep33:	inc	hl
	cp	(hl)
	jr	z,lxa4
	inc	c
	djnz	arep33
lxerr:	jp	error
lxa4:	ld	a,3
	inc	e
lxa5:	dec	e
	jr	z,lxa6
	sla	c
	sla	c
	rla
	rla
	jr	lxa5
lxa6:	cpl
	ld	d,a
lxa7:	call	pchk
	jr	nc,lxa7
	ld	a,(iobyt)
	and	d
	or	c
	ld	c,a
;
;	ioset
;
ioset:
	ld	a,c
	ld	(iobyt),a
	ret
;
;	bye	Command
;
bye:
	call	crlf
lxby:	call	ki
	cp	1eh			;CRTL N
	jr	nz,lxby
	pop	de
	jp	hello
;
;	put ASCII into MEM
;
puta:
	call	expr1
	call	crlf
	pop	hl
arep11:	call	ki
	cp	4
	jp	z,lfadr
	cp	'_'
	jr	z,arep34
	ld	(hl),a
	ld	c,a
	inc	hl
arep23:	call	co
	jr	arep11
arep34:	dec	hl
	ld	c,(hl)
	jr	arep23
;
;	compare bin
;
comp:
	call	exlf
lxc:	call	riff
	cp	(hl)
	call	nz,cerr
	call	hildx
	jr	lxc
;
;	m Ausgabe
;
cerr:
	ld	b,a
	call	hlsp
	ld	a,(hl)
	call	lbyte
	call	blk
	ld	a,b
	call	lbyte
	jp	crlf
;
;	display
;
disp:
	call	exlf
lxd0:	call	lfadr
lxd1:	call	blk
	ld	a,(hl)
	call	lbyte
	call	hildx
	ld	a,l
	and	00fh
	jr	nz,lxd1
	jr	lxd0
;
;	eof ausgabe
;
eof:
	call	expr1
	call	peol
	ld	c,':'
	call	poo
	xor	a
	call	pbyte
	pop	hl
	call	padr
	ld	hl,0
	call	padr
	jp	null
;
;	fill
;
fill:
	call	expr3
lxf:	ld	(hl),c
	call	hilo
	jr	nc,lxf
	pop	de
	jp	start
;
;	exec other prgs
;
goto:
	call	pchk
	jr	c,lxg3
	jr	z,lxg0
	call	exf
	pop	de
	ld	hl,ploc
	add	hl,sp
	ld	(hl),d
	dec	hl
	ld	(hl),e
	ld	a,b
	cp	cr
	jr	z,lxg3
lxg0:	ld	d,2
	ld	hl,tloc
	add	hl,sp
lxg1:	push	hl
	call	expr1
	ld	e,b
	pop	bc
	pop	hl
	ld	a,b
	or	c
	jr	z,lxg2
	ld	(hl),c
	inc	hl
	ld	(hl),b
	inc	hl
	ld	a,(bc)
	ld	(hl),a
	inc	hl
	ld	a,0ffh
	ld	(bc),a
lxg2:	ld	a,e
	cp	cr
	jr	z,lxg2a
	dec	d
	jr	nz,lxg1
lxg2a:	ld	a,0c3h
	ld	(rst7),a
	ld	hl,trap
	ld	(rst7+1),hl
lxg3:	call	crlf
	pop	de
	ld	hl,22
	add	hl,sp
	jp	(hl)
;
;	test
;
test:
	call	exlf
lxt11:	ld	a,(hl)
	ld	b,a
	cpl
	ld	(hl),a
	xor	(hl)
	jr	z,lxt2
	push	de
	ld	d,b
	ld	e,a
	call	hlsp
	call	bits
	call	crlf
	ld	b,d
	pop	de
lxt2:	ld	(hl),b
	call	hildx
	jr	lxt11
;
;	lde
;
move:
	call	expr3
lxm:	ld	a,(hl)
	ld	(bc),a
	inc	bc
	call	hildx
	jr	lxm
;
;	read routine
;
read:
	call	expr1
	ld	a,b
	sub	cr
	ld	b,a
	ld	c,a
	pop	de
	jr	z,lxr00
	call	expr1
	pop	bc
lxr00:	ex	de,hl
	exx
	call	crlf
lod0:	call	rix
	sub	':'
	ld	b,a
	and	0feh
	jr	nz,lod0
	ld	d,a
	call	sbyte
	ld	e,a
	call	sbyte
	push	af
	call	sbyte
	exx
	pop	de
	ld	e,a
	push	bc
	push	de
	push	hl
	add	hl,de
	ex	(sp),hl
	pop	ix
	exx
	pop	hl
	call	sbyte
	dec	a
	ld	a,b
	pop	bc
	jr	nz,arepa
	add	hl,bc
	add	ix,bc
arepa:	inc	e
	dec	e
	jr	z,done
	dec	a
	jr	z,lodr
lxl11:	call	sbyte
	call	store
	jr	nz,lxl11
lod4:	call	sbyte
	jr	z,lod0
err2:	push	ix
	pop	hl
	call	ladr
	jp	error
done:	ld	a,h
	or	l
	ret	z
	ex	de,hl
	ld	hl,ploc
	add	hl,sp
	ld	(hl),d
	dec	hl
	ld	(hl),e
	ret
lodr:	ld	l,1
lxl12:	call	lod03
	jr	c,lxl33
lxl5:	call	store
	jr	nz,lxl12
	jr	lod4
lxl33:	ld	c,a
	call	lod03
	ld	b,a
	exx
	push	bc
	exx
	ex	(sp),hl
	add	hl,bc
	ld	a,l
	call	store
	ld	a,h
	pop	hl
	jr	lxl5
lod03:	dec	l
	jr	nz,lxl01
	call	sbyte
	dec	e
	ld	h,a
	ld	l,8
lxl01:	call	sbyte
	sla	h
	ret

sbyte:
	push	bc
	call	ribble
	rlca
	rlca
	rlca
	rlca
	ld	c,a
	call	ribble
	or	c
	ld	c,a
	add	a,d
	ld	d,a
	ld	a,c
	pop	bc
	ret

store:
	ld	(ix+0),a
	cp	(ix+0)
	jr	nz,err2
	inc	ix
	dec	e
	ret

;	subst
;
subs:
	call	expr1
	pop	hl
lxs0:	ld	a,(hl)
	call	lbyte
	call	copck
	ret	c
	jr	z,lxs1
	cp	'_'
	jr	z,lxs2
	push	hl
	call	exf
	pop	de
	pop	hl
	ld	(hl),e
	ld	a,b
	cp	cr
	ret	z
lxs1:	inc	hl
lxs3:	ld	a,l
	and	7
	call	z,lfadr
	jr	lxs0
lxs2:	dec	hl
	jr	lxs3
;
;	type
;
type:
	call	exlf
lxt0:	call	lfadr
	ld	b,32+32
lxt1:	ld	a,(hl)
	and	7fh
	cp	' '
	jr	nc,lxt3
lxt22:	ld	a,'.'
lxt3:	cp	7ch
	jr	nc,lxt22
	ld	c,a
	call	co
	call	hildx
	djnz	lxt1
	jr	lxt0
;
;	iobyte
;
iobyte:
	ld	a,(iobyt)
	ret
;
;	search
;
where:
	ld	d,0
lxw00:	call	expr1
	pop	hl
	ld	h,l
	push	hl
	inc	sp
	inc	d
	ld	a,b
	sub	cr
	jr	nz,lxw00
	ld	b,a
	ld	c,a
	ld	h,a
	ld	l,d
	dec	l
	add	hl,sp
	push	hl
	push	bc
findc:	push	bc
	call	crlf
	pop	bc
find:	pop	hl
	pop	ix
	ld	e,d
	ld	a,(ix+0)
	cpir
	jp	po,done2
	push	ix
	push	hl
found:	dec	e
	jr	z,tell
	ld	a,(ix-1)
	cp	(hl)
	jr	nz,find
	inc	hl
	dec	ix
	jr	found
tell:	pop	hl
	push	hl
	dec	hl
	push	bc
	call	ladr
	pop	bc
	jr	findc
done2:	inc	sp
	dec	e
	jr	nz,done2
	ret
;
;	write
;
write:
	call	exlf
lxw0:	call	peol
	ld	bc,':'
	call	poo
	push	de
	push	hl
lxw1:	inc	b
	call	hilo
	jr	c,lxw4
	ld	a,24
	sub	b
	jr	nz,lxw1
	pop	hl
	call	lxw2
	pop	de
	jr	lxw0
lxw2:	ld	d,a
	ld	a,b
	call	pbyte
	call	padr
	xor	a
	call	pbyte
lxw3:	ld	a,(hl)
	call	pbyte
	inc	hl
	djnz	lxw3
	xor	a
	sub	d
	jp	pbyte
lxw4:	pop	hl
	pop	de
	xor	a
	jr	lxw2
;
;	xam!user reg
;
xam:
	call	ti
	ld	hl,actbl
	cp	cr
	jr	z,lxx6
	cp	27h
	jr	nz,lxx0
	ld	hl,prmtb
	call	ti
	cp	cr
	jr	z,lxx6
lxx0:	cp	(hl)
	jr	z,lxx1
	bit	7,(hl)
	jp	nz,error
	inc	hl
	inc	hl
	jr	lxx0
lxx1:	call	blk
lxx2:	inc	hl
	ld	a,(hl)
	ld	b,a
	and	3fh
	ex	de,hl
	ld	l,a
	ld	h,0
	add	hl,sp
	ex	de,hl
	inc	hl
	ld	a,(de)
	call	lbyte
	bit	7,b
	jr	z,lxx3
	dec	de
	ld	a,(de)
	call	lbyte
lxx3:	call	copck
	ret	c
	jr	z,lxx5
	push	hl
	push	bc
	call	exf
	pop	hl
	pop	af
	push	bc
	push	af
	ld	a,l
	ld	(de),a
	pop	bc
	bit	7,b
	jr	z,lxx4
	inc	de
	ld	a,h
	ld	(de),a
lxx4:	pop	bc
	pop	hl
	ld	a,b
	cp	cr
	ret	z
lxx5:	bit	7,(hl)
	ret	nz
	jr	lxx2
lxx6:	call	crlf
lxx7:	call	blk
	ld	a,(hl)
	inc	hl
	or	a
	ret	m
	ld	c,a
	call	co
	ld	c,'='
	call	co
	ld	a,(hl)
	ld	b,a
	and	3fh
	inc	hl
	ex	de,hl
	ld	l,a
	ld	h,0
	add	hl,sp
	ex	de,hl
	bit	6,b
	jr	nz,lxx9
	ld	a,(de)
	call	lbyte
	bit	7,b
	jr	z,lxx7
	dec	de
	ld	a,(de)
lxx8:	call	lbyte
	jr	lxx7
lxx9:	push	hl
	ld	a,(de)
	ld	h,a
	dec	de
	ld	a,(de)
	ld	l,a
	ld	a,(hl)
	pop	hl
	jr	lxx8
	page
;
;	message output routine
;
tom1:
	ld	hl,msg
tom:
	ld	c,(hl)
	inc	hl
	call	co
	djnz	tom
	call	csts
	or	a
	ret	z
;
;	if CRTL_C abort
;
cchk:
	call	ki
	cp	3
	ret	nz
;
;	error
;
error:
	call	memsiz
	ld	de,-22
	add	hl,de
	ld	sp,hl
	ld	c,7
	call	co
	ld	c,'*'
	call	co
	jp	start
;
;	reader input
;		abort on carry, compare with D
;
riff:
	call	ri
	jr	c,error
	cp	d
	ret
;
;	search mem
;
size:
	call	memsiz
	ld	bc,endx-exit
	add	hl,bc
;
lfadr:
	call	crlf
;
hlsp:
	call	ladr
;
blk:
	ld	c,' '
;
;	+++ main co routine +++  mod
;
co:
	ld	a,(iobyt)
	and	3
	jr	nz,co1
;
ttyout:
	push	hl
	push	bc
	push	de
	push	bc

	xor	a
	out	(0c1h),a
	out	(0c0h),a

	pop	bc
	ld	a,c
	cp	0
	jr	z,toute
	cp	0ch
	jr	z,toutff
	cp	cr
	jr	z,toutcr
	cp	lf
	jr	z,toutlf
	cp	bell
	jr	z,toutb
	ld	hl,(bpos)
	ld	(hl),a
	inc	hl
	ld	(bpos),hl
	ld	de,bws+80*24
	or	a
	sbc	hl,de
	jr	nz,toute
toutcr:	ld	hl,bws+80
	ld	de,bws
	ld	bc,80*24
tout:	ldir
toutlf:	ld	hl,bws+23*80
	ld	(bpos),hl
toute:
	ld	a,01000111b
	out	(0c0h),a
	ld	a,10000100b
	out	(0c1h),a

	pop	de
	pop	bc
	pop	hl
	ret
toutff:	ld	hl,bws
	ld	de,bws+1
	ld	bc,80*25
	ld	(hl),' '
	jr	tout
toutb:	ld	a,10111110b
	out	(atss2),a
	jr	toute
;
co1:
	jp	userco				;dort Sprung moeglich
;
;	+++ main lo routine +++   mod
;
lo:
	ld	a,(iobyt)
	and	0c0h
	jp	z,ttyout			;AL=T
	cp	10000000b
	jp	nz,userlo
lo1:
	ld	a,c
	ret
;
;
;
peol:
	ld	c,cr
	call	poo
	ld	c,lf
;
;	+++ main poo routine +++
;
poo:
	ld	a,(iobyt)
	and	00110000b
	jp	z,co				;AP=T
	cp	00010000b
	jp	nz,userpoo
lxlpo:
	ld	a,c
	ret
;
;	unload
;
unlo:
	call	exlf
	call	lead
	call	mark
lxo:	ld	c,(hl)
	call	poo
	call	hilo
	jr	nc,lxo
	call	mark
;
;	goto null
;	null punch
;
null:
	call	lead
	ret
;
conv:
	and	00fh
	add	a,90h
	daa
	adc	a,40h
	daa
	ld	c,a				;hex to ASC
	ret
;
exlf:
	call	expr
	pop	de
	pop	hl
;
crlf:
	push	hl
	ld	b,5
	call	tom1
	pop	hl
	ret
;
;	+++ main status routine +++
;
csts:
	ld	a,(iobyt)
	and	3
	jr	nz,cs0
ttycsts:
;	in	a,(atss1)
;	bit	3,a
	ld	a,0
;	jr	nz,tsts
	ld	a,0ffh
tsts:	or	a
	ret

cs0:	jp	usercsts			;user bereich
;
expr3:
	inc	c
	call	expr
	call	crlf
	pop	bc
	pop	de
	pop	hl
	ret
;
expr1:
	ld	c,1
;
expr:
	ld	hl,0
ex0:	call	ti
ex1:	ld	b,a
	call	nibble
	jr	c,lxex2
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	or	l
	ld	l,a
	jr	ex0
lxex2:	ex	(sp),hl
	push	hl
	ld	a,b
	call	qchk
	jr	nc,lxex3
	dec	c
	ret	z
lxex3:	jp	nz,error
	dec	c
	jr	nz,expr
	ret
exf:
	ld	c,1
	ld	hl,0
	jp	ex1
;
hildx:
	call	hilo
	ret	nc
	pop	de
	ret
;
hilo:
	inc	hl
	ld	a,h
	or	l
	scf
	ret	z
	ld	a,e
	sub	l
	ld	a,d
	sbc	a,h
	ret
;
;	hex math
;
hexn:
	call	exlf
	push	hl
	add	hl,de
	call	hlsp
	pop	hl
	or	a
	sbc	hl,de
ladr:
	ld	a,h
	call	lbyte
	ld	a,l
lbyte:
	push	af
	rrca
	rrca
	rrca
	rrca
	call	lxr22
	pop	af
lxr22:	call	conv
	jp	co
;
mark:
	ld	bc,8ffh
	jr	leo
;
lead:
	ld	bc,4800h
leo:	call	poo
	djnz	leo
	ret
;
memck:
	push	hl
	call	memsiz
	ld	a,l
	sub	3ch
	jr	nc,lxbz
	dec	h
lxbz:	ld	b,h
	pop	hl
	ret
;
memsiz:
	push	bc
	ld	hl,-1
lxm0:	inc	h
	ld	a,(hl)
	cpl
	ld	(hl),a
	cp	(hl)
	cpl
	ld	(hl),a
	jr	nz,lxm0
lxm1:	inc	h
	ld	a,h
	cp	0f0h				;all RAM
	jr	z,lxm2				;ready 0f000h
	ld	a,(hl)
	cpl
	ld	(hl),a
	cp	(hl)
	cpl
	ld	(hl),a
	jr	z,lxm1
lxm2:	dec	h
	ld	bc,exit-endx
	add	hl,bc
	pop	bc
	ret
;
ribble:
	call	rix
nibble:
	sub	'0'
	ret	c
	cp	'G'-'0'
	ccf
	ret	c
	cp	10
	ccf
	ret	nc
	sub	'A'-'9'-1
	cp	00ah
	ret
;
padr:
	ld	a,h
	call	pbyte
	ld	a,l
;
pbyte:
	push	af
	rrca
	rrca
	rrca
	rrca
	call	conv
	call	poo
	pop	af
	push	af
	call	conv
	call	poo
	pop	af
	add	a,d
	ld	d,a
	ret
;
copck:
	ld	c,'-'
	call	co
pchk:
	call	ti
qchk:
	cp	' '
	ret	z
	cp	','
	ret	z
	cp	cr
	scf
	ret	z
	ccf
	ret
;
;	+++ main ci routine +++
;
ci:
	ld	a,(iobyt)
	and	3
	jr	nz,ci1
ttyin:
;	in	a,(atss1)
;	bit	3,a
;	jr	nz,ttyin
	push	bc
	push	af
	in	a,(atsd)
	ld	b,a
	pop	af
	bit	2,a
;	jr	nz,ta21
	ld	a,b
	cp	60h
	jr	nc,ta21
	cp	40h
	jr	c,ta21
	sub	40h
	ld	b,a
ta21:	ld	a,b
	pop	bc
	ret

ci1:	jp	userci
;
;	+++ main ri routine +++
;
ri:
	ld	a,(iobyt)
	and	00001100b
	jp	z,ci				;AP=T
	cp	00000100b
	jp	nz,userri
lxlpi:						;AP=P
	jp	userri
;
rix:
	call	riff
	and	7fh
	ret
;
load:
	call	expr1
	pop	hl
	call	crlf
	ld	d,0ffh
lxl0:	ld	b,4
lxll1:	call	riff
	jr	nz,lxl0
	djnz	lxll1
lxl2:	call	riff
	jr	z,lxl2
	ld	(hl),a
	ld	a,7
;	+++ out tty +++
lxl3:	inc	hl
	call	riff
	jr	z,lxel
	ld	(hl),a
	jr	lxl3
lxel:	ld	e,1
lxel0:	call	riff
	jr	nz,lxel1
	inc	e
	ld	a,7				;max +++
	cp	e
	jr	nz,lxel0
	jp	ladr
lxel1:	ld	(hl),d
	inc	hl
	dec	e
	jr	nz,lxel1
	ld	(hl),a
	jr	lxl3
;
;
;
	page
restart:
	push	hl	
	push	de
	push	bc
	push	af
	call	memsiz
	ex	de,hl
	ld	hl,10
	add	hl,sp
	ld	b,4
	ex	de,hl
lxr0:	dec	hl
	ld	(hl),d
	dec	hl
	ld	(hl),e
	pop	de
	djnz	lxr0
	pop	bc
	dec	bc
	ld	sp,hl
	ld	hl,tlocx
	add	hl,sp
	ld	a,(hl)
	sub	c
	inc	hl
	jr	nz,lxr1
	ld	a,(hl)
	sub	b
	jr	z,lxr3
lxr1:	inc	hl
	inc	hl
	ld	a,(hl)
	sub	c
	jr	nz,lxr2
	inc	hl
	ld	a,(hl)
	sub	b
	jr	z,lxr3
lxr2:	inc	bc
lxr3:	ld	hl,llocx
	add	hl,sp
	ld	(hl),e
	inc	hl	
	ld	(hl),d
	inc	hl
	inc	hl
	ld	(hl),c
	inc	hl
	ld	(hl),b
	push	bc
	ld	c,'@'
	call	co
	pop	hl
	call	ladr
	ld	hl,tlocx
	add	hl,sp
	ld	bc,200h
lxr4:	ld	e,(hl)
	ld	(hl),c
	inc	hl
	ld	d,(hl)
	ld	(hl),c
	inc	hl
	ld	a,e
	or	d
	jr	z,lxr5
	ld	a,(hl)
	ld	(de),a
lxr5:	inc	hl
	djnz	lxr4
	ex	AF,AF'
	exx
	push	hl
	push	de
	push	bc
	push	af
	push	ix
	push	iy
	ld	a,i
	ld	b,a
	ld	a,r
	ld	c,a
	push	bc
	jp	start
;
;
;
ki:
	call	ci
	and	7fh
	ret
;
ti:
	call	ki
	ret	z
	inc	a
	ret	m
	dec	a
	cp	cr
	ret	z
	cp	'N'
	ret	z
	cp	'n'
	jr	z,lxt
	push	bc
	ld	c,a
	call	co
	ld	a,c
	pop	bc
	cp	'A'-1
	ret	c
	cp	'z'+1
	ret	nc
lxt:	and	5fh
	ret
;
;
;
query:
	call	ti
	cp	'O'
	jr	z,quo
	cp	'I'
	jp	nz,error
	call	expr1
	pop	bc
	in	e,(c)
bits:	ld	b,8
	call	blk
lxq2:	sla	e
	ld	a,'0' shr 1
	adc	a,a
	ld	c,a
	call	co
	djnz	lxq2
	ret
quo:	call	expr
	pop	de
	pop	bc
	out	(c),e
	ret
;
;	verify
;
verify:
	call	expr3
veri0:	ld	a,(bc)
	cp	(hl)
	jr	z,lxbbn
	push	bc
	call	cerr
	pop	bc
lxbbn:	inc	bc
	call	hildx
	jr	veri0
;
	page
;
;	io lookup table
;
ltbl:
	defb	'C','T','V','B','U'
	defb	'R','T','P','C','U'
	defb	'P','T','P','C','U'
	defb	'L','T','V','L','U'

exit:
	pop	bc
	ld	a,c
	ld	r,a
	ld	a,b
	ld	i,a
	pop	iy
	pop	ix
	pop	af
	pop	bc
	pop	de
	pop	hl
	ex	AF,AF'
	exx
	pop	de
	pop	bc
	pop	af
	pop	hl
	ld	sp,hl
	nop
	ld	hl,0
	jp	0

	defw	0
	defb 	0
	defw	0
	defb	0				;trap area

endx:
aloc	equ	15h
bloc	equ	13h
cloc	equ	12h
dloc	equ	11h
eloc	equ	10h
floc	equ	14h
hloc	equ	31h
lloc	equ	30h
ploc	equ	34h
sloc	equ	17h
tloc	equ	35h
tlocx	equ	25h
llocx	equ	20h

aploc	equ	9
bploc	equ	0bh
cploc	equ	0ah
dploc	equ	0dh
eploc	equ	0ch
fploc	equ	8
hploc	equ	0fh
lploc	equ	0eh
xloc	equ	7
yloc	equ	5
rloc	equ	2
iloc	equ	3

	page
actbl:
	defb	'A',aloc or 0
	defb	'B',bloc or 0
	defb	'C',cloc or 0
	defb	'D',dloc or 0
	defb	'E',eloc or 0
	defb	'F',floc or 0
	defb	'H',hloc or 0
	defb	'L',lloc or 0
	defb	'M',hloc or 0c0h
	defb	'P',ploc or 080h
	defb	'S',sloc or 080h
	defb	'I',iloc or 0

	defb	0c1h

prmtb:
	defb	'A',aploc or 0
	defb	'B',bploc or 0
	defb	'C',cploc or 0
	defb	'D',dploc or 0
	defb	'E',eploc or 0
	defb	'F',fploc or 0
	defb	'H',hploc or 0
	defb	'L',lploc or 0
	defb	'M',hploc or 0c0h
	defb	'X',xloc or 080h
	defb	'Y',yloc or 080h
	defb	'R',rloc or 0

	defb	0c1h

tabstart:					;Tabelle Sprungvectoren
userci:		jp	ttyin
userri:		jp	ttyin
userco:		jp	ttyout
userpoo:	jp	ttyout
userlo:		jp	ttyout
usercsts:	jp	ttycsts

iobyt:	defb	0
oexec:	defs	3
iexec:	defs	3
kexec:	defs	3
;
bws	equ	3000h
atsd	equ	0a0h
atss1	equ	0a1h
atss2	equ	0a2h

bpos:	defs	0
	page
;	include	SOFT.MAC

soft:
	xor	a
	ret



lastmon:
	defb	0				;last storage
	.dephase

	end	beginn
